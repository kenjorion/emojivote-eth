"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("./types");
function getRandomIntString() {
    try {
        return String(crypto.getRandomValues(new Uint32Array(1))[0]);
    }
    catch (_a) {
        // if `crypto` is not supported, fall back to Math.random
        // tslint:disable-next-line:no-magic-numbers
        return String(Math.floor(Math.random() * 10000000));
    }
}
exports.getRandomIntString = getRandomIntString;
function normalizeConfigAndLogErrorsOnInvalidFields(config) {
    var errors = [];
    var configCopy = __assign({}, config);
    if (!['desktop', 'mobile', 'auto'].includes(config.variant)) {
        configCopy.variant = 'desktop';
        errors.push({
            fieldName: 'variant',
            description: 'Invalid value for `variant` config field ',
            exampleValue: "'desktop'",
            severity: types_1.EventSeverity.WARNING
        });
    }
    logErrors(errors);
    return configCopy;
}
exports.normalizeConfigAndLogErrorsOnInvalidFields = normalizeConfigAndLogErrorsOnInvalidFields;
function logErrors(errors) {
    if (!errors.length) {
        return;
    }
    // tslint:disable:no-console
    console.group('Config errors');
    errors.forEach(function (error) {
        console.group(error.fieldName);
        console.log(error.description);
        console.log("Example expected value: " + error.exampleValue);
        console.log("Severity: " + error.severity);
        console.groupEnd();
    });
    console.groupEnd();
    // tslint:enable:no-console
}
function initEventListenersDict() {
    var widgetEventTypes = Array.from(Object.values(types_1.WidgetEventTypes));
    var internalEventTypes = Array.from(Object.values(types_1.InternalEventTypes));
    return widgetEventTypes.concat(internalEventTypes).reduce(function (listenersDict, eventType) {
        listenersDict[eventType] = [];
        return listenersDict;
    }, {});
}
exports.initEventListenersDict = initEventListenersDict;
function countListenersForEvent(listeners, event, internal) {
    if (internal === void 0) { internal = false; }
    return listeners[event].filter(function (handler) { return handler.internal === internal; }).length;
}
exports.countListenersForEvent = countListenersForEvent;
function determineWidgetVariant(config) {
    var mediaQuery = '(min-width: 920px) and (min-height: 630px)';
    if (config.variant === 'mobile' || config.variant === 'desktop') {
        return config.variant;
    }
    var isDesktop = window.matchMedia(mediaQuery).matches;
    return isDesktop ? 'desktop' : 'mobile';
}
exports.determineWidgetVariant = determineWidgetVariant;
//# sourceMappingURL=utils.js.map