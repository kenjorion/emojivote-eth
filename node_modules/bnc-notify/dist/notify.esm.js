function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

import 'regenerator-runtime/runtime';
import uuid from 'uuid/v4';
import debounce from 'lodash.debounce';
import BigNumber from 'bignumber.js';
import BlocknativeSdk from 'bnc-sdk'; // gutted from https://github.com/Polymer/observe-js/blob/master/src/observe.js

function noop() {}

function detectEval() {
  // Don't test for eval if we're running in a Chrome App environment.
  // We check for APIs set that only exist in a Chrome App context.
  if (typeof chrome !== 'undefined' && chrome.app && chrome.app.runtime) {
    return false;
  } // Firefox OS Apps do not allow eval. This feature detection is very hacky
  // but even if some other platform adds support for this function this code
  // will continue to work.


  if (typeof navigator != 'undefined' && navigator.getDeviceStorage) {
    return false;
  }

  try {
    var f = new Function('', 'return true;');
    return f();
  } catch (ex) {
    return false;
  }
}

var hasEval = detectEval();

function isIndex(s) {
  return +s === s >>> 0 && s !== '';
}

function isObject(obj) {
  return obj === Object(obj);
}

var createObject = '__proto__' in {} ? function (obj) {
  return obj;
} : function (obj) {
  var proto = obj.__proto__;
  if (!proto) return obj;
  var newObject = Object.create(proto);
  Object.getOwnPropertyNames(obj).forEach(function (name) {
    Object.defineProperty(newObject, name, Object.getOwnPropertyDescriptor(obj, name));
  });
  return newObject;
};

function parsePath(path) {
  var keys = [];
  var index = -1;
  var c,
      newChar,
      key,
      type,
      transition,
      action,
      typeMap,
      mode = 'beforePath';
  var actions = {
    push: function push() {
      if (key === undefined) return;
      keys.push(key);
      key = undefined;
    },
    append: function append() {
      if (key === undefined) key = newChar;else key += newChar;
    }
  };

  function maybeUnescapeQuote() {
    if (index >= path.length) return;
    var nextChar = path[index + 1];

    if (mode == 'inSingleQuote' && nextChar == "'" || mode == 'inDoubleQuote' && nextChar == '"') {
      index++;
      newChar = nextChar;
      actions.append();
      return true;
    }
  }

  while (mode) {
    index++;
    c = path[index];
    if (c == '\\' && maybeUnescapeQuote()) continue;
    type = getPathCharType(c);
    typeMap = pathStateMachine[mode];
    transition = typeMap[type] || typeMap['else'] || 'error';
    if (transition == 'error') return; // parse error

    mode = transition[0];
    action = actions[transition[1]] || noop;
    newChar = transition[2] === undefined ? c : transition[2];
    action();

    if (mode === 'afterPath') {
      return keys;
    }
  }

  return; // parse error
}

var identStart = '[\$_a-zA-Z]';
var identPart = '[\$_a-zA-Z0-9]';
var identRegExp = new RegExp('^' + identStart + '+' + identPart + '*' + '$');

function isIdent(s) {
  return identRegExp.test(s);
}

var constructorIsPrivate = {};

function Path(parts, privateToken) {
  if (privateToken !== constructorIsPrivate) throw Error('Use Path.get to retrieve path objects');

  for (var i = 0; i < parts.length; i++) {
    this.push(String(parts[i]));
  }

  if (hasEval && this.length) {
    this.getValueFrom = this.compiledGetValueFromFn();
  }
}

var pathCache = {};

function getPath(pathString) {
  if (pathString instanceof Path) return pathString;
  if (pathString == null || pathString.length == 0) pathString = '';

  if (typeof pathString != 'string') {
    if (isIndex(pathString.length)) {
      // Constructed with array-like (pre-parsed) keys
      return new Path(pathString, constructorIsPrivate);
    }

    pathString = String(pathString);
  }

  var path = pathCache[pathString];
  if (path) return path;
  var parts = parsePath(pathString);
  if (!parts) return invalidPath;
  var path = new Path(parts, constructorIsPrivate);
  pathCache[pathString] = path;
  return path;
}

Path.get = getPath;

function formatAccessor(key) {
  if (isIndex(key)) {
    return '[' + key + ']';
  } else {
    return '["' + key.replace(/"/g, '\\"') + '"]';
  }
}

Path.prototype = createObject({
  __proto__: [],
  valid: true,
  toString: function toString() {
    var pathString = '';

    for (var i = 0; i < this.length; i++) {
      var key = this[i];

      if (isIdent(key)) {
        pathString += i ? '.' + key : key;
      } else {
        pathString += formatAccessor(key);
      }
    }

    return pathString;
  },
  getValueFrom: function getValueFrom(obj, directObserver) {
    for (var i = 0; i < this.length; i++) {
      if (obj == null) return;
      obj = obj[this[i]];
    }

    return obj;
  },
  iterateObjects: function iterateObjects(obj, observe) {
    for (var i = 0; i < this.length; i++) {
      if (i) obj = obj[this[i - 1]];
      if (!isObject(obj)) return;
      observe(obj, this[i]);
    }
  },
  compiledGetValueFromFn: function compiledGetValueFromFn() {
    var str = '';
    var pathString = 'obj';
    str += 'if (obj != null';
    var i = 0;
    var key;

    for (; i < this.length - 1; i++) {
      key = this[i];
      pathString += isIdent(key) ? '.' + key : formatAccessor(key);
      str += ' &&\n     ' + pathString + ' != null';
    }

    str += ')\n';
    var key = this[i];
    pathString += isIdent(key) ? '.' + key : formatAccessor(key);
    str += '  return ' + pathString + ';\nelse\n  return undefined;';
    return new Function('obj', str);
  },
  setValueFrom: function setValueFrom(obj, value) {
    if (!this.length) return false;

    for (var i = 0; i < this.length - 1; i++) {
      if (!isObject(obj)) return false;
      obj = obj[this[i]];
    }

    if (!isObject(obj)) return false;
    obj[this[i]] = value;
    return true;
  }
});

function getPathCharType(_char) {
  if (_char === undefined) return 'eof';

  var code = _char.charCodeAt(0);

  switch (code) {
    case 0x5B: // [

    case 0x5D: // ]

    case 0x2E: // .

    case 0x22: // "

    case 0x27: // '

    case 0x30:
      // 0
      return _char;

    case 0x5F: // _

    case 0x24:
      // $
      return 'ident';

    case 0x20: // Space

    case 0x09: // Tab

    case 0x0A: // Newline

    case 0x0D: // Return

    case 0xA0: // No-break space

    case 0xFEFF: // Byte Order Mark

    case 0x2028: // Line Separator

    case 0x2029:
      // Paragraph Separator
      return 'ws';
  } // a-z, A-Z


  if (0x61 <= code && code <= 0x7A || 0x41 <= code && code <= 0x5A) return 'ident'; // 1-9

  if (0x31 <= code && code <= 0x39) return 'number';
  return 'else';
}

var pathStateMachine = {
  'beforePath': {
    'ws': ['beforePath'],
    'ident': ['inIdent', 'append'],
    '[': ['beforeElement'],
    'eof': ['afterPath']
  },
  'inPath': {
    'ws': ['inPath'],
    '.': ['beforeIdent'],
    '[': ['beforeElement'],
    'eof': ['afterPath']
  },
  'beforeIdent': {
    'ws': ['beforeIdent'],
    'ident': ['inIdent', 'append']
  },
  'inIdent': {
    'ident': ['inIdent', 'append'],
    '0': ['inIdent', 'append'],
    'number': ['inIdent', 'append'],
    'ws': ['inPath', 'push'],
    '.': ['beforeIdent', 'push'],
    '[': ['beforeElement', 'push'],
    'eof': ['afterPath', 'push']
  },
  'beforeElement': {
    'ws': ['beforeElement'],
    '0': ['afterZero', 'append'],
    'number': ['inIndex', 'append'],
    "'": ['inSingleQuote', 'append', ''],
    '"': ['inDoubleQuote', 'append', '']
  },
  'afterZero': {
    'ws': ['afterElement', 'push'],
    ']': ['inPath', 'push']
  },
  'inIndex': {
    '0': ['inIndex', 'append'],
    'number': ['inIndex', 'append'],
    'ws': ['afterElement'],
    ']': ['inPath', 'push']
  },
  'inSingleQuote': {
    "'": ['afterElement'],
    'eof': ['error'],
    'else': ['inSingleQuote', 'append']
  },
  'inDoubleQuote': {
    '"': ['afterElement'],
    'eof': ['error'],
    'else': ['inDoubleQuote', 'append']
  },
  'afterElement': {
    'ws': ['afterElement'],
    ']': ['inPath', 'push']
  }
};
var invalidPath = new Path('', constructorIsPrivate);
invalidPath.valid = false;

invalidPath.getValueFrom = invalidPath.setValueFrom = function () {};

var path = Path;
/**
 *
 * @param {Object} o
 * @param {String} path
 * @returns {*}
 */

var objectResolvePath = function objectResolvePath(o, path$1) {
  if (typeof path$1 !== 'string') {
    throw new TypeError('path must be a string');
  }

  if (_typeof(o) !== 'object') {
    throw new TypeError('object must be passed');
  }

  var pathObj = path.get(path$1);

  if (!pathObj.valid) {
    throw new Error('path is not a valid object path');
  }

  return pathObj.getValueFrom(o);
};

var TYPE;

(function (TYPE) {
  /**
   * Raw text
   */
  TYPE[TYPE["literal"] = 0] = "literal";
  /**
   * Variable w/o any format, e.g `var` in `this is a {var}`
   */

  TYPE[TYPE["argument"] = 1] = "argument";
  /**
   * Variable w/ number format
   */

  TYPE[TYPE["number"] = 2] = "number";
  /**
   * Variable w/ date format
   */

  TYPE[TYPE["date"] = 3] = "date";
  /**
   * Variable w/ time format
   */

  TYPE[TYPE["time"] = 4] = "time";
  /**
   * Variable w/ select format
   */

  TYPE[TYPE["select"] = 5] = "select";
  /**
   * Variable w/ plural format
   */

  TYPE[TYPE["plural"] = 6] = "plural";
  /**
   * Only possible within plural argument.
   * This is the `#` symbol that will be substituted with the count.
   */

  TYPE[TYPE["pound"] = 7] = "pound";
})(TYPE || (TYPE = {}));
/**
 * Type Guards
 */


function isLiteralElement(el) {
  return el.type === TYPE.literal;
}

function isArgumentElement(el) {
  return el.type === TYPE.argument;
}

function isNumberElement(el) {
  return el.type === TYPE.number;
}

function isDateElement(el) {
  return el.type === TYPE.date;
}

function isTimeElement(el) {
  return el.type === TYPE.time;
}

function isSelectElement(el) {
  return el.type === TYPE.select;
}

function isPluralElement(el) {
  return el.type === TYPE.plural;
}

function isPoundElement(el) {
  return el.type === TYPE.pound;
}

function isNumberSkeleton(el) {
  return !!(el && _typeof(el) === 'object' && el.type === 0
  /* number */
  );
}

function isDateTimeSkeleton(el) {
  return !!(el && _typeof(el) === 'object' && el.type === 1
  /* dateTime */
  );
} // tslint:disable:only-arrow-functions
// tslint:disable:object-literal-shorthand
// tslint:disable:trailing-comma
// tslint:disable:object-literal-sort-keys
// tslint:disable:one-variable-per-declaration
// tslint:disable:max-line-length
// tslint:disable:no-consecutive-blank-lines
// tslint:disable:align


var __extends = undefined && undefined.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __assign = undefined && undefined.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var SyntaxError =
/** @class */
function (_super) {
  __extends(SyntaxError, _super);

  function SyntaxError(message, expected, found, location) {
    var _this = _super.call(this) || this;

    _this.message = message;
    _this.expected = expected;
    _this.found = found;
    _this.location = location;
    _this.name = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(_this, SyntaxError);
    }

    return _this;
  }

  SyntaxError.buildMessage = function (expected, found) {
    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s.replace(/\\/g, "\\\\").replace(/"/g, "\\\"").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function (ch) {
        return "\\x0" + hex(ch);
      }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
        return "\\x" + hex(ch);
      });
    }

    function classEscape(s) {
      return s.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function (ch) {
        return "\\x0" + hex(ch);
      }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
        return "\\x" + hex(ch);
      });
    }

    function describeExpectation(expectation) {
      switch (expectation.type) {
        case "literal":
          return "\"" + literalEscape(expectation.text) + "\"";

        case "class":
          var escapedParts = expectation.parts.map(function (part) {
            return Array.isArray(part) ? classEscape(part[0]) + "-" + classEscape(part[1]) : classEscape(part);
          });
          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";

        case "any":
          return "any character";

        case "end":
          return "end of input";

        case "other":
          return expectation.description;
      }
    }

    function describeExpected(expected1) {
      var descriptions = expected1.map(describeExpectation);
      var i;
      var j;
      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }

        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found1) {
      return found1 ? "\"" + literalEscape(found1) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  return SyntaxError;
}(Error);

function peg$parse(input, options) {
  options = options !== undefined ? options : {};
  var peg$FAILED = {};
  var peg$startRuleFunctions = {
    start: peg$parsestart
  };
  var peg$startRuleFunction = peg$parsestart;

  var peg$c0 = function peg$c0(parts) {
    return parts.join('');
  };

  var peg$c1 = function peg$c1(messageText) {
    return __assign({
      type: TYPE.literal,
      value: messageText
    }, insertLocation());
  };

  var peg$c2 = "#";
  var peg$c3 = peg$literalExpectation("#", false);

  var peg$c4 = function peg$c4() {
    return __assign({
      type: TYPE.pound
    }, insertLocation());
  };

  var peg$c5 = peg$otherExpectation("argumentElement");
  var peg$c6 = "{";
  var peg$c7 = peg$literalExpectation("{", false);
  var peg$c8 = "}";
  var peg$c9 = peg$literalExpectation("}", false);

  var peg$c10 = function peg$c10(value) {
    return __assign({
      type: TYPE.argument,
      value: value
    }, insertLocation());
  };

  var peg$c11 = peg$otherExpectation("numberSkeletonId");
  var peg$c12 = /^['\/{}]/;
  var peg$c13 = peg$classExpectation(["'", "/", "{", "}"], false, false);
  var peg$c14 = peg$anyExpectation();
  var peg$c15 = peg$otherExpectation("numberSkeletonTokenOption");
  var peg$c16 = "/";
  var peg$c17 = peg$literalExpectation("/", false);

  var peg$c18 = function peg$c18(option) {
    return option;
  };

  var peg$c19 = peg$otherExpectation("numberSkeletonToken");

  var peg$c20 = function peg$c20(stem, options) {
    return {
      stem: stem,
      options: options
    };
  };

  var peg$c21 = function peg$c21(tokens) {
    return __assign({
      type: 0
      /* number */
      ,
      tokens: tokens
    }, insertLocation());
  };

  var peg$c22 = "::";
  var peg$c23 = peg$literalExpectation("::", false);

  var peg$c24 = function peg$c24(skeleton) {
    return skeleton;
  };

  var peg$c25 = function peg$c25() {
    messageCtx.push('numberArgStyle');
    return true;
  };

  var peg$c26 = function peg$c26(style) {
    messageCtx.pop();
    return style.replace(/\s*$/, '');
  };

  var peg$c27 = ",";
  var peg$c28 = peg$literalExpectation(",", false);
  var peg$c29 = "number";
  var peg$c30 = peg$literalExpectation("number", false);

  var peg$c31 = function peg$c31(value, type, style) {
    return __assign({
      type: type === 'number' ? TYPE.number : type === 'date' ? TYPE.date : TYPE.time,
      style: style && style[2],
      value: value
    }, insertLocation());
  };

  var peg$c32 = "'";
  var peg$c33 = peg$literalExpectation("'", false);
  var peg$c34 = /^[^']/;
  var peg$c35 = peg$classExpectation(["'"], true, false);
  var peg$c36 = /^[^a-zA-Z'{}]/;
  var peg$c37 = peg$classExpectation([["a", "z"], ["A", "Z"], "'", "{", "}"], true, false);
  var peg$c38 = /^[a-zA-Z]/;
  var peg$c39 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false);

  var peg$c40 = function peg$c40(pattern) {
    return __assign({
      type: 1
      /* dateTime */
      ,
      pattern: pattern
    }, insertLocation());
  };

  var peg$c41 = function peg$c41() {
    messageCtx.push('dateOrTimeArgStyle');
    return true;
  };

  var peg$c42 = "date";
  var peg$c43 = peg$literalExpectation("date", false);
  var peg$c44 = "time";
  var peg$c45 = peg$literalExpectation("time", false);
  var peg$c46 = "plural";
  var peg$c47 = peg$literalExpectation("plural", false);
  var peg$c48 = "selectordinal";
  var peg$c49 = peg$literalExpectation("selectordinal", false);
  var peg$c50 = "offset:";
  var peg$c51 = peg$literalExpectation("offset:", false);

  var peg$c52 = function peg$c52(value, pluralType, offset, options) {
    return __assign({
      type: TYPE.plural,
      pluralType: pluralType === 'plural' ? 'cardinal' : 'ordinal',
      value: value,
      offset: offset ? offset[2] : 0,
      options: options.reduce(function (all, _a) {
        var id = _a.id,
            value = _a.value,
            optionLocation = _a.location;

        if (id in all) {
          error("Duplicate option \"" + id + "\" in plural element: \"" + text() + "\"", location());
        }

        all[id] = {
          value: value,
          location: optionLocation
        };
        return all;
      }, {})
    }, insertLocation());
  };

  var peg$c53 = "select";
  var peg$c54 = peg$literalExpectation("select", false);

  var peg$c55 = function peg$c55(value, options) {
    return __assign({
      type: TYPE.select,
      value: value,
      options: options.reduce(function (all, _a) {
        var id = _a.id,
            value = _a.value,
            optionLocation = _a.location;

        if (id in all) {
          error("Duplicate option \"" + id + "\" in select element: \"" + text() + "\"", location());
        }

        all[id] = {
          value: value,
          location: optionLocation
        };
        return all;
      }, {})
    }, insertLocation());
  };

  var peg$c56 = "=";
  var peg$c57 = peg$literalExpectation("=", false);

  var peg$c58 = function peg$c58(id) {
    messageCtx.push('select');
    return true;
  };

  var peg$c59 = function peg$c59(id, value) {
    messageCtx.pop();
    return __assign({
      id: id,
      value: value
    }, insertLocation());
  };

  var peg$c60 = function peg$c60(id) {
    messageCtx.push('plural');
    return true;
  };

  var peg$c61 = function peg$c61(id, value) {
    messageCtx.pop();
    return __assign({
      id: id,
      value: value
    }, insertLocation());
  };

  var peg$c62 = peg$otherExpectation("whitespace");
  var peg$c63 = /^[\t-\r \x85\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/;
  var peg$c64 = peg$classExpectation([["\t", "\r"], " ", "\x85", "\xA0", "\u1680", ["\u2000", "\u200A"], "\u2028", "\u2029", "\u202F", "\u205F", "\u3000"], false, false);
  var peg$c65 = peg$otherExpectation("syntax pattern");
  var peg$c66 = /^[!-\/:-@[-\^`{-~\xA1-\xA7\xA9\xAB\xAC\xAE\xB0\xB1\xB6\xBB\xBF\xD7\xF7\u2010-\u2027\u2030-\u203E\u2041-\u2053\u2055-\u205E\u2190-\u245F\u2500-\u2775\u2794-\u2BFF\u2E00-\u2E7F\u3001-\u3003\u3008-\u3020\u3030\uFD3E\uFD3F\uFE45\uFE46]/;
  var peg$c67 = peg$classExpectation([["!", "/"], [":", "@"], ["[", "^"], "`", ["{", "~"], ["\xA1", "\xA7"], "\xA9", "\xAB", "\xAC", "\xAE", "\xB0", "\xB1", "\xB6", "\xBB", "\xBF", "\xD7", "\xF7", ["\u2010", "\u2027"], ["\u2030", "\u203E"], ["\u2041", "\u2053"], ["\u2055", "\u205E"], ["\u2190", "\u245F"], ["\u2500", "\u2775"], ["\u2794", "\u2BFF"], ["\u2E00", "\u2E7F"], ["\u3001", "\u3003"], ["\u3008", "\u3020"], "\u3030", "\uFD3E", "\uFD3F", "\uFE45", "\uFE46"], false, false);
  var peg$c68 = peg$otherExpectation("optional whitespace");
  var peg$c69 = peg$otherExpectation("number");
  var peg$c70 = "-";
  var peg$c71 = peg$literalExpectation("-", false);

  var peg$c72 = function peg$c72(negative, num) {
    return num ? negative ? -num : num : 0;
  };

  var peg$c74 = peg$otherExpectation("double apostrophes");
  var peg$c75 = "''";
  var peg$c76 = peg$literalExpectation("''", false);

  var peg$c77 = function peg$c77() {
    return "'";
  };

  var peg$c78 = function peg$c78(escapedChar, quotedChars) {
    return escapedChar + quotedChars.replace("''", "'");
  };

  var peg$c79 = function peg$c79(x) {
    return x !== '{' && !(isInPluralOption() && x === '#') && !(isNestedMessageText() && x === '}');
  };

  var peg$c80 = "\n";
  var peg$c81 = peg$literalExpectation("\n", false);

  var peg$c82 = function peg$c82(x) {
    return x === '{' || x === '}' || isInPluralOption() && x === '#';
  };

  var peg$c83 = peg$otherExpectation("argNameOrNumber");
  var peg$c84 = peg$otherExpectation("argNumber");
  var peg$c85 = "0";
  var peg$c86 = peg$literalExpectation("0", false);

  var peg$c87 = function peg$c87() {
    return 0;
  };

  var peg$c88 = /^[1-9]/;
  var peg$c89 = peg$classExpectation([["1", "9"]], false, false);
  var peg$c90 = /^[0-9]/;
  var peg$c91 = peg$classExpectation([["0", "9"]], false, false);

  var peg$c92 = function peg$c92(digits) {
    return parseInt(digits.join(''), 10);
  };

  var peg$c93 = peg$otherExpectation("argName");
  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{
    line: 1,
    column: 1
  }];
  var peg$maxFailPos = 0;
  var peg$maxFailExpected = [];
  var peg$silentFails = 0;
  var peg$result;

  if (options.startRule !== undefined) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function error(message, location1) {
    location1 = location1 !== undefined ? location1 : peg$computeLocation(peg$savedPos, peg$currPos);
    throw peg$buildSimpleError(message, location1);
  }

  function peg$literalExpectation(text1, ignoreCase) {
    return {
      type: "literal",
      text: text1,
      ignoreCase: ignoreCase
    };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return {
      type: "class",
      parts: parts,
      inverted: inverted,
      ignoreCase: ignoreCase
    };
  }

  function peg$anyExpectation() {
    return {
      type: "any"
    };
  }

  function peg$endExpectation() {
    return {
      type: "end"
    };
  }

  function peg$otherExpectation(description) {
    return {
      type: "other",
      description: description
    };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;

      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);
    return {
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected1) {
    if (peg$currPos < peg$maxFailPos) {
      return;
    }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected1);
  }

  function peg$buildSimpleError(message, location1) {
    return new SyntaxError(message, [], "", location1);
  }

  function peg$buildStructuredError(expected1, found, location1) {
    return new SyntaxError(SyntaxError.buildMessage(expected1, found), expected1, found, location1);
  }

  function peg$parsestart() {
    var s0;
    s0 = peg$parsemessage();
    return s0;
  }

  function peg$parsemessage() {
    var s0, s1;
    s0 = [];
    s1 = peg$parsemessageElement();

    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parsemessageElement();
    }

    return s0;
  }

  function peg$parsemessageElement() {
    var s0;
    s0 = peg$parseliteralElement();

    if (s0 === peg$FAILED) {
      s0 = peg$parseargumentElement();

      if (s0 === peg$FAILED) {
        s0 = peg$parsesimpleFormatElement();

        if (s0 === peg$FAILED) {
          s0 = peg$parsepluralElement();

          if (s0 === peg$FAILED) {
            s0 = peg$parseselectElement();

            if (s0 === peg$FAILED) {
              s0 = peg$parsepoundElement();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsemessageText() {
    var s0, s1, s2;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsedoubleApostrophes();

    if (s2 === peg$FAILED) {
      s2 = peg$parsequotedString();

      if (s2 === peg$FAILED) {
        s2 = peg$parseunquotedString();
      }
    }

    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsedoubleApostrophes();

        if (s2 === peg$FAILED) {
          s2 = peg$parsequotedString();

          if (s2 === peg$FAILED) {
            s2 = peg$parseunquotedString();
          }
        }
      }
    } else {
      s1 = peg$FAILED;
    }

    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c0(s1);
    }

    s0 = s1;
    return s0;
  }

  function peg$parseliteralElement() {
    var s0, s1;
    s0 = peg$currPos;
    s1 = peg$parsemessageText();

    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c1(s1);
    }

    s0 = s1;
    return s0;
  }

  function peg$parsepoundElement() {
    var s0, s1;
    s0 = peg$currPos;

    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c2;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c3);
      }
    }

    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c4();
    }

    s0 = s1;
    return s0;
  }

  function peg$parseargumentElement() {
    var s0, s1, s2, s3, s4, s5;
    peg$silentFails++;
    s0 = peg$currPos;

    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c6;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c7);
      }
    }

    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();

      if (s2 !== peg$FAILED) {
        s3 = peg$parseargNameOrNumber();

        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();

          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s5 = peg$c8;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c9);
              }
            }

            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c10(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c5);
      }
    }

    return s0;
  }

  function peg$parsenumberSkeletonId() {
    var s0, s1, s2, s3, s4;
    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$currPos;
    peg$silentFails++;
    s4 = peg$parsewhiteSpace();

    if (s4 === peg$FAILED) {
      if (peg$c12.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c13);
        }
      }
    }

    peg$silentFails--;

    if (s4 === peg$FAILED) {
      s3 = undefined;
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }

    if (s3 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c14);
        }
      }

      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }

    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parsewhiteSpace();

        if (s4 === peg$FAILED) {
          if (peg$c12.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c13);
            }
          }
        }

        peg$silentFails--;

        if (s4 === peg$FAILED) {
          s3 = undefined;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }

        if (s3 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c14);
            }
          }

          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }

    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c11);
      }
    }

    return s0;
  }

  function peg$parsenumberSkeletonTokenOption() {
    var s0, s1, s2;
    peg$silentFails++;
    s0 = peg$currPos;

    if (input.charCodeAt(peg$currPos) === 47) {
      s1 = peg$c16;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c17);
      }
    }

    if (s1 !== peg$FAILED) {
      s2 = peg$parsenumberSkeletonId();

      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c18(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c15);
      }
    }

    return s0;
  }

  function peg$parsenumberSkeletonToken() {
    var s0, s1, s2, s3, s4;
    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();

    if (s1 !== peg$FAILED) {
      s2 = peg$parsenumberSkeletonId();

      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsenumberSkeletonTokenOption();

        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsenumberSkeletonTokenOption();
        }

        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c20(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c19);
      }
    }

    return s0;
  }

  function peg$parsenumberSkeleton() {
    var s0, s1, s2;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsenumberSkeletonToken();

    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsenumberSkeletonToken();
      }
    } else {
      s1 = peg$FAILED;
    }

    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c21(s1);
    }

    s0 = s1;
    return s0;
  }

  function peg$parsenumberArgStyle() {
    var s0, s1, s2;
    s0 = peg$currPos;

    if (input.substr(peg$currPos, 2) === peg$c22) {
      s1 = peg$c22;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c23);
      }
    }

    if (s1 !== peg$FAILED) {
      s2 = peg$parsenumberSkeleton();

      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c24(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      peg$savedPos = peg$currPos;
      s1 = peg$c25();

      if (s1) {
        s1 = undefined;
      } else {
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$parsemessageText();

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c26(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsenumberFormatElement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;
    s0 = peg$currPos;

    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c6;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c7);
      }
    }

    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();

      if (s2 !== peg$FAILED) {
        s3 = peg$parseargNameOrNumber();

        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();

          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c27;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c28);
              }
            }

            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();

              if (s6 !== peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c29) {
                  s7 = peg$c29;
                  peg$currPos += 6;
                } else {
                  s7 = peg$FAILED;

                  if (peg$silentFails === 0) {
                    peg$fail(peg$c30);
                  }
                }

                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();

                  if (s8 !== peg$FAILED) {
                    s9 = peg$currPos;

                    if (input.charCodeAt(peg$currPos) === 44) {
                      s10 = peg$c27;
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;

                      if (peg$silentFails === 0) {
                        peg$fail(peg$c28);
                      }
                    }

                    if (s10 !== peg$FAILED) {
                      s11 = peg$parse_();

                      if (s11 !== peg$FAILED) {
                        s12 = peg$parsenumberArgStyle();

                        if (s12 !== peg$FAILED) {
                          s10 = [s10, s11, s12];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }

                    if (s9 === peg$FAILED) {
                      s9 = null;
                    }

                    if (s9 !== peg$FAILED) {
                      s10 = peg$parse_();

                      if (s10 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 125) {
                          s11 = peg$c8;
                          peg$currPos++;
                        } else {
                          s11 = peg$FAILED;

                          if (peg$silentFails === 0) {
                            peg$fail(peg$c9);
                          }
                        }

                        if (s11 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c31(s3, s7, s9);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedateTimeSkeletonLiteral() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;

    if (input.charCodeAt(peg$currPos) === 39) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c33);
      }
    }

    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsedoubleApostrophes();

      if (s3 === peg$FAILED) {
        if (peg$c34.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c35);
          }
        }
      }

      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsedoubleApostrophes();

          if (s3 === peg$FAILED) {
            if (peg$c34.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c35);
              }
            }
          }
        }
      } else {
        s2 = peg$FAILED;
      }

      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c32;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c33);
          }
        }

        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 === peg$FAILED) {
      s0 = [];
      s1 = peg$parsedoubleApostrophes();

      if (s1 === peg$FAILED) {
        if (peg$c36.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c37);
          }
        }
      }

      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parsedoubleApostrophes();

          if (s1 === peg$FAILED) {
            if (peg$c36.test(input.charAt(peg$currPos))) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c37);
              }
            }
          }
        }
      } else {
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsedateTimeSkeletonPattern() {
    var s0, s1;
    s0 = [];

    if (peg$c38.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c39);
      }
    }

    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);

        if (peg$c38.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c39);
          }
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedateTimeSkeleton() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parsedateTimeSkeletonLiteral();

    if (s3 === peg$FAILED) {
      s3 = peg$parsedateTimeSkeletonPattern();
    }

    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsedateTimeSkeletonLiteral();

        if (s3 === peg$FAILED) {
          s3 = peg$parsedateTimeSkeletonPattern();
        }
      }
    } else {
      s2 = peg$FAILED;
    }

    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }

    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c40(s1);
    }

    s0 = s1;
    return s0;
  }

  function peg$parsedateOrTimeArgStyle() {
    var s0, s1, s2;
    s0 = peg$currPos;

    if (input.substr(peg$currPos, 2) === peg$c22) {
      s1 = peg$c22;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c23);
      }
    }

    if (s1 !== peg$FAILED) {
      s2 = peg$parsedateTimeSkeleton();

      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c24(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      peg$savedPos = peg$currPos;
      s1 = peg$c41();

      if (s1) {
        s1 = undefined;
      } else {
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        s2 = peg$parsemessageText();

        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c26(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsedateOrTimeFormatElement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;
    s0 = peg$currPos;

    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c6;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c7);
      }
    }

    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();

      if (s2 !== peg$FAILED) {
        s3 = peg$parseargNameOrNumber();

        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();

          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c27;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c28);
              }
            }

            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();

              if (s6 !== peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c42) {
                  s7 = peg$c42;
                  peg$currPos += 4;
                } else {
                  s7 = peg$FAILED;

                  if (peg$silentFails === 0) {
                    peg$fail(peg$c43);
                  }
                }

                if (s7 === peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c44) {
                    s7 = peg$c44;
                    peg$currPos += 4;
                  } else {
                    s7 = peg$FAILED;

                    if (peg$silentFails === 0) {
                      peg$fail(peg$c45);
                    }
                  }
                }

                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();

                  if (s8 !== peg$FAILED) {
                    s9 = peg$currPos;

                    if (input.charCodeAt(peg$currPos) === 44) {
                      s10 = peg$c27;
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;

                      if (peg$silentFails === 0) {
                        peg$fail(peg$c28);
                      }
                    }

                    if (s10 !== peg$FAILED) {
                      s11 = peg$parse_();

                      if (s11 !== peg$FAILED) {
                        s12 = peg$parsedateOrTimeArgStyle();

                        if (s12 !== peg$FAILED) {
                          s10 = [s10, s11, s12];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }

                    if (s9 === peg$FAILED) {
                      s9 = null;
                    }

                    if (s9 !== peg$FAILED) {
                      s10 = peg$parse_();

                      if (s10 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 125) {
                          s11 = peg$c8;
                          peg$currPos++;
                        } else {
                          s11 = peg$FAILED;

                          if (peg$silentFails === 0) {
                            peg$fail(peg$c9);
                          }
                        }

                        if (s11 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c31(s3, s7, s9);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesimpleFormatElement() {
    var s0;
    s0 = peg$parsenumberFormatElement();

    if (s0 === peg$FAILED) {
      s0 = peg$parsedateOrTimeFormatElement();
    }

    return s0;
  }

  function peg$parsepluralElement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;
    s0 = peg$currPos;

    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c6;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c7);
      }
    }

    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();

      if (s2 !== peg$FAILED) {
        s3 = peg$parseargNameOrNumber();

        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();

          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c27;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c28);
              }
            }

            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();

              if (s6 !== peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c46) {
                  s7 = peg$c46;
                  peg$currPos += 6;
                } else {
                  s7 = peg$FAILED;

                  if (peg$silentFails === 0) {
                    peg$fail(peg$c47);
                  }
                }

                if (s7 === peg$FAILED) {
                  if (input.substr(peg$currPos, 13) === peg$c48) {
                    s7 = peg$c48;
                    peg$currPos += 13;
                  } else {
                    s7 = peg$FAILED;

                    if (peg$silentFails === 0) {
                      peg$fail(peg$c49);
                    }
                  }
                }

                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();

                  if (s8 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s9 = peg$c27;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;

                      if (peg$silentFails === 0) {
                        peg$fail(peg$c28);
                      }
                    }

                    if (s9 !== peg$FAILED) {
                      s10 = peg$parse_();

                      if (s10 !== peg$FAILED) {
                        s11 = peg$currPos;

                        if (input.substr(peg$currPos, 7) === peg$c50) {
                          s12 = peg$c50;
                          peg$currPos += 7;
                        } else {
                          s12 = peg$FAILED;

                          if (peg$silentFails === 0) {
                            peg$fail(peg$c51);
                          }
                        }

                        if (s12 !== peg$FAILED) {
                          s13 = peg$parse_();

                          if (s13 !== peg$FAILED) {
                            s14 = peg$parsenumber();

                            if (s14 !== peg$FAILED) {
                              s12 = [s12, s13, s14];
                              s11 = s12;
                            } else {
                              peg$currPos = s11;
                              s11 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s11;
                            s11 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s11;
                          s11 = peg$FAILED;
                        }

                        if (s11 === peg$FAILED) {
                          s11 = null;
                        }

                        if (s11 !== peg$FAILED) {
                          s12 = peg$parse_();

                          if (s12 !== peg$FAILED) {
                            s13 = [];
                            s14 = peg$parsepluralOption();

                            if (s14 !== peg$FAILED) {
                              while (s14 !== peg$FAILED) {
                                s13.push(s14);
                                s14 = peg$parsepluralOption();
                              }
                            } else {
                              s13 = peg$FAILED;
                            }

                            if (s13 !== peg$FAILED) {
                              s14 = peg$parse_();

                              if (s14 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 125) {
                                  s15 = peg$c8;
                                  peg$currPos++;
                                } else {
                                  s15 = peg$FAILED;

                                  if (peg$silentFails === 0) {
                                    peg$fail(peg$c9);
                                  }
                                }

                                if (s15 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c52(s3, s7, s11, s13);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseselectElement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;
    s0 = peg$currPos;

    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c6;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c7);
      }
    }

    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();

      if (s2 !== peg$FAILED) {
        s3 = peg$parseargNameOrNumber();

        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();

          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c27;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c28);
              }
            }

            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();

              if (s6 !== peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c53) {
                  s7 = peg$c53;
                  peg$currPos += 6;
                } else {
                  s7 = peg$FAILED;

                  if (peg$silentFails === 0) {
                    peg$fail(peg$c54);
                  }
                }

                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();

                  if (s8 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s9 = peg$c27;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;

                      if (peg$silentFails === 0) {
                        peg$fail(peg$c28);
                      }
                    }

                    if (s9 !== peg$FAILED) {
                      s10 = peg$parse_();

                      if (s10 !== peg$FAILED) {
                        s11 = [];
                        s12 = peg$parseselectOption();

                        if (s12 !== peg$FAILED) {
                          while (s12 !== peg$FAILED) {
                            s11.push(s12);
                            s12 = peg$parseselectOption();
                          }
                        } else {
                          s11 = peg$FAILED;
                        }

                        if (s11 !== peg$FAILED) {
                          s12 = peg$parse_();

                          if (s12 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 125) {
                              s13 = peg$c8;
                              peg$currPos++;
                            } else {
                              s13 = peg$FAILED;

                              if (peg$silentFails === 0) {
                                peg$fail(peg$c9);
                              }
                            }

                            if (s13 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c55(s3, s11);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepluralRuleSelectValue() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;
    s1 = peg$currPos;

    if (input.charCodeAt(peg$currPos) === 61) {
      s2 = peg$c56;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c57);
      }
    }

    if (s2 !== peg$FAILED) {
      s3 = peg$parsenumber();

      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }

    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    if (s0 === peg$FAILED) {
      s0 = peg$parseargName();
    }

    return s0;
  }

  function peg$parseselectOption() {
    var s0, s1, s2, s3, s4, s5, s6, s7;
    s0 = peg$currPos;
    s1 = peg$parse_();

    if (s1 !== peg$FAILED) {
      s2 = peg$parseargName();

      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();

        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 123) {
            s4 = peg$c6;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c7);
            }
          }

          if (s4 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s5 = peg$c58();

            if (s5) {
              s5 = undefined;
            } else {
              s5 = peg$FAILED;
            }

            if (s5 !== peg$FAILED) {
              s6 = peg$parsemessage();

              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s7 = peg$c8;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;

                  if (peg$silentFails === 0) {
                    peg$fail(peg$c9);
                  }
                }

                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c59(s2, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepluralOption() {
    var s0, s1, s2, s3, s4, s5, s6, s7;
    s0 = peg$currPos;
    s1 = peg$parse_();

    if (s1 !== peg$FAILED) {
      s2 = peg$parsepluralRuleSelectValue();

      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();

        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 123) {
            s4 = peg$c6;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c7);
            }
          }

          if (s4 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s5 = peg$c60();

            if (s5) {
              s5 = undefined;
            } else {
              s5 = peg$FAILED;
            }

            if (s5 !== peg$FAILED) {
              s6 = peg$parsemessage();

              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s7 = peg$c8;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;

                  if (peg$silentFails === 0) {
                    peg$fail(peg$c9);
                  }
                }

                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c61(s2, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsewhiteSpace() {
    var s0;
    peg$silentFails++;

    if (peg$c63.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c64);
      }
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      if (peg$silentFails === 0) {
        peg$fail(peg$c62);
      }
    }

    return s0;
  }

  function peg$parsepatternSyntax() {
    var s0;
    peg$silentFails++;

    if (peg$c66.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c67);
      }
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      if (peg$silentFails === 0) {
        peg$fail(peg$c65);
      }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1, s2;
    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsewhiteSpace();

    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsewhiteSpace();
    }

    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c68);
      }
    }

    return s0;
  }

  function peg$parsenumber() {
    var s0, s1, s2;
    peg$silentFails++;
    s0 = peg$currPos;

    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c70;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c71);
      }
    }

    if (s1 === peg$FAILED) {
      s1 = null;
    }

    if (s1 !== peg$FAILED) {
      s2 = peg$parseargNumber();

      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c72(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c69);
      }
    }

    return s0;
  }

  function peg$parsedoubleApostrophes() {
    var s0, s1;
    peg$silentFails++;
    s0 = peg$currPos;

    if (input.substr(peg$currPos, 2) === peg$c75) {
      s1 = peg$c75;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c76);
      }
    }

    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c77();
    }

    s0 = s1;
    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c74);
      }
    }

    return s0;
  }

  function peg$parsequotedString() {
    var s0, s1, s2, s3, s4, s5;
    s0 = peg$currPos;

    if (input.charCodeAt(peg$currPos) === 39) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c33);
      }
    }

    if (s1 !== peg$FAILED) {
      s2 = peg$parseescapedChar();

      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = [];

        if (input.substr(peg$currPos, 2) === peg$c75) {
          s5 = peg$c75;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c76);
          }
        }

        if (s5 === peg$FAILED) {
          if (peg$c34.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c35);
            }
          }
        }

        while (s5 !== peg$FAILED) {
          s4.push(s5);

          if (input.substr(peg$currPos, 2) === peg$c75) {
            s5 = peg$c75;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c76);
            }
          }

          if (s5 === peg$FAILED) {
            if (peg$c34.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;

              if (peg$silentFails === 0) {
                peg$fail(peg$c35);
              }
            }
          }
        }

        if (s4 !== peg$FAILED) {
          s3 = input.substring(s3, peg$currPos);
        } else {
          s3 = s4;
        }

        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s4 = peg$c32;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c33);
            }
          }

          if (s4 === peg$FAILED) {
            s4 = null;
          }

          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c78(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseunquotedString() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;
    s1 = peg$currPos;

    if (input.length > peg$currPos) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c14);
      }
    }

    if (s2 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s3 = peg$c79(s2);

      if (s3) {
        s3 = undefined;
      } else {
        s3 = peg$FAILED;
      }

      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }

    if (s1 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 10) {
        s1 = peg$c80;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c81);
        }
      }
    }

    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseescapedChar() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;
    s1 = peg$currPos;

    if (input.length > peg$currPos) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c14);
      }
    }

    if (s2 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s3 = peg$c82(s2);

      if (s3) {
        s3 = undefined;
      } else {
        s3 = peg$FAILED;
      }

      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }

    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseargNameOrNumber() {
    var s0, s1;
    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseargNumber();

    if (s1 === peg$FAILED) {
      s1 = peg$parseargName();
    }

    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c83);
      }
    }

    return s0;
  }

  function peg$parseargNumber() {
    var s0, s1, s2, s3, s4;
    peg$silentFails++;
    s0 = peg$currPos;

    if (input.charCodeAt(peg$currPos) === 48) {
      s1 = peg$c85;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c86);
      }
    }

    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c87();
    }

    s0 = s1;

    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;

      if (peg$c88.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c89);
        }
      }

      if (s2 !== peg$FAILED) {
        s3 = [];

        if (peg$c90.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;

          if (peg$silentFails === 0) {
            peg$fail(peg$c91);
          }
        }

        while (s4 !== peg$FAILED) {
          s3.push(s4);

          if (peg$c90.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c91);
            }
          }
        }

        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }

      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c92(s1);
      }

      s0 = s1;
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c84);
      }
    }

    return s0;
  }

  function peg$parseargName() {
    var s0, s1, s2, s3, s4;
    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$currPos;
    peg$silentFails++;
    s4 = peg$parsewhiteSpace();

    if (s4 === peg$FAILED) {
      s4 = peg$parsepatternSyntax();
    }

    peg$silentFails--;

    if (s4 === peg$FAILED) {
      s3 = undefined;
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }

    if (s3 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;

        if (peg$silentFails === 0) {
          peg$fail(peg$c14);
        }
      }

      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }

    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parsewhiteSpace();

        if (s4 === peg$FAILED) {
          s4 = peg$parsepatternSyntax();
        }

        peg$silentFails--;

        if (s4 === peg$FAILED) {
          s3 = undefined;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }

        if (s3 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;

            if (peg$silentFails === 0) {
              peg$fail(peg$c14);
            }
          }

          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }

    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    peg$silentFails--;

    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;

      if (peg$silentFails === 0) {
        peg$fail(peg$c93);
      }
    }

    return s0;
  }

  var messageCtx = ['root'];

  function isNestedMessageText() {
    return messageCtx.length > 1;
  }

  function isInPluralOption() {
    return messageCtx[messageCtx.length - 1] === 'plural';
  }

  function insertLocation() {
    return options && options.captureLocation ? {
      location: location()
    } : {};
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
  }
}

var pegParse = peg$parse;

var __spreadArrays = undefined && undefined.__spreadArrays || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
    s += arguments[i].length;
  }

  for (var r = Array(s), k = 0, i = 0; i < il; i++) {
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
      r[k] = a[j];
    }
  }

  return r;
};

var PLURAL_HASHTAG_REGEX = /(^|[^\\])#/g;
/**
 * Whether to convert `#` in plural rule options
 * to `{var, number}`
 * @param el AST Element
 * @param pluralStack current plural stack
 */

function normalizeHashtagInPlural(els) {
  els.forEach(function (el) {
    // If we're encountering a plural el
    if (!isPluralElement(el) && !isSelectElement(el)) {
      return;
    } // Go down the options and search for # in any literal element


    Object.keys(el.options).forEach(function (id) {
      var _a;

      var opt = el.options[id]; // If we got a match, we have to split this
      // and inject a NumberElement in the middle

      var matchingLiteralElIndex = -1;
      var literalEl = undefined;

      for (var i = 0; i < opt.value.length; i++) {
        var el_1 = opt.value[i];

        if (isLiteralElement(el_1) && PLURAL_HASHTAG_REGEX.test(el_1.value)) {
          matchingLiteralElIndex = i;
          literalEl = el_1;
          break;
        }
      }

      if (literalEl) {
        var newValue = literalEl.value.replace(PLURAL_HASHTAG_REGEX, "$1{" + el.value + ", number}");
        var newEls = pegParse(newValue);

        (_a = opt.value).splice.apply(_a, __spreadArrays([matchingLiteralElIndex, 1], newEls));
      }

      normalizeHashtagInPlural(opt.value);
    });
  });
}

var __assign$1 = undefined && undefined.__assign || function () {
  __assign$1 = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign$1.apply(this, arguments);
};
/**
 * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js
 * with some tweaks
 */


var DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;
/**
 * Parse Date time skeleton into Intl.DateTimeFormatOptions
 * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * @public
 * @param skeleton skeleton string
 */

function parseDateTimeSkeleton(skeleton) {
  var result = {};
  skeleton.replace(DATE_TIME_REGEX, function (match) {
    var len = match.length;

    switch (match[0]) {
      // Era
      case 'G':
        result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';
        break;
      // Year

      case 'y':
        result.year = len === 2 ? '2-digit' : 'numeric';
        break;

      case 'Y':
      case 'u':
      case 'U':
      case 'r':
        throw new RangeError('`Y/u/U/r` (year) patterns are not supported, use `y` instead');
      // Quarter

      case 'q':
      case 'Q':
        throw new RangeError('`q/Q` (quarter) patterns are not supported');
      // Month

      case 'M':
      case 'L':
        result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];
        break;
      // Week

      case 'w':
      case 'W':
        throw new RangeError('`w/W` (week) patterns are not supported');

      case 'd':
        result.day = ['numeric', '2-digit'][len - 1];
        break;

      case 'D':
      case 'F':
      case 'g':
        throw new RangeError('`D/F/g` (day) patterns are not supported, use `d` instead');
      // Weekday

      case 'E':
        result.weekday = len === 4 ? 'short' : len === 5 ? 'narrow' : 'short';
        break;

      case 'e':
        if (len < 4) {
          throw new RangeError('`e..eee` (weekday) patterns are not supported');
        }

        result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];
        break;

      case 'c':
        if (len < 4) {
          throw new RangeError('`c..ccc` (weekday) patterns are not supported');
        }

        result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];
        break;
      // Period

      case 'a':
        // AM, PM
        result.hour12 = true;
        break;

      case 'b': // am, pm, noon, midnight

      case 'B':
        // flexible day periods
        throw new RangeError('`b/B` (period) patterns are not supported, use `a` instead');
      // Hour

      case 'h':
        result.hourCycle = 'h12';
        result.hour = ['numeric', '2-digit'][len - 1];
        break;

      case 'H':
        result.hourCycle = 'h23';
        result.hour = ['numeric', '2-digit'][len - 1];
        break;

      case 'K':
        result.hourCycle = 'h11';
        result.hour = ['numeric', '2-digit'][len - 1];
        break;

      case 'k':
        result.hourCycle = 'h24';
        result.hour = ['numeric', '2-digit'][len - 1];
        break;

      case 'j':
      case 'J':
      case 'C':
        throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');
      // Minute

      case 'm':
        result.minute = ['numeric', '2-digit'][len - 1];
        break;
      // Second

      case 's':
        result.second = ['numeric', '2-digit'][len - 1];
        break;

      case 'S':
      case 'A':
        throw new RangeError('`S/A` (second) pattenrs are not supported, use `s` instead');
      // Zone

      case 'z':
        // 1..3, 4: specific non-location format
        result.timeZoneName = len < 4 ? 'short' : 'long';
        break;

      case 'Z': // 1..3, 4, 5: The ISO8601 varios formats

      case 'O': // 1, 4: miliseconds in day short, long

      case 'v': // 1, 4: generic non-location format

      case 'V': // 1, 2, 3, 4: time zone ID or city

      case 'X': // 1, 2, 3, 4: The ISO8601 varios formats

      case 'x':
        // 1, 2, 3, 4: The ISO8601 varios formats
        throw new RangeError('`Z/O/v/V/X/x` (timeZone) pattenrs are not supported, use `z` instead');
    }

    return '';
  });
  return result;
}

function icuUnitToEcma(unit) {
  return unit.replace(/^(.*?)-/, '');
}

var FRACTION_PRECISION_REGEX = /^\.(?:(0+)(\+|#+)?)?$/g;
var SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\+|#+)?$/g;

function parseSignificantPrecision(str) {
  var result = {};
  str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {
    // @@@ case
    if (typeof g2 !== 'string') {
      result.minimumSignificantDigits = g1.length;
      result.maximumSignificantDigits = g1.length;
    } // @@@+ case
    else if (g2 === '+') {
        result.minimumSignificantDigits = g1.length;
      } // .### case
      else if (g1[0] === '#') {
          result.maximumSignificantDigits = g1.length;
        } // .@@## or .@@@ case
        else {
            result.minimumSignificantDigits = g1.length;
            result.maximumSignificantDigits = g1.length + (typeof g2 === 'string' ? g2.length : 0);
          }

    return '';
  });
  return result;
}

function parseSign(str) {
  switch (str) {
    case 'sign-auto':
      return {
        signDisplay: 'auto'
      };

    case 'sign-accounting':
      return {
        currencySign: 'accounting'
      };

    case 'sign-always':
      return {
        signDisplay: 'always'
      };

    case 'sign-accounting-always':
      return {
        signDisplay: 'always',
        currencySign: 'accounting'
      };

    case 'sign-except-zero':
      return {
        signDisplay: 'exceptZero'
      };

    case 'sign-accounting-except-zero':
      return {
        signDisplay: 'exceptZero',
        currencySign: 'accounting'
      };

    case 'sign-never':
      return {
        signDisplay: 'never'
      };
  }
}

function parseNotationOptions(opt) {
  var result = {};
  var signOpts = parseSign(opt);

  if (signOpts) {
    return signOpts;
  }

  return result;
}
/**
 * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options
 */


function convertNumberSkeletonToNumberFormatOptions(tokens) {
  var result = {};

  for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
    var token = tokens_1[_i];

    switch (token.stem) {
      case 'percent':
        result.style = 'percent';
        continue;

      case 'currency':
        result.style = 'currency';
        result.currency = token.options[0];
        continue;

      case 'group-off':
        result.useGrouping = false;
        continue;

      case 'precision-integer':
        result.maximumFractionDigits = 0;
        continue;

      case 'measure-unit':
        result.style = 'unit';
        result.unit = icuUnitToEcma(token.options[0]);
        continue;

      case 'compact-short':
        result.notation = 'compact';
        result.compactDisplay = 'short';
        continue;

      case 'compact-long':
        result.notation = 'compact';
        result.compactDisplay = 'long';
        continue;

      case 'scientific':
        result = __assign$1(__assign$1(__assign$1({}, result), {
          notation: 'scientific'
        }), token.options.reduce(function (all, opt) {
          return __assign$1(__assign$1({}, all), parseNotationOptions(opt));
        }, {}));
        continue;

      case 'engineering':
        result = __assign$1(__assign$1(__assign$1({}, result), {
          notation: 'engineering'
        }), token.options.reduce(function (all, opt) {
          return __assign$1(__assign$1({}, all), parseNotationOptions(opt));
        }, {}));
        continue;

      case 'notation-simple':
        result.notation = 'standard';
        continue;
      // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h

      case 'unit-width-narrow':
        result.currencyDisplay = 'narrowSymbol';
        result.unitDisplay = 'narrow';
        continue;

      case 'unit-width-short':
        result.currencyDisplay = 'code';
        result.unitDisplay = 'short';
        continue;

      case 'unit-width-full-name':
        result.currencyDisplay = 'name';
        result.unitDisplay = 'long';
        continue;

      case 'unit-width-iso-code':
        result.currencyDisplay = 'symbol';
        continue;
    } // Precision
    // https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#fraction-precision


    if (FRACTION_PRECISION_REGEX.test(token.stem)) {
      if (token.options.length > 1) {
        throw new RangeError('Fraction-precision stems only accept a single optional option');
      }

      token.stem.replace(FRACTION_PRECISION_REGEX, function (match, g1, g2) {
        // precision-integer case
        if (match === '.') {
          result.maximumFractionDigits = 0;
        } // .000+ case
        else if (g2 === '+') {
            result.minimumFractionDigits = g2.length;
          } // .### case
          else if (g1[0] === '#') {
              result.maximumFractionDigits = g1.length;
            } // .00## or .000 case
            else {
                result.minimumFractionDigits = g1.length;
                result.maximumFractionDigits = g1.length + (typeof g2 === 'string' ? g2.length : 0);
              }

        return '';
      });

      if (token.options.length) {
        result = __assign$1(__assign$1({}, result), parseSignificantPrecision(token.options[0]));
      }

      continue;
    }

    if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {
      result = __assign$1(__assign$1({}, result), parseSignificantPrecision(token.stem));
      continue;
    }

    var signOpts = parseSign(token.stem);

    if (signOpts) {
      result = __assign$1(__assign$1({}, result), signOpts);
    }
  }

  return result;
}

function parse(input, opts) {
  var els = pegParse(input, opts);

  if (!opts || opts.normalizeHashtagInPlural !== false) {
    normalizeHashtagInPlural(els);
  }

  return els;
}
/*
Copyright (c) 2014, Yahoo! Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.
*/


var __spreadArrays$1 = undefined && undefined.__spreadArrays || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
    s += arguments[i].length;
  }

  for (var r = Array(s), k = 0, i = 0; i < il; i++) {
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
      r[k] = a[j];
    }
  }

  return r;
}; // -- Utilities ----------------------------------------------------------------


function getCacheId(inputs) {
  return JSON.stringify(inputs.map(function (input) {
    return input && _typeof(input) === 'object' ? orderedProps(input) : input;
  }));
}

function orderedProps(obj) {
  return Object.keys(obj).sort().map(function (k) {
    var _a;

    return _a = {}, _a[k] = obj[k], _a;
  });
}

var memoizeFormatConstructor = function memoizeFormatConstructor(FormatConstructor, cache) {
  if (cache === void 0) {
    cache = {};
  }

  return function () {
    var _a;

    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    var cacheId = getCacheId(args);
    var format = cacheId && cache[cacheId];

    if (!format) {
      format = new ((_a = FormatConstructor).bind.apply(_a, __spreadArrays$1([void 0], args)))();

      if (cacheId) {
        cache[cacheId] = format;
      }
    }

    return format;
  };
};

var __extends$1 = undefined && undefined.__extends || function () {
  var _extendStatics2 = function extendStatics(d, b) {
    _extendStatics2 = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics2(d, b);
  };

  return function (d, b) {
    _extendStatics2(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __spreadArrays$2 = undefined && undefined.__spreadArrays || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
    s += arguments[i].length;
  }

  for (var r = Array(s), k = 0, i = 0; i < il; i++) {
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
      r[k] = a[j];
    }
  }

  return r;
};

var FormatError =
/** @class */
function (_super) {
  __extends$1(FormatError, _super);

  function FormatError(msg, variableId) {
    var _this = _super.call(this, msg) || this;

    _this.variableId = variableId;
    return _this;
  }

  return FormatError;
}(Error);

function mergeLiteral(parts) {
  if (parts.length < 2) {
    return parts;
  }

  return parts.reduce(function (all, part) {
    var lastPart = all[all.length - 1];

    if (!lastPart || lastPart.type !== 0
    /* literal */
    || part.type !== 0
    /* literal */
    ) {
        all.push(part);
      } else {
      lastPart.value += part.value;
    }

    return all;
  }, []);
} // TODO(skeleton): add skeleton support


function formatToParts(els, locales, formatters, formats, values, currentPluralValue, // For debugging
originalMessage) {
  // Hot path for straight simple msg translations
  if (els.length === 1 && isLiteralElement(els[0])) {
    return [{
      type: 0
      /* literal */
      ,
      value: els[0].value
    }];
  }

  var result = [];

  for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {
    var el = els_1[_i]; // Exit early for string parts.

    if (isLiteralElement(el)) {
      result.push({
        type: 0
        /* literal */
        ,
        value: el.value
      });
      continue;
    } // TODO: should this part be literal type?
    // Replace `#` in plural rules with the actual numeric value.


    if (isPoundElement(el)) {
      if (typeof currentPluralValue === 'number') {
        result.push({
          type: 0
          /* literal */
          ,
          value: formatters.getNumberFormat(locales).format(currentPluralValue)
        });
      }

      continue;
    }

    var varName = el.value; // Enforce that all required values are provided by the caller.

    if (!(values && varName in values)) {
      throw new FormatError("The intl string context variable \"" + varName + "\" was not provided to the string \"" + originalMessage + "\"");
    }

    var value = values[varName];

    if (isArgumentElement(el)) {
      if (!value || typeof value === 'string' || typeof value === 'number') {
        value = typeof value === 'string' || typeof value === 'number' ? String(value) : '';
      }

      result.push({
        type: 1
        /* argument */
        ,
        value: value
      });
      continue;
    } // Recursively format plural and select parts' option — which can be a
    // nested pattern structure. The choosing of the option to use is
    // abstracted-by and delegated-to the part helper object.


    if (isDateElement(el)) {
      var style = typeof el.style === 'string' ? formats.date[el.style] : undefined;
      result.push({
        type: 0
        /* literal */
        ,
        value: formatters.getDateTimeFormat(locales, style).format(value)
      });
      continue;
    }

    if (isTimeElement(el)) {
      var style = typeof el.style === 'string' ? formats.time[el.style] : isDateTimeSkeleton(el.style) ? parseDateTimeSkeleton(el.style.pattern) : undefined;
      result.push({
        type: 0
        /* literal */
        ,
        value: formatters.getDateTimeFormat(locales, style).format(value)
      });
      continue;
    }

    if (isNumberElement(el)) {
      var style = typeof el.style === 'string' ? formats.number[el.style] : isNumberSkeleton(el.style) ? convertNumberSkeletonToNumberFormatOptions(el.style.tokens) : undefined;
      result.push({
        type: 0
        /* literal */
        ,
        value: formatters.getNumberFormat(locales, style).format(value)
      });
      continue;
    }

    if (isSelectElement(el)) {
      var opt = el.options[value] || el.options.other;

      if (!opt) {
        throw new RangeError("Invalid values for \"" + el.value + "\": \"" + value + "\". Options are \"" + Object.keys(el.options).join('", "') + "\"");
      }

      result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));
      continue;
    }

    if (isPluralElement(el)) {
      var opt = el.options["=" + value];

      if (!opt) {
        if (!Intl.PluralRules) {
          throw new FormatError("Intl.PluralRules is not available in this environment.\nTry polyfilling it using \"@formatjs/intl-pluralrules\"\n");
        }

        var rule = formatters.getPluralRules(locales, {
          type: el.pluralType
        }).select(value - (el.offset || 0));
        opt = el.options[rule] || el.options.other;
      }

      if (!opt) {
        throw new RangeError("Invalid values for \"" + el.value + "\": \"" + value + "\". Options are \"" + Object.keys(el.options).join('", "') + "\"");
      }

      result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values, value - (el.offset || 0)));
      continue;
    }
  }

  return mergeLiteral(result);
}

function formatToString(els, locales, formatters, formats, values, // For debugging
originalMessage) {
  var parts = formatToParts(els, locales, formatters, formats, values, undefined, originalMessage); // Hot path for straight simple msg translations

  if (parts.length === 1) {
    return parts[0].value;
  }

  return parts.reduce(function (all, part) {
    return all += part.value;
  }, '');
} // Singleton


var domParser;
var TOKEN_DELIMITER = '@@';
var TOKEN_REGEX = /@@(\d+_\d+)@@/g;
var counter = 0;

function generateId() {
  return Date.now() + "_" + ++counter;
}

function restoreRichPlaceholderMessage(text, objectParts) {
  return text.split(TOKEN_REGEX).filter(Boolean).map(function (c) {
    return objectParts[c] != null ? objectParts[c] : c;
  }).reduce(function (all, c) {
    if (!all.length) {
      all.push(c);
    } else if (typeof c === 'string' && typeof all[all.length - 1] === 'string') {
      all[all.length - 1] += c;
    } else {
      all.push(c);
    }

    return all;
  }, []);
}
/**
 * Not exhaustive, just for sanity check
 */


var SIMPLE_XML_REGEX = /(<([0-9a-zA-Z-_]*?)>(.*?)<\/([0-9a-zA-Z-_]*?)>)|(<[0-9a-zA-Z-_]*?\/>)/;
var TEMPLATE_ID = Date.now() + '@@';
var VOID_ELEMENTS = ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'link', 'meta', 'param', 'source', 'track', 'wbr'];

function formatHTMLElement(el, objectParts, values) {
  var tagName = el.tagName;
  var outerHTML = el.outerHTML,
      textContent = el.textContent,
      childNodes = el.childNodes; // Regular text

  if (!tagName) {
    return restoreRichPlaceholderMessage(textContent || '', objectParts);
  }

  tagName = tagName.toLowerCase();
  var isVoidElement = ~VOID_ELEMENTS.indexOf(tagName);
  var formatFnOrValue = values[tagName];

  if (formatFnOrValue && isVoidElement) {
    throw new FormatError(tagName + " is a self-closing tag and can not be used, please use another tag name.");
  }

  if (!childNodes.length) {
    return [outerHTML];
  }

  var chunks = Array.prototype.slice.call(childNodes).reduce(function (all, child) {
    return all.concat(formatHTMLElement(child, objectParts, values));
  }, []); // Legacy HTML

  if (!formatFnOrValue) {
    return __spreadArrays$2(["<" + tagName + ">"], chunks, ["</" + tagName + ">"]);
  } // HTML Tag replacement


  if (typeof formatFnOrValue === 'function') {
    return [formatFnOrValue.apply(void 0, chunks)];
  }

  return [formatFnOrValue];
}

function formatHTMLMessage(els, locales, formatters, formats, values, // For debugging
originalMessage) {
  var parts = formatToParts(els, locales, formatters, formats, values, undefined, originalMessage);
  var objectParts = {};
  var formattedMessage = parts.reduce(function (all, part) {
    if (part.type === 0
    /* literal */
    ) {
        return all += part.value;
      }

    var id = generateId();
    objectParts[id] = part.value;
    return all += "" + TOKEN_DELIMITER + id + TOKEN_DELIMITER;
  }, ''); // Not designed to filter out aggressively

  if (!SIMPLE_XML_REGEX.test(formattedMessage)) {
    return restoreRichPlaceholderMessage(formattedMessage, objectParts);
  }

  if (!values) {
    throw new FormatError('Message has placeholders but no values was given');
  }

  if (typeof DOMParser === 'undefined') {
    throw new FormatError('Cannot format XML message without DOMParser');
  }

  if (!domParser) {
    domParser = new DOMParser();
  }

  var content = domParser.parseFromString("<formatted-message id=\"" + TEMPLATE_ID + "\">" + formattedMessage + "</formatted-message>", 'text/html').getElementById(TEMPLATE_ID);

  if (!content) {
    throw new FormatError("Malformed HTML message " + formattedMessage);
  }

  var tagsToFormat = Object.keys(values).filter(function (varName) {
    return !!content.getElementsByTagName(varName).length;
  }); // No tags to format

  if (!tagsToFormat.length) {
    return restoreRichPlaceholderMessage(formattedMessage, objectParts);
  }

  var caseSensitiveTags = tagsToFormat.filter(function (tagName) {
    return tagName !== tagName.toLowerCase();
  });

  if (caseSensitiveTags.length) {
    throw new FormatError("HTML tag must be lowercased but the following tags are not: " + caseSensitiveTags.join(', '));
  } // We're doing this since top node is `<formatted-message/>` which does not have a formatter


  return Array.prototype.slice.call(content.childNodes).reduce(function (all, child) {
    return all.concat(formatHTMLElement(child, objectParts, values));
  }, []);
}
/*
Copyright (c) 2014, Yahoo! Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.
*/


var __assign$2 = undefined && undefined.__assign || function () {
  __assign$2 = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign$2.apply(this, arguments);
}; // -- MessageFormat --------------------------------------------------------


function mergeConfig(c1, c2) {
  if (!c2) {
    return c1;
  }

  return __assign$2(__assign$2(__assign$2({}, c1 || {}), c2 || {}), Object.keys(c1).reduce(function (all, k) {
    all[k] = __assign$2(__assign$2({}, c1[k]), c2[k] || {});
    return all;
  }, {}));
}

function mergeConfigs(defaultConfig, configs) {
  if (!configs) {
    return defaultConfig;
  }

  return Object.keys(defaultConfig).reduce(function (all, k) {
    all[k] = mergeConfig(defaultConfig[k], configs[k]);
    return all;
  }, __assign$2({}, defaultConfig));
}

function createDefaultFormatters(cache) {
  if (cache === void 0) {
    cache = {
      number: {},
      dateTime: {},
      pluralRules: {}
    };
  }

  return {
    getNumberFormat: memoizeFormatConstructor(Intl.NumberFormat, cache.number),
    getDateTimeFormat: memoizeFormatConstructor(Intl.DateTimeFormat, cache.dateTime),
    getPluralRules: memoizeFormatConstructor(Intl.PluralRules, cache.pluralRules)
  };
}

var IntlMessageFormat =
/** @class */
function () {
  function IntlMessageFormat(message, locales, overrideFormats, opts) {
    var _this = this;

    if (locales === void 0) {
      locales = IntlMessageFormat.defaultLocale;
    }

    this.formatterCache = {
      number: {},
      dateTime: {},
      pluralRules: {}
    };

    this.format = function (values) {
      return formatToString(_this.ast, _this.locales, _this.formatters, _this.formats, values, _this.message);
    };

    this.formatToParts = function (values) {
      return formatToParts(_this.ast, _this.locales, _this.formatters, _this.formats, values, undefined, _this.message);
    };

    this.formatHTMLMessage = function (values) {
      return formatHTMLMessage(_this.ast, _this.locales, _this.formatters, _this.formats, values, _this.message);
    };

    this.resolvedOptions = function () {
      return {
        locale: Intl.NumberFormat.supportedLocalesOf(_this.locales)[0]
      };
    };

    this.getAst = function () {
      return _this.ast;
    };

    if (typeof message === 'string') {
      this.message = message;

      if (!IntlMessageFormat.__parse) {
        throw new TypeError('IntlMessageFormat.__parse must be set to process `message` of type `string`');
      } // Parse string messages into an AST.


      this.ast = IntlMessageFormat.__parse(message, {
        normalizeHashtagInPlural: false
      });
    } else {
      this.ast = message;
    }

    if (!Array.isArray(this.ast)) {
      throw new TypeError('A message must be provided as a String or AST.');
    } // Creates a new object with the specified `formats` merged with the default
    // formats.


    this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats); // Defined first because it's used to build the format pattern.

    this.locales = locales;
    this.formatters = opts && opts.formatters || createDefaultFormatters(this.formatterCache);
  }

  IntlMessageFormat.defaultLocale = new Intl.NumberFormat().resolvedOptions().locale;
  IntlMessageFormat.__parse = parse; // Default format options used as the prototype of the `formats` provided to the
  // constructor. These are used when constructing the internal Intl.NumberFormat
  // and Intl.DateTimeFormat instances.

  IntlMessageFormat.formats = {
    number: {
      currency: {
        style: 'currency'
      },
      percent: {
        style: 'percent'
      }
    },
    date: {
      "short": {
        month: 'numeric',
        day: 'numeric',
        year: '2-digit'
      },
      medium: {
        month: 'short',
        day: 'numeric',
        year: 'numeric'
      },
      "long": {
        month: 'long',
        day: 'numeric',
        year: 'numeric'
      },
      full: {
        weekday: 'long',
        month: 'long',
        day: 'numeric',
        year: 'numeric'
      }
    },
    time: {
      "short": {
        hour: 'numeric',
        minute: 'numeric'
      },
      medium: {
        hour: 'numeric',
        minute: 'numeric',
        second: 'numeric'
      },
      "long": {
        hour: 'numeric',
        minute: 'numeric',
        second: 'numeric',
        timeZoneName: 'short'
      },
      full: {
        hour: 'numeric',
        minute: 'numeric',
        second: 'numeric',
        timeZoneName: 'short'
      }
    }
  };
  return IntlMessageFormat;
}();
/*
Copyright (c) 2014, Yahoo! Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.
*/


var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn, module) {
  return module = {
    exports: {}
  }, fn(module, module.exports), module.exports;
}

var microMemoize = createCommonjsModule(function (module, exports) {
  (function (global, factory) {
    module.exports = factory();
  })(commonjsGlobal, function () {
    /**
     * @constant DEFAULT_OPTIONS_KEYS the default options keys
     */
    var DEFAULT_OPTIONS_KEYS = {
      isEqual: true,
      isMatchingKey: true,
      isPromise: true,
      maxSize: true,
      onCacheAdd: true,
      onCacheChange: true,
      onCacheHit: true,
      transformKey: true
    };
    /**
     * @function slice
     *
     * @description
     * slice.call() pre-bound
     */

    var slice = Array.prototype.slice;
    /**
     * @function cloneArray
     *
     * @description
     * clone the array-like object and return the new array
     *
     * @param arrayLike the array-like object to clone
     * @returns the clone as an array
     */

    function cloneArray(arrayLike) {
      var length = arrayLike.length;

      if (!length) {
        return [];
      }

      if (length === 1) {
        return [arrayLike[0]];
      }

      if (length === 2) {
        return [arrayLike[0], arrayLike[1]];
      }

      if (length === 3) {
        return [arrayLike[0], arrayLike[1], arrayLike[2]];
      }

      return slice.call(arrayLike, 0);
    }
    /**
     * @function getCustomOptions
     *
     * @description
     * get the custom options on the object passed
     *
     * @param options the memoization options passed
     * @returns the custom options passed
     */


    function getCustomOptions(options) {
      var customOptions = {};
      /* eslint-disable no-restricted-syntax */

      for (var key in options) {
        if (!DEFAULT_OPTIONS_KEYS[key]) {
          customOptions[key] = options[key];
        }
      }
      /* eslint-enable */


      return customOptions;
    }
    /**
     * @function isMemoized
     *
     * @description
     * is the function passed already memoized
     *
     * @param fn the function to test
     * @returns is the function already memoized
     */


    function isMemoized(fn) {
      return typeof fn === 'function' && fn.isMemoized;
    }
    /**
     * @function isSameValueZero
     *
     * @description
     * are the objects equal based on SameValueZero equality
     *
     * @param object1 the first object to compare
     * @param object2 the second object to compare
     * @returns are the two objects equal
     */


    function isSameValueZero(object1, object2) {
      // eslint-disable-next-line no-self-compare
      return object1 === object2 || object1 !== object1 && object2 !== object2;
    }
    /**
     * @function mergeOptions
     *
     * @description
     * merge the options into the target
     *
     * @param existingOptions the options provided
     * @param newOptions the options to include
     * @returns the merged options
     */


    function mergeOptions(existingOptions, newOptions) {
      // @ts-ignore
      var target = {};
      /* eslint-disable no-restricted-syntax */

      for (var key in existingOptions) {
        target[key] = existingOptions[key];
      }

      for (var key in newOptions) {
        target[key] = newOptions[key];
      }
      /* eslint-enable */


      return target;
    } // utils


    var Cache =
    /** @class */
    function () {
      function Cache(options) {
        this.keys = [];
        this.values = [];
        this.options = options;
        var isMatchingKeyFunction = typeof options.isMatchingKey === 'function';

        if (isMatchingKeyFunction) {
          this.getKeyIndex = this._getKeyIndexFromMatchingKey;
        } else if (options.maxSize > 1) {
          this.getKeyIndex = this._getKeyIndexForMany;
        } else {
          this.getKeyIndex = this._getKeyIndexForSingle;
        }

        this.canTransformKey = typeof options.transformKey === 'function';
        this.shouldCloneArguments = this.canTransformKey || isMatchingKeyFunction;
        this.shouldUpdateOnAdd = typeof options.onCacheAdd === 'function';
        this.shouldUpdateOnChange = typeof options.onCacheChange === 'function';
        this.shouldUpdateOnHit = typeof options.onCacheHit === 'function';
      }

      Object.defineProperty(Cache.prototype, "size", {
        get: function get() {
          return this.keys.length;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Cache.prototype, "snapshot", {
        get: function get() {
          return {
            keys: cloneArray(this.keys),
            size: this.size,
            values: cloneArray(this.values)
          };
        },
        enumerable: true,
        configurable: true
      });
      /**
       * @function _getKeyIndexFromMatchingKey
       *
       * @description
       * gets the matching key index when a custom key matcher is used
       *
       * @param keyToMatch the key to match
       * @returns the index of the matching key, or -1
       */

      Cache.prototype._getKeyIndexFromMatchingKey = function (keyToMatch) {
        var _a = this.options,
            isMatchingKey = _a.isMatchingKey,
            maxSize = _a.maxSize;
        var keys = this.keys;
        var keysLength = keys.length;

        if (!keysLength) {
          return -1;
        }

        if (isMatchingKey(keys[0], keyToMatch)) {
          return 0;
        }

        if (maxSize > 1) {
          for (var index = 1; index < keysLength; index++) {
            if (isMatchingKey(keys[index], keyToMatch)) {
              return index;
            }
          }
        }

        return -1;
      };
      /**
       * @function _getKeyIndexForMany
       *
       * @description
       * gets the matching key index when multiple keys are used
       *
       * @param keyToMatch the key to match
       * @returns the index of the matching key, or -1
       */


      Cache.prototype._getKeyIndexForMany = function (keyToMatch) {
        var isEqual = this.options.isEqual;
        var keys = this.keys;
        var keysLength = keys.length;

        if (!keysLength) {
          return -1;
        }

        if (keysLength === 1) {
          return this._getKeyIndexForSingle(keyToMatch);
        }

        var keyLength = keyToMatch.length;
        var existingKey;
        var argIndex;

        if (keyLength > 1) {
          for (var index = 0; index < keysLength; index++) {
            existingKey = keys[index];

            if (existingKey.length === keyLength) {
              argIndex = 0;

              for (; argIndex < keyLength; argIndex++) {
                if (!isEqual(existingKey[argIndex], keyToMatch[argIndex])) {
                  break;
                }
              }

              if (argIndex === keyLength) {
                return index;
              }
            }
          }
        } else {
          for (var index = 0; index < keysLength; index++) {
            existingKey = keys[index];

            if (existingKey.length === keyLength && isEqual(existingKey[0], keyToMatch[0])) {
              return index;
            }
          }
        }

        return -1;
      };
      /**
       * @function _getKeyIndexForSingle
       *
       * @description
       * gets the matching key index when a single key is used
       *
       * @param keyToMatch the key to match
       * @returns the index of the matching key, or -1
       */


      Cache.prototype._getKeyIndexForSingle = function (keyToMatch) {
        var keys = this.keys;

        if (!keys.length) {
          return -1;
        }

        var existingKey = keys[0];
        var length = existingKey.length;

        if (keyToMatch.length !== length) {
          return -1;
        }

        var isEqual = this.options.isEqual;

        if (length > 1) {
          for (var index = 0; index < length; index++) {
            if (!isEqual(existingKey[index], keyToMatch[index])) {
              return -1;
            }
          }

          return 0;
        }

        return isEqual(existingKey[0], keyToMatch[0]) ? 0 : -1;
      };
      /**
       * @function orderByLru
       *
       * @description
       * order the array based on a Least-Recently-Used basis
       *
       * @param key the new key to move to the front
       * @param value the new value to move to the front
       * @param startingIndex the index of the item to move to the front
       */


      Cache.prototype.orderByLru = function (key, value, startingIndex) {
        var keys = this.keys;
        var values = this.values;
        var currentLength = keys.length;
        var index = startingIndex;

        while (index--) {
          keys[index + 1] = keys[index];
          values[index + 1] = values[index];
        }

        keys[0] = key;
        values[0] = value;
        var maxSize = this.options.maxSize;

        if (currentLength === maxSize && startingIndex === currentLength) {
          keys.pop();
          values.pop();
        } else if (startingIndex >= maxSize) {
          // eslint-disable-next-line no-multi-assign
          keys.length = values.length = maxSize;
        }
      };
      /**
       * @function updateAsyncCache
       *
       * @description
       * update the promise method to auto-remove from cache if rejected, and
       * if resolved then fire cache hit / changed
       *
       * @param memoized the memoized function
       */


      Cache.prototype.updateAsyncCache = function (memoized) {
        var _this = this;

        var _a = this.options,
            onCacheChange = _a.onCacheChange,
            onCacheHit = _a.onCacheHit;
        var firstKey = this.keys[0];
        var firstValue = this.values[0];
        this.values[0] = firstValue.then(function (value) {
          if (_this.shouldUpdateOnHit) {
            onCacheHit(_this, _this.options, memoized);
          }

          if (_this.shouldUpdateOnChange) {
            onCacheChange(_this, _this.options, memoized);
          }

          return value;
        }, function (error) {
          var keyIndex = _this.getKeyIndex(firstKey);

          if (keyIndex !== -1) {
            _this.keys.splice(keyIndex, 1);

            _this.values.splice(keyIndex, 1);
          }

          throw error;
        });
      };

      return Cache;
    }(); // cache


    function createMemoizedFunction(fn, options) {
      if (options === void 0) {
        options = {};
      }

      if (isMemoized(fn)) {
        return createMemoizedFunction(fn.fn, mergeOptions(fn.options, options));
      }

      if (typeof fn !== 'function') {
        throw new TypeError('You must pass a function to `memoize`.');
      }

      var _a = options.isEqual,
          isEqual = _a === void 0 ? isSameValueZero : _a,
          isMatchingKey = options.isMatchingKey,
          _b = options.isPromise,
          isPromise = _b === void 0 ? false : _b,
          _c = options.maxSize,
          maxSize = _c === void 0 ? 1 : _c,
          onCacheAdd = options.onCacheAdd,
          onCacheChange = options.onCacheChange,
          onCacheHit = options.onCacheHit,
          transformKey = options.transformKey;
      var normalizedOptions = mergeOptions({
        isEqual: isEqual,
        isMatchingKey: isMatchingKey,
        isPromise: isPromise,
        maxSize: maxSize,
        onCacheAdd: onCacheAdd,
        onCacheChange: onCacheChange,
        onCacheHit: onCacheHit,
        transformKey: transformKey
      }, getCustomOptions(options));
      var cache = new Cache(normalizedOptions);
      var keys = cache.keys,
          values = cache.values,
          canTransformKey = cache.canTransformKey,
          shouldCloneArguments = cache.shouldCloneArguments,
          shouldUpdateOnAdd = cache.shouldUpdateOnAdd,
          shouldUpdateOnChange = cache.shouldUpdateOnChange,
          shouldUpdateOnHit = cache.shouldUpdateOnHit; // @ts-ignore

      var memoized = function memoized() {
        // @ts-ignore
        var key = shouldCloneArguments ? cloneArray(arguments) : arguments;

        if (canTransformKey) {
          key = transformKey(key);
        }

        var keyIndex = keys.length ? cache.getKeyIndex(key) : -1;

        if (keyIndex !== -1) {
          if (shouldUpdateOnHit) {
            onCacheHit(cache, normalizedOptions, memoized);
          }

          if (keyIndex) {
            cache.orderByLru(keys[keyIndex], values[keyIndex], keyIndex);

            if (shouldUpdateOnChange) {
              onCacheChange(cache, normalizedOptions, memoized);
            }
          }
        } else {
          var newValue = fn.apply(this, arguments);
          var newKey = shouldCloneArguments ? key : cloneArray(arguments);
          cache.orderByLru(newKey, newValue, keys.length);

          if (isPromise) {
            cache.updateAsyncCache(memoized);
          }

          if (shouldUpdateOnAdd) {
            onCacheAdd(cache, normalizedOptions, memoized);
          }

          if (shouldUpdateOnChange) {
            onCacheChange(cache, normalizedOptions, memoized);
          }
        }

        return values[0];
      };

      memoized.cache = cache;
      memoized.fn = fn;
      memoized.isMemoized = true;
      memoized.options = normalizedOptions;
      return memoized;
    }

    return createMemoizedFunction;
  });
});

function o() {}

var r = function r(t) {
  return t;
};

function i(t, e) {
  for (var n in e) {
    t[n] = e[n];
  }

  return t;
}

function c(t) {
  return t && "object" == _typeof(t) && "function" == typeof t.then;
}

function s(t) {
  return t();
}

function u() {
  return Object.create(null);
}

function a(t) {
  t.forEach(s);
}

function l(t) {
  return "function" == typeof t;
}

function f(t, e) {
  var n = t.subscribe(e);
  return n.unsubscribe ? function () {
    return n.unsubscribe();
  } : n;
}

function d(t, e, n) {
  return t[1] ? i({}, i(e.$$scope.ctx, t[1](n ? n(e) : {}))) : e.$$scope.ctx;
}

var p = function p(t, e) {
  return Object.prototype.hasOwnProperty.call(t, e);
},
    h = "undefined" != typeof window;

var _ = h ? function () {
  return window.performance.now();
} : function () {
  return Date.now();
},
    m = h ? function (t) {
  return requestAnimationFrame(t);
} : o;

var g = new Set();
var b,
    F = !1;

function v() {
  g.forEach(function (t) {
    t[0](_()) || (g["delete"](t), t[1]());
  }), (F = g.size > 0) && m(v);
}

function $(t) {
  var e;
  return F || (F = !0, m(v)), {
    promise: new Promise(function (n) {
      g.add(e = [t, n]);
    }),
    abort: function abort() {
      g["delete"](e);
    }
  };
}

function y(t, e) {
  t.appendChild(e);
}

function w(t, e, n) {
  t.insertBefore(e, n || null);
}

function k(t) {
  t.parentNode.removeChild(t);
}

function x(t) {
  return document.createElement(t);
}

function E(t) {
  return document.createElementNS("http://www.w3.org/2000/svg", t);
}

function S(t) {
  return document.createTextNode(t);
}

function O(t, e, n, o) {
  return t.addEventListener(e, n, o), function () {
    return t.removeEventListener(e, n, o);
  };
}

function C(t, e, n) {
  null == n ? t.removeAttribute(e) : t.getAttribute(e) !== n && t.setAttribute(e, n);
}

function D(t) {
  return Array.from(t.childNodes);
}

function j(t, e) {
  for (var n = 0; n < t.length; n += 1) {
    var _o = t[n];
    if (3 === _o.nodeType) return _o.data = "" + e, t.splice(n, 1)[0];
  }

  return S(e);
}

function A(t, e) {
  var n = document.createEvent("CustomEvent");
  return n.initCustomEvent(t, !1, !1, e), n;
}

var M,
    L = 0,
    P = {};

function R(t, e, n, o, r, i, c) {
  var s = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
  var u = 16.666 / o;
  var a = "{\n";

  for (var _t2 = 0; _t2 <= 1; _t2 += u) {
    var _o2 = e + (n - e) * i(_t2);

    a += 100 * _t2 + "%{".concat(c(_o2, 1 - _o2), "}\n");
  }

  var l = a + "100% {".concat(c(n, 1 - n), "}\n}"),
      f = "__svelte_".concat(function (t) {
    var e = 5381,
        n = t.length;

    for (; n--;) {
      e = (e << 5) - e ^ t.charCodeAt(n);
    }

    return e >>> 0;
  }(l), "_").concat(s);

  if (!P[f]) {
    if (!b) {
      var _t3 = x("style");

      document.head.appendChild(_t3), b = _t3.sheet;
    }

    P[f] = !0, b.insertRule("@keyframes ".concat(f, " ").concat(l), b.cssRules.length);
  }

  var d = t.style.animation || "";
  return t.style.animation = "".concat(d ? "".concat(d, ", ") : "").concat(f, " ").concat(o, "ms linear ").concat(r, "ms 1 both"), L += 1, f;
}

function q(t, e) {
  t.style.animation = (t.style.animation || "").split(", ").filter(e ? function (t) {
    return t.indexOf(e) < 0;
  } : function (t) {
    return -1 === t.indexOf("__svelte");
  }).join(", "), e && ! --L && m(function () {
    if (L) return;
    var t = b.cssRules.length;

    for (; t--;) {
      b.deleteRule(t);
    }

    P = {};
  });
}

function N(t, e) {
  var n = t.getBoundingClientRect();

  if (e.left !== n.left || e.top !== n.top) {
    var _o3 = getComputedStyle(t),
        _r = "none" === _o3.transform ? "" : _o3.transform;

    t.style.transform = "".concat(_r, " translate(").concat(e.left - n.left, "px, ").concat(e.top - n.top, "px)");
  }
}

function T(t) {
  M = t;
}

function z() {
  if (!M) throw new Error("Function called outside component initialization");
  return M;
}

var B = [],
    U = [],
    H = [],
    I = [],
    J = Promise.resolve();
var V,
    Y = !1;

function G() {
  Y || (Y = !0, J.then(Q));
}

function K(t) {
  H.push(t);
}

function Q() {
  var t = new Set();

  do {
    for (; B.length;) {
      var _t4 = B.shift();

      T(_t4), W(_t4.$$);
    }

    for (; U.length;) {
      U.pop()();
    }

    for (var e = 0; e < H.length; e += 1) {
      var n = H[e];
      t.has(n) || (n(), t.add(n));
    }

    H.length = 0;
  } while (B.length);

  for (; I.length;) {
    I.pop()();
  }

  Y = !1;
}

function W(t) {
  null !== t.fragment && (t.update(t.dirty), a(t.before_update), t.fragment && t.fragment.p(t.dirty, t.ctx), t.dirty = null, t.after_update.forEach(K));
}

function X() {
  return V || (V = Promise.resolve()).then(function () {
    V = null;
  }), V;
}

function Z(t, e, n) {
  t.dispatchEvent(A("".concat(e ? "intro" : "outro").concat(n)));
}

var tt = new Set();
var et;

function nt() {
  et = {
    r: 0,
    c: [],
    p: et
  };
}

function ot() {
  et.r || a(et.c), et = et.p;
}

function rt(t, e) {
  t && t.i && (tt["delete"](t), t.i(e));
}

function it(t, e, n, o) {
  if (t && t.o) {
    if (tt.has(t)) return;
    tt.add(t), et.c.push(function () {
      tt["delete"](t), o && (n && t.d(1), o());
    }), t.o(e);
  }
}

var ct = {
  duration: 0
};
var st = "undefined" != typeof window ? window : global;

function ut(t, e) {
  t.d(1), e["delete"](t.key);
}

function at(t, e) {
  it(t, 1, 1, function () {
    e["delete"](t.key);
  });
}

var lt = new Set(["allowfullscreen", "allowpaymentrequest", "async", "autofocus", "autoplay", "checked", "controls", "default", "defer", "disabled", "formnovalidate", "hidden", "ismap", "loop", "multiple", "muted", "nomodule", "novalidate", "open", "playsinline", "readonly", "required", "reversed", "selected"]),
    ft = /(?:[\t-\r "'\/=>\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFDD0-\uFDEF\uFEFF\uFFFE\uFFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF])/;
var dt = {
  '"': "&quot;",
  "'": "&#39;",
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;"
};

function pt(t) {
  return String(t).replace(/["'&<>]/g, function (t) {
    return dt[t];
  });
}

var ht, _t;

function mt(t, e, n) {
  var _t$$$ = t.$$,
      o = _t$$$.fragment,
      r = _t$$$.on_mount,
      i = _t$$$.on_destroy,
      c = _t$$$.after_update;
  o && o.m(e, n), K(function () {
    var e = r.map(s).filter(l);
    i ? i.push.apply(i, _toConsumableArray(e)) : a(e), t.$$.on_mount = [];
  }), c.forEach(K);
}

function gt(t, e) {
  var n = t.$$;
  null !== n.fragment && (a(n.on_destroy), n.fragment && n.fragment.d(e), n.on_destroy = n.fragment = null, n.ctx = {});
}

"function" == typeof HTMLElement && (_t = /*#__PURE__*/function (_HTMLElement) {
  _inherits(_t, _HTMLElement);

  function _t() {
    var _this2;

    _classCallCheck(this, _t);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(_t).call(this)), _this2.attachShadow({
      mode: "open"
    });
    return _this2;
  }

  _createClass(_t, [{
    key: "connectedCallback",
    value: function connectedCallback() {
      for (var t in this.$$.slotted) {
        this.appendChild(this.$$.slotted[t]);
      }
    }
  }, {
    key: "attributeChangedCallback",
    value: function attributeChangedCallback(t, e, n) {
      this[t] = n;
    }
  }, {
    key: "$destroy",
    value: function $destroy() {
      gt(this, 1), this.$destroy = o;
    }
  }, {
    key: "$on",
    value: function $on(t, e) {
      var n = this.$$.callbacks[t] || (this.$$.callbacks[t] = []);
      return n.push(e), function () {
        var t = n.indexOf(e);
        -1 !== t && n.splice(t, 1);
      };
    }
  }, {
    key: "$set",
    value: function $set() {}
  }]);

  return _t;
}( /*#__PURE__*/_wrapNativeSuper(HTMLElement)));

var bt = /*#__PURE__*/function () {
  function bt() {
    _classCallCheck(this, bt);
  }

  _createClass(bt, [{
    key: "$destroy",
    value: function $destroy() {
      gt(this, 1), this.$destroy = o;
    }
  }, {
    key: "$on",
    value: function $on(t, e) {
      var n = this.$$.callbacks[t] || (this.$$.callbacks[t] = []);
      return n.push(e), function () {
        var t = n.indexOf(e);
        -1 !== t && n.splice(t, 1);
      };
    }
  }, {
    key: "$set",
    value: function $set() {}
  }]);

  return bt;
}();

function Ft(t, e) {
  document.dispatchEvent(A(t, e));
}

function vt(t) {
  Ft("SvelteDOMRemove", {
    node: t
  }), k(t);
}

var $t,
    yt,
    wt,
    kt = Object.freeze({
  __proto__: null,
  HtmlTag: /*#__PURE__*/function () {
    function HtmlTag(t) {
      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      _classCallCheck(this, HtmlTag);

      this.e = x("div"), this.a = e, this.u(t);
    }

    _createClass(HtmlTag, [{
      key: "m",
      value: function m(t) {
        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        for (var n = 0; n < this.n.length; n += 1) {
          w(t, this.n[n], e);
        }

        this.t = t;
      }
    }, {
      key: "u",
      value: function u(t) {
        this.e.innerHTML = t, this.n = Array.from(this.e.childNodes);
      }
    }, {
      key: "p",
      value: function p(t) {
        this.d(), this.u(t), this.m(this.t, this.a);
      }
    }, {
      key: "d",
      value: function d() {
        this.n.forEach(k);
      }
    }]);

    return HtmlTag;
  }(),
  SvelteComponent: bt,
  SvelteComponentDev: /*#__PURE__*/function (_bt) {
    _inherits(SvelteComponentDev, _bt);

    function SvelteComponentDev(t) {
      _classCallCheck(this, SvelteComponentDev);

      if (!t || !t.target && !t.$$inline) throw new Error("'target' is a required option");
      return _possibleConstructorReturn(this, _getPrototypeOf(SvelteComponentDev).call(this));
    }

    _createClass(SvelteComponentDev, [{
      key: "$destroy",
      value: function $destroy() {
        _get(_getPrototypeOf(SvelteComponentDev.prototype), "$destroy", this).call(this), this.$destroy = function () {
          console.warn("Component was already destroyed");
        };
      }
    }]);

    return SvelteComponentDev;
  }(bt),

  get SvelteElement() {
    return _t;
  },

  add_attribute: function add_attribute(t, e, n) {
    return null == e || n && !e ? "" : " ".concat(t).concat(!0 === e ? "" : "=".concat("string" == typeof e ? JSON.stringify(pt(e)) : "\"".concat(e, "\"")));
  },
  add_classes: function add_classes(t) {
    return t ? " class=\"".concat(t, "\"") : "";
  },
  add_flush_callback: function add_flush_callback(t) {
    I.push(t);
  },
  add_location: function add_location(t, e, n, o, r) {
    t.__svelte_meta = {
      loc: {
        file: e,
        line: n,
        column: o,
        "char": r
      }
    };
  },
  add_render_callback: K,
  add_resize_listener: function add_resize_listener(t, e) {
    "static" === getComputedStyle(t).position && (t.style.position = "relative");
    var n = document.createElement("object");
    var o;
    return n.setAttribute("style", "display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; pointer-events: none; z-index: -1;"), n.setAttribute("aria-hidden", "true"), n.type = "text/html", n.tabIndex = -1, n.onload = function () {
      (o = n.contentDocument.defaultView).addEventListener("resize", e);
    }, /Trident/.test(navigator.userAgent) ? (t.appendChild(n), n.data = "about:blank") : (n.data = "about:blank", t.appendChild(n)), {
      cancel: function cancel() {
        o && o.removeEventListener && o.removeEventListener("resize", e), t.removeChild(n);
      }
    };
  },
  add_transform: N,
  afterUpdate: function afterUpdate(t) {
    z().$$.after_update.push(t);
  },
  append: y,
  append_dev: function append_dev(t, e) {
    Ft("SvelteDOMInsert", {
      target: t,
      node: e
    }), y(t, e);
  },
  assign: i,
  attr: C,
  attr_dev: function attr_dev(t, e, n) {
    C(t, e, n), null == n ? Ft("SvelteDOMRemoveAttribute", {
      node: t,
      attribute: e
    }) : Ft("SvelteDOMSetAttribute", {
      node: t,
      attribute: e,
      value: n
    });
  },
  beforeUpdate: function beforeUpdate(t) {
    z().$$.before_update.push(t);
  },
  bind: function bind(t, e, n) {
    p(t.$$.props, e) && (e = t.$$.props[e] || e, t.$$.bound[e] = n, n(t.$$.ctx[e]));
  },
  binding_callbacks: U,
  blank_object: u,
  bubble: function bubble(t, e) {
    var n = t.$$.callbacks[e.type];
    n && n.slice().forEach(function (t) {
      return t(e);
    });
  },
  check_outros: ot,
  children: D,
  claim_component: function claim_component(t, e) {
    t && t.l(e);
  },
  claim_element: function claim_element(t, e, n, o) {
    for (var _o4 = 0; _o4 < t.length; _o4 += 1) {
      var _r2 = t[_o4];

      if (_r2.nodeName === e) {
        for (var _t5 = 0; _t5 < _r2.attributes.length; _t5 += 1) {
          var _e = _r2.attributes[_t5];
          n[_e.name] || _r2.removeAttribute(_e.name);
        }

        return t.splice(_o4, 1)[0];
      }
    }

    return o ? E(e) : x(e);
  },
  claim_space: function claim_space(t) {
    return j(t, " ");
  },
  claim_text: j,
  clear_loops: function clear_loops() {
    g.forEach(function (t) {
      return g["delete"](t);
    }), F = !1;
  },
  component_subscribe: function component_subscribe(t, e, n) {
    t.$$.on_destroy.push(f(e, n));
  },
  createEventDispatcher: function createEventDispatcher() {
    var t = z();
    return function (e, n) {
      var o = t.$$.callbacks[e];

      if (o) {
        var _r3 = A(e, n);

        o.slice().forEach(function (e) {
          e.call(t, _r3);
        });
      }
    };
  },
  create_animation: function create_animation(t, e, n, i) {
    if (!e) return o;
    var c = t.getBoundingClientRect();
    if (e.left === c.left && e.right === c.right && e.top === c.top && e.bottom === c.bottom) return o;

    var _n = n(t, {
      from: e,
      to: c
    }, i),
        _n$delay = _n.delay,
        s = _n$delay === void 0 ? 0 : _n$delay,
        _n$duration = _n.duration,
        u = _n$duration === void 0 ? 300 : _n$duration,
        _n$easing = _n.easing,
        a = _n$easing === void 0 ? r : _n$easing,
        _n$start = _n.start,
        l = _n$start === void 0 ? _() + s : _n$start,
        _n$end = _n.end,
        f = _n$end === void 0 ? l + u : _n$end,
        _n$tick = _n.tick,
        d = _n$tick === void 0 ? o : _n$tick,
        p = _n.css;

    var h,
        m = !0,
        g = !1;

    function b() {
      p && q(t, h), m = !1;
    }

    return $(function (t) {
      if (!g && t >= l && (g = !0), g && t >= f && (d(1, 0), b()), !m) return !1;

      if (g) {
        var _e2 = 0 + 1 * a((t - l) / u);

        d(_e2, 1 - _e2);
      }

      return !0;
    }), p && (h = R(t, 0, 1, u, s, a, p)), s || (g = !0), d(0, 1), b;
  },
  create_bidirectional_transition: function create_bidirectional_transition(t, e, n, i) {
    var c = e(t, n),
        s = i ? 0 : 1,
        u = null,
        f = null,
        d = null;

    function p() {
      d && q(t, d);
    }

    function h(t, e) {
      var n = t.b - s;
      return e *= Math.abs(n), {
        a: s,
        b: t.b,
        d: n,
        duration: e,
        start: t.start,
        end: t.start + e,
        group: t.group
      };
    }

    function m(e) {
      var _ref = c || ct,
          _ref$delay = _ref.delay,
          n = _ref$delay === void 0 ? 0 : _ref$delay,
          _ref$duration = _ref.duration,
          i = _ref$duration === void 0 ? 300 : _ref$duration,
          _ref$easing = _ref.easing,
          l = _ref$easing === void 0 ? r : _ref$easing,
          _ref$tick = _ref.tick,
          m = _ref$tick === void 0 ? o : _ref$tick,
          g = _ref.css,
          b = {
        start: _() + n,
        b: e
      };

      e || (b.group = et, et.r += 1), u ? f = b : (g && (p(), d = R(t, s, e, i, n, l, g)), e && m(0, 1), u = h(b, i), K(function () {
        return Z(t, e, "start");
      }), $(function (e) {
        if (f && e > f.start && (u = h(f, i), f = null, Z(t, u.b, "start"), g && (p(), d = R(t, s, u.b, u.duration, 0, l, c.css))), u) if (e >= u.end) m(s = u.b, 1 - s), Z(t, u.b, "end"), f || (u.b ? p() : --u.group.r || a(u.group.c)), u = null;else if (e >= u.start) {
          var _t6 = e - u.start;

          s = u.a + u.d * l(_t6 / u.duration), m(s, 1 - s);
        }
        return !(!u && !f);
      }));
    }

    return {
      run: function run(t) {
        l(c) ? X().then(function () {
          c = c(), m(t);
        }) : m(t);
      },
      end: function end() {
        p(), u = f = null;
      }
    };
  },
  create_component: function create_component(t) {
    t && t.c();
  },
  create_in_transition: function create_in_transition(t, e, n) {
    var i,
        c,
        s = e(t, n),
        u = !1,
        a = 0;

    function f() {
      i && q(t, i);
    }

    function d() {
      var _ref2 = s || ct,
          _ref2$delay = _ref2.delay,
          e = _ref2$delay === void 0 ? 0 : _ref2$delay,
          _ref2$duration = _ref2.duration,
          n = _ref2$duration === void 0 ? 300 : _ref2$duration,
          _ref2$easing = _ref2.easing,
          l = _ref2$easing === void 0 ? r : _ref2$easing,
          _ref2$tick = _ref2.tick,
          d = _ref2$tick === void 0 ? o : _ref2$tick,
          p = _ref2.css;

      p && (i = R(t, 0, 1, n, e, l, p, a++)), d(0, 1);
      var h = _() + e,
          m = h + n;
      c && c.abort(), u = !0, K(function () {
        return Z(t, !0, "start");
      }), c = $(function (e) {
        if (u) {
          if (e >= m) return d(1, 0), Z(t, !0, "end"), f(), u = !1;

          if (e >= h) {
            var _t7 = l((e - h) / n);

            d(_t7, 1 - _t7);
          }
        }

        return u;
      });
    }

    var p = !1;
    return {
      start: function start() {
        p || (q(t), l(s) ? (s = s(), X().then(d)) : d());
      },
      invalidate: function invalidate() {
        p = !1;
      },
      end: function end() {
        u && (f(), u = !1);
      }
    };
  },
  create_out_transition: function create_out_transition(t, e, n) {
    var i,
        c = e(t, n),
        s = !0;
    var u = et;

    function f() {
      var _ref3 = c || ct,
          _ref3$delay = _ref3.delay,
          e = _ref3$delay === void 0 ? 0 : _ref3$delay,
          _ref3$duration = _ref3.duration,
          n = _ref3$duration === void 0 ? 300 : _ref3$duration,
          _ref3$easing = _ref3.easing,
          l = _ref3$easing === void 0 ? r : _ref3$easing,
          _ref3$tick = _ref3.tick,
          f = _ref3$tick === void 0 ? o : _ref3$tick,
          d = _ref3.css;

      d && (i = R(t, 1, 0, n, e, l, d));
      var p = _() + e,
          h = p + n;
      K(function () {
        return Z(t, !1, "start");
      }), $(function (e) {
        if (s) {
          if (e >= h) return f(0, 1), Z(t, !1, "end"), --u.r || a(u.c), !1;

          if (e >= p) {
            var _t8 = l((e - p) / n);

            f(1 - _t8, _t8);
          }
        }

        return s;
      });
    }

    return u.r += 1, l(c) ? X().then(function () {
      c = c(), f();
    }) : f(), {
      end: function end(e) {
        e && c.tick && c.tick(1, 0), s && (i && q(t, i), s = !1);
      }
    };
  },
  create_slot: function create_slot(t, e, n) {
    if (t) {
      var _o5 = d(t, e, n);

      return t[0](_o5);
    }
  },
  create_ssr_component: function create_ssr_component(t) {
    function e(e, n, o, r) {
      var i = M;
      T({
        $$: {
          on_destroy: ht,
          context: new Map(i ? i.$$.context : []),
          on_mount: [],
          before_update: [],
          after_update: [],
          callbacks: u()
        }
      });
      var c = t(e, n, o, r);
      return T(i), c;
    }

    return {
      render: function render() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        ht = [];
        var o = {
          head: "",
          css: new Set()
        },
            r = e(o, t, {}, n);
        return a(ht), {
          html: r,
          css: {
            code: Array.from(o.css).map(function (t) {
              return t.code;
            }).join("\n"),
            map: null
          },
          head: o.head
        };
      },
      $$render: e
    };
  },

  get current_component() {
    return M;
  },

  custom_event: A,
  dataset_dev: function dataset_dev(t, e, n) {
    t.dataset[e] = n, Ft("SvelteDOMSetDataset", {
      node: t,
      property: e,
      value: n
    });
  },
  debug: function debug(t, e, n, o) {
    return console.log("{@debug} ".concat(t ? t + " " : "", "(").concat(e, ":").concat(n, ")")), console.log(o), "";
  },
  destroy_block: ut,
  destroy_component: gt,
  destroy_each: function destroy_each(t, e) {
    for (var n = 0; n < t.length; n += 1) {
      t[n] && t[n].d(e);
    }
  },
  detach: k,
  detach_after_dev: function detach_after_dev(t) {
    for (; t.nextSibling;) {
      vt(t.nextSibling);
    }
  },
  detach_before_dev: function detach_before_dev(t) {
    for (; t.previousSibling;) {
      vt(t.previousSibling);
    }
  },
  detach_between_dev: function detach_between_dev(t, e) {
    for (; t.nextSibling && t.nextSibling !== e;) {
      vt(t.nextSibling);
    }
  },
  detach_dev: vt,
  dirty_components: B,
  dispatch_dev: Ft,
  each: function each(t, e) {
    var n = "";

    for (var _o6 = 0; _o6 < t.length; _o6 += 1) {
      n += e(t[_o6], _o6);
    }

    return n;
  },
  element: x,
  element_is: function element_is(t, e) {
    return document.createElement(t, {
      is: e
    });
  },
  empty: function empty() {
    return S("");
  },
  escape: pt,
  escaped: dt,
  exclude_internal_props: function exclude_internal_props(t) {
    var e = {};

    for (var n in t) {
      "$" !== n[0] && (e[n] = t[n]);
    }

    return e;
  },
  fix_and_destroy_block: function fix_and_destroy_block(t, e) {
    t.f(), ut(t, e);
  },
  fix_and_outro_and_destroy_block: function fix_and_outro_and_destroy_block(t, e) {
    t.f(), at(t, e);
  },
  fix_position: function fix_position(t) {
    var e = getComputedStyle(t);

    if ("absolute" !== e.position && "fixed" !== e.position) {
      var n = e.width,
          _o7 = e.height,
          _r4 = t.getBoundingClientRect();

      t.style.position = "absolute", t.style.width = n, t.style.height = _o7, N(t, _r4);
    }
  },
  flush: Q,
  getContext: function getContext(t) {
    return z().$$.context.get(t);
  },
  get_binding_group_value: function get_binding_group_value(t) {
    var e = [];

    for (var n = 0; n < t.length; n += 1) {
      t[n].checked && e.push(t[n].__value);
    }

    return e;
  },
  get_current_component: z,
  get_slot_changes: function get_slot_changes(t, e, n, o) {
    return t[1] ? i({}, i(e.$$scope.changed || {}, t[1](o ? o(n) : {}))) : e.$$scope.changed || {};
  },
  get_slot_context: d,
  get_spread_object: function get_spread_object(t) {
    return "object" == _typeof(t) && null !== t ? t : {};
  },
  get_spread_update: function get_spread_update(t, e) {
    var n = {},
        o = {},
        r = {
      $$scope: 1
    };
    var i = t.length;

    for (; i--;) {
      var _c2 = t[i],
          _s = e[i];

      if (_s) {
        for (var _t9 in _c2) {
          _t9 in _s || (o[_t9] = 1);
        }

        for (var _t10 in _s) {
          r[_t10] || (n[_t10] = _s[_t10], r[_t10] = 1);
        }

        t[i] = _s;
      } else for (var _t11 in _c2) {
        r[_t11] = 1;
      }
    }

    for (var _t12 in o) {
      _t12 in n || (n[_t12] = void 0);
    }

    return n;
  },
  get_store_value: function get_store_value(t) {
    var e;
    return f(t, function (t) {
      return e = t;
    })(), e;
  },
  globals: st,
  group_outros: nt,
  handle_promise: function handle_promise(t, e) {
    var n = e.token = {};

    function o(t, o, r, c) {
      if (e.token !== n) return;
      e.resolved = r && _defineProperty({}, r, c);
      var s = i(i({}, e.ctx), e.resolved),
          u = t && (e.current = t)(s);
      var a = !1;
      e.block && (e.blocks ? e.blocks.forEach(function (t, n) {
        n !== o && t && (nt(), it(t, 1, 1, function () {
          e.blocks[n] = null;
        }), ot());
      }) : e.block.d(1), u.c(), rt(u, 1), u.m(e.mount(), e.anchor), a = !0), e.block = u, e.blocks && (e.blocks[o] = u), a && Q();
    }

    if (c(t)) {
      var _n2 = z();

      if (t.then(function (t) {
        T(_n2), o(e.then, 1, e.value, t), T(null);
      }, function (t) {
        T(_n2), o(e["catch"], 2, e.error, t), T(null);
      }), e.current !== e.pending) return o(e.pending, 0), !0;
    } else {
      if (e.current !== e.then) return o(e.then, 1, e.value, t), !0;
      e.resolved = _defineProperty({}, e.value, t);
    }
  },
  has_prop: p,
  identity: r,
  init: function init(t, e, n, r, i, c) {
    var s = M;
    T(t);
    var l = e.props || {},
        f = t.$$ = {
      fragment: null,
      ctx: null,
      props: c,
      update: o,
      not_equal: i,
      bound: u(),
      on_mount: [],
      on_destroy: [],
      before_update: [],
      after_update: [],
      context: new Map(s ? s.$$.context : []),
      callbacks: u(),
      dirty: null
    };
    var d = !1;
    f.ctx = n ? n(t, l, function (e, n) {
      var o = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : n;
      return f.ctx && i(f.ctx[e], f.ctx[e] = o) && (f.bound[e] && f.bound[e](o), d && function (t, e) {
        t.$$.dirty || (B.push(t), G(), t.$$.dirty = u()), t.$$.dirty[e] = !0;
      }(t, e)), n;
    }) : l, f.update(), d = !0, a(f.before_update), f.fragment = !!r && r(f.ctx), e.target && (e.hydrate ? f.fragment && f.fragment.l(D(e.target)) : f.fragment && f.fragment.c(), e.intro && rt(t.$$.fragment), mt(t, e.target, e.anchor), Q()), T(s);
  },
  insert: w,
  insert_dev: function insert_dev(t, e, n) {
    Ft("SvelteDOMInsert", {
      target: t,
      node: e,
      anchor: n
    }), w(t, e, n);
  },
  intros: {
    enabled: !1
  },
  invalid_attribute_name_character: ft,
  is_client: h,
  is_function: l,
  is_promise: c,
  listen: O,
  listen_dev: function listen_dev(t, e, n, o, r, i) {
    var c = !0 === o ? ["capture"] : o ? Array.from(Object.keys(o)) : [];
    r && c.push("preventDefault"), i && c.push("stopPropagation"), Ft("SvelteDOMAddEventListener", {
      node: t,
      event: e,
      handler: n,
      modifiers: c
    });
    var s = O(t, e, n, o);
    return function () {
      Ft("SvelteDOMRemoveEventListener", {
        node: t,
        event: e,
        handler: n,
        modifiers: c
      }), s();
    };
  },
  loop: $,
  loop_guard: function loop_guard(t) {
    var e = Date.now();
    return function () {
      if (Date.now() - e > t) throw new Error("Infinite loop detected");
    };
  },
  measure: function measure(t) {
    var e = {};
    var n = t.length;

    for (; n--;) {
      e[t[n].key] = t[n].node.getBoundingClientRect();
    }

    return e;
  },
  missing_component: {
    $$render: function $$render() {
      return "";
    }
  },
  mount_component: mt,
  noop: o,
  not_equal: function not_equal(t, e) {
    return t != t ? e == e : t !== e;
  },

  get now() {
    return _;
  },

  null_to_empty: function null_to_empty(t) {
    return null == t ? "" : t;
  },
  object_without_properties: function object_without_properties(t, e) {
    var n = {};

    for (var _o8 in t) {
      p(t, _o8) && -1 === e.indexOf(_o8) && (n[_o8] = t[_o8]);
    }

    return n;
  },
  onDestroy: function onDestroy(t) {
    z().$$.on_destroy.push(t);
  },
  onMount: function onMount(t) {
    z().$$.on_mount.push(t);
  },
  once: function once(t) {
    var e = !1;
    return function () {
      for (var _len = arguments.length, n = new Array(_len), _key = 0; _key < _len; _key++) {
        n[_key] = arguments[_key];
      }

      e || (e = !0, t.call.apply(t, [this].concat(n)));
    };
  },
  outro_and_destroy_block: at,
  prevent_default: function prevent_default(t) {
    return function (e) {
      return e.preventDefault(), t.call(this, e);
    };
  },
  prop_dev: function prop_dev(t, e, n) {
    t[e] = n, Ft("SvelteDOMSetProperty", {
      node: t,
      property: e,
      value: n
    });
  },

  get raf() {
    return m;
  },

  run: s,
  run_all: a,
  safe_not_equal: function safe_not_equal(t, e) {
    return t != t ? e == e : t !== e || t && "object" == _typeof(t) || "function" == typeof t;
  },
  schedule_update: G,
  select_multiple_value: function select_multiple_value(t) {
    return [].map.call(t.querySelectorAll(":checked"), function (t) {
      return t.__value;
    });
  },
  select_option: function select_option(t, e) {
    for (var n = 0; n < t.options.length; n += 1) {
      var _o9 = t.options[n];
      if (_o9.__value === e) return void (_o9.selected = !0);
    }
  },
  select_options: function select_options(t, e) {
    for (var n = 0; n < t.options.length; n += 1) {
      var _o10 = t.options[n];
      _o10.selected = ~e.indexOf(_o10.__value);
    }
  },
  select_value: function select_value(t) {
    var e = t.querySelector(":checked") || t.options[0];
    return e && e.__value;
  },
  self: function self(t) {
    return function (e) {
      e.target === this && t.call(this, e);
    };
  },
  setContext: function setContext(t, e) {
    z().$$.context.set(t, e);
  },
  set_attributes: function set_attributes(t, e) {
    var n = Object.getOwnPropertyDescriptors(t.__proto__);

    for (var _o11 in e) {
      null == e[_o11] ? t.removeAttribute(_o11) : "style" === _o11 ? t.style.cssText = e[_o11] : n[_o11] && n[_o11].set ? t[_o11] = e[_o11] : C(t, _o11, e[_o11]);
    }
  },
  set_current_component: T,
  set_custom_element_data: function set_custom_element_data(t, e, n) {
    e in t ? t[e] = n : C(t, e, n);
  },
  set_data: function set_data(t, e) {
    e = "" + e, t.data !== e && (t.data = e);
  },
  set_data_dev: function set_data_dev(t, e) {
    e = "" + e, t.data !== e && (Ft("SvelteDOMSetData", {
      node: t,
      data: e
    }), t.data = e);
  },
  set_input_type: function set_input_type(t, e) {
    try {
      t.type = e;
    } catch (t) {}
  },
  set_input_value: function set_input_value(t, e) {
    (null != e || t.value) && (t.value = e);
  },
  set_now: function set_now(t) {
    _ = t;
  },
  set_raf: function set_raf(t) {
    m = t;
  },
  set_store_value: function set_store_value(t, e) {
    var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : e;
    return t.set(n), e;
  },
  set_style: function set_style(t, e, n, o) {
    t.style.setProperty(e, n, o ? "important" : "");
  },
  set_svg_attributes: function set_svg_attributes(t, e) {
    for (var n in e) {
      C(t, n, e[n]);
    }
  },
  space: function space() {
    return S(" ");
  },
  spread: function spread(t, e) {
    var n = Object.assign.apply(Object, [{}].concat(_toConsumableArray(t)));
    e && (null == n["class"] ? n["class"] = e : n["class"] += " " + e);
    var o = "";
    return Object.keys(n).forEach(function (t) {
      if (ft.test(t)) return;
      var e = n[t];
      !0 === e ? o += " " + t : lt.has(t.toLowerCase()) ? e && (o += " " + t) : null != e && (o += " " + t + "=" + JSON.stringify(String(e).replace(/"/g, "&#34;").replace(/'/g, "&#39;")));
    }), o;
  },
  stop_propagation: function stop_propagation(t) {
    return function (e) {
      return e.stopPropagation(), t.call(this, e);
    };
  },
  subscribe: f,
  svg_element: E,
  text: S,
  tick: function tick() {
    return G(), J;
  },
  time_ranges_to_array: function time_ranges_to_array(t) {
    var e = [];

    for (var n = 0; n < t.length; n += 1) {
      e.push({
        start: t.start(n),
        end: t.end(n)
      });
    }

    return e;
  },
  to_number: function to_number(t) {
    return "" === t ? void 0 : +t;
  },
  toggle_class: function toggle_class(t, e, n) {
    t.classList[n ? "add" : "remove"](e);
  },
  transition_in: rt,
  transition_out: it,
  update_keyed_each: function update_keyed_each(t, e, n, o, r, i, c, s, u, a, l, f) {
    var d = t.length,
        p = i.length,
        h = d;
    var _ = {};

    for (; h--;) {
      _[t[h].key] = h;
    }

    var m = [],
        g = new Map(),
        b = new Map();

    for (h = p; h--;) {
      var _t13 = f(r, i, h),
          _s2 = n(_t13);

      var _u = c.get(_s2);

      _u ? o && _u.p(e, _t13) : (_u = a(_s2, _t13)).c(), g.set(_s2, m[h] = _u), _s2 in _ && b.set(_s2, Math.abs(h - _[_s2]));
    }

    var F = new Set(),
        v = new Set();

    function $(t) {
      rt(t, 1), t.m(s, l), c.set(t.key, t), l = t.first, p--;
    }

    for (; d && p;) {
      var _e3 = m[p - 1],
          _n3 = t[d - 1],
          _o12 = _e3.key,
          _r5 = _n3.key;
      _e3 === _n3 ? (l = _e3.first, d--, p--) : g.has(_r5) ? !c.has(_o12) || F.has(_o12) ? $(_e3) : v.has(_r5) ? d-- : b.get(_o12) > b.get(_r5) ? (v.add(_o12), $(_e3)) : (F.add(_r5), d--) : (u(_n3, c), d--);
    }

    for (; d--;) {
      var _e4 = t[d];
      g.has(_e4.key) || u(_e4, c);
    }

    for (; p;) {
      $(m[p - 1]);
    }

    return m;
  },
  validate_component: function validate_component(t, e) {
    if (!t || !t.$$render) throw "svelte:component" === e && (e += " this={...}"), new Error("<".concat(e, "> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules"));
    return t;
  },
  validate_store: function validate_store(t, e) {
    if (!t || "function" != typeof t.subscribe) throw new Error("'".concat(e, "' is not a store with a 'subscribe' method"));
  },
  xlink_attr: function xlink_attr(t, e, n) {
    t.setAttributeNS("http://www.w3.org/1999/xlink", e, n);
  }
}),
    xt = ($t = kt) && $t["default"] || $t,
    Et = (function (t, e) {
  Object.defineProperty(e, "__esModule", {
    value: !0
  });
  var n = [];

  function o(t, e) {
    return {
      subscribe: r(t, e).subscribe
    };
  }

  function r(t) {
    var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : xt.noop;
    var o;
    var r = [];

    function i(e) {
      if (xt.safe_not_equal(t, e) && (t = e, o)) {
        var _e5 = !n.length;

        for (var _e6 = 0; _e6 < r.length; _e6 += 1) {
          var _o13 = r[_e6];
          _o13[1](), n.push(_o13, t);
        }

        if (_e5) {
          for (var _t14 = 0; _t14 < n.length; _t14 += 2) {
            n[_t14][0](n[_t14 + 1]);
          }

          n.length = 0;
        }
      }
    }

    return {
      set: i,
      update: function update(e) {
        i(e(t));
      },
      subscribe: function subscribe(n) {
        var c = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : xt.noop;
        var s = [n, c];
        return r.push(s), 1 === r.length && (o = e(i) || xt.noop), n(t), function () {
          var t = r.indexOf(s);
          -1 !== t && r.splice(t, 1), 0 === r.length && (o(), o = null);
        };
      }
    };
  }

  Object.defineProperty(e, "get", {
    enumerable: !0,
    get: function get() {
      return xt.get_store_value;
    }
  }), e.derived = function (t, e, n) {
    var r = !Array.isArray(t),
        i = r ? [t] : t,
        c = e.length < 2;
    return o(n, function (t) {
      var n = !1;
      var o = [];
      var s = 0,
          u = xt.noop;

      var a = function a() {
        if (s) return;
        u();
        var n = e(r ? o[0] : o, t);
        c ? t(n) : u = xt.is_function(n) ? n : xt.noop;
      },
          l = i.map(function (t, e) {
        return t.subscribe(function (t) {
          o[e] = t, s &= ~(1 << e), n && a();
        }, function () {
          s |= 1 << e;
        });
      });

      return n = !0, a(), function () {
        xt.run_all(l), u();
      };
    });
  }, e.readable = o, e.writable = r;
}(yt = {
  exports: {}
}, yt.exports), yt.exports);
(wt = Et) && wt.__esModule && Object.prototype.hasOwnProperty.call(wt, "default") && wt["default"];
var St = Et.derived,
    Ot = (Et.readable, Et.writable);

var Ct = function Ct() {
  var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      t = _ref5.navigator,
      e = _ref5.hash,
      n = _ref5.search,
      o = _ref5.fallback;

  var r;

  var i = function i(t, e) {
    var n = t.substr(1).split("&").find(function (t) {
      return 0 === t.indexOf(e);
    });
    if (n) return n.split("=").pop();
  };

  return "undefined" != typeof window && (t && (r = window.navigator.language || window.navigator.languages[0]), n && (r = i(window.location.search, n)), e && (r = i(window.location.hash, e))), r || o;
};

var Dt, jt;
var At = {
  number: {
    scientific: {
      notation: "scientific"
    },
    engineering: {
      notation: "engineering"
    },
    compactLong: {
      notation: "compact",
      compactDisplay: "long"
    },
    compactShort: {
      notation: "compact",
      compactDisplay: "short"
    }
  }
};
var Lt = microMemoize(function (t, n) {
  return new IntlMessageFormat(t, n, At);
}),
    Pt = microMemoize(function (e, n) {
  return jt[n][e] || objectResolvePath(jt[n], e);
});

function Rt(t) {
  var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      e = _ref6.values,
      _ref6$locale = _ref6.locale,
      n = _ref6$locale === void 0 ? Dt : _ref6$locale;

  return Lt(t, n).format(e);
}

function qt(t) {
  var _ref7 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      e = _ref7.values,
      _ref7$locale = _ref7.locale,
      n = _ref7$locale === void 0 ? Dt : _ref7$locale;

  var o = Pt(t, n);
  return o ? e ? Lt(o, n).format(e) : o : (console.warn("[svelte-i18n] The message \"".concat(t, "\" was not found in the locale \"").concat(n, "\".")), t);
}

qt.time = function (t) {
  var _ref8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref8$format = _ref8.format,
      e = _ref8$format === void 0 ? "short" : _ref8$format;

  return Rt("{t,time,".concat(e, "}"), {
    values: {
      t: t
    }
  });
}, qt.date = function (t) {
  var _ref9 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref9$format = _ref9.format,
      e = _ref9$format === void 0 ? "short" : _ref9$format;

  return Rt("{d,date,".concat(e, "}"), {
    values: {
      d: t
    }
  });
}, qt.number = function (t) {
  var _ref10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      e = _ref10.format;

  return Rt("{n,number,".concat(e, "}"), {
    values: {
      n: t
    }
  });
}, qt.capital = function (t, e) {
  return function (t) {
    return t.replace(/(^|\s)\S/, function (t) {
      return t.toUpperCase();
    });
  }(qt(t, e));
}, qt.title = function (t, e) {
  return function (t) {
    return t.replace(/(^|\s)\S/g, function (t) {
      return t.toUpperCase();
    });
  }(qt(t, e));
}, qt.upper = function (t, e) {
  return function (t) {
    return t.toLocaleUpperCase();
  }(qt(t, e));
}, qt.lower = function (t, e) {
  return function (t) {
    return t.toLocaleLowerCase();
  }(qt(t, e));
};
var Nt = Ot({});
Nt.subscribe(function (t) {
  jt = t;
});
var Tt = Ot({}),
    zt = Tt.set;
Tt.set = function (t) {
  var e = function (t) {
    if (jt[t]) return t;

    if ("string" == typeof t) {
      var _e7 = t.split("-").shift();

      if (jt[_e7]) return _e7;
    }

    return null;
  }(t);

  if (e) return zt(e);
  throw Error("[svelte-i18n] Locale \"".concat(t, "\" not found."));
}, Tt.update = function (t) {
  return zt(t(Dt));
}, Tt.subscribe(function (t) {
  Dt = t;
});
var Bt = St([Tt, Nt], function () {
  return qt;
});

function noop$1() {}

var identity = function identity(x) {
  return x;
};

function run(fn) {
  return fn();
}

function blank_object() {
  return Object.create(null);
}

function run_all(fns) {
  fns.forEach(run);
}

function is_function(thing) {
  return typeof thing === 'function';
}

function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || a && _typeof(a) === 'object' || typeof a === 'function';
}

function subscribe(store) {
  if (store == null) {
    return noop$1;
  }

  for (var _len2 = arguments.length, callbacks = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    callbacks[_key2 - 1] = arguments[_key2];
  }

  var unsub = store.subscribe.apply(store, callbacks);
  return unsub.unsubscribe ? function () {
    return unsub.unsubscribe();
  } : unsub;
}

function get_store_value(store) {
  var value;
  subscribe(store, function (_) {
    return value = _;
  })();
  return value;
}

function component_subscribe(component, store, callback) {
  component.$$.on_destroy.push(subscribe(store, callback));
}

var is_client = typeof window !== 'undefined';
var now = is_client ? function () {
  return window.performance.now();
} : function () {
  return Date.now();
};
var raf = is_client ? function (cb) {
  return requestAnimationFrame(cb);
} : noop$1;
var tasks = new Set();

function run_tasks(now) {
  tasks.forEach(function (task) {
    if (!task.c(now)) {
      tasks["delete"](task);
      task.f();
    }
  });
  if (tasks.size !== 0) raf(run_tasks);
}
/**
 * Creates a new task that runs on each raf frame
 * until it returns a falsy value or is aborted
 */


function loop(callback) {
  var task;
  if (tasks.size === 0) raf(run_tasks);
  return {
    promise: new Promise(function (fulfill) {
      tasks.add(task = {
        c: callback,
        f: fulfill
      });
    }),
    abort: function abort() {
      tasks["delete"](task);
    }
  };
}

function append(target, node) {
  target.appendChild(node);
}

function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}

function detach(node) {
  node.parentNode.removeChild(node);
}

function element(name) {
  return document.createElement(name);
}

function svg_element(name) {
  return document.createElementNS('http://www.w3.org/2000/svg', name);
}

function text(data) {
  return document.createTextNode(data);
}

function space() {
  return text(' ');
}

function empty() {
  return text('');
}

function listen(node, event, handler, options) {
  node.addEventListener(event, handler, options);
  return function () {
    return node.removeEventListener(event, handler, options);
  };
}

function attr(node, attribute, value) {
  if (value == null) node.removeAttribute(attribute);else if (node.getAttribute(attribute) !== value) node.setAttribute(attribute, value);
}

function children(element) {
  return Array.from(element.childNodes);
}

function set_data(text, data) {
  data = '' + data;
  if (text.data !== data) text.data = data;
}

function set_style(node, key, value, important) {
  node.style.setProperty(key, value, important ? 'important' : '');
}

function toggle_class(element, name, toggle) {
  element.classList[toggle ? 'add' : 'remove'](name);
}

function custom_event(type, detail) {
  var e = document.createEvent('CustomEvent');
  e.initCustomEvent(type, false, false, detail);
  return e;
}

var stylesheet;
var active = 0;
var current_rules = {}; // https://github.com/darkskyapp/string-hash/blob/master/index.js

function hash(str) {
  var hash = 5381;
  var i = str.length;

  while (i--) {
    hash = (hash << 5) - hash ^ str.charCodeAt(i);
  }

  return hash >>> 0;
}

function create_rule(node, a, b, duration, delay, ease, fn) {
  var uid = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
  var step = 16.666 / duration;
  var keyframes = '{\n';

  for (var _p = 0; _p <= 1; _p += step) {
    var t = a + (b - a) * ease(_p);
    keyframes += _p * 100 + "%{".concat(fn(t, 1 - t), "}\n");
  }

  var rule = keyframes + "100% {".concat(fn(b, 1 - b), "}\n}");
  var name = "__svelte_".concat(hash(rule), "_").concat(uid);

  if (!current_rules[name]) {
    if (!stylesheet) {
      var style = element('style');
      document.head.appendChild(style);
      stylesheet = style.sheet;
    }

    current_rules[name] = true;
    stylesheet.insertRule("@keyframes ".concat(name, " ").concat(rule), stylesheet.cssRules.length);
  }

  var animation = node.style.animation || '';
  node.style.animation = "".concat(animation ? "".concat(animation, ", ") : "").concat(name, " ").concat(duration, "ms linear ").concat(delay, "ms 1 both");
  active += 1;
  return name;
}

function delete_rule(node, name) {
  node.style.animation = (node.style.animation || '').split(', ').filter(name ? function (anim) {
    return anim.indexOf(name) < 0;
  } // remove specific animation
  : function (anim) {
    return anim.indexOf('__svelte') === -1;
  } // remove all Svelte animations
  ).join(', ');
  if (name && ! --active) clear_rules();
}

function clear_rules() {
  raf(function () {
    if (active) return;
    var i = stylesheet.cssRules.length;

    while (i--) {
      stylesheet.deleteRule(i);
    }

    current_rules = {};
  });
}

function create_animation(node, from, fn, params) {
  if (!from) return noop$1;
  var to = node.getBoundingClientRect();
  if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom) return noop$1;

  var _fn = fn(node, {
    from: from,
    to: to
  }, params),
      _fn$delay = _fn.delay,
      delay = _fn$delay === void 0 ? 0 : _fn$delay,
      _fn$duration = _fn.duration,
      duration = _fn$duration === void 0 ? 300 : _fn$duration,
      _fn$easing = _fn.easing,
      easing = _fn$easing === void 0 ? identity : _fn$easing,
      _fn$start = _fn.start,
      start_time = _fn$start === void 0 ? now() + delay : _fn$start,
      _fn$end = _fn.end,
      end = _fn$end === void 0 ? start_time + duration : _fn$end,
      _fn$tick = _fn.tick,
      tick = _fn$tick === void 0 ? noop$1 : _fn$tick,
      css = _fn.css;

  var running = true;
  var started = false;
  var name;

  function start() {
    if (css) {
      name = create_rule(node, 0, 1, duration, delay, easing, css);
    }

    if (!delay) {
      started = true;
    }
  }

  function stop() {
    if (css) delete_rule(node, name);
    running = false;
  }

  loop(function (now) {
    if (!started && now >= start_time) {
      started = true;
    }

    if (started && now >= end) {
      tick(1, 0);
      stop();
    }

    if (!running) {
      return false;
    }

    if (started) {
      var _p2 = now - start_time;

      var t = 0 + 1 * easing(_p2 / duration);
      tick(t, 1 - t);
    }

    return true;
  });
  start();
  tick(0, 1);
  return stop;
}

function fix_position(node) {
  var style = getComputedStyle(node);

  if (style.position !== 'absolute' && style.position !== 'fixed') {
    var width = style.width,
        height = style.height;

    var _a2 = node.getBoundingClientRect();

    node.style.position = 'absolute';
    node.style.width = width;
    node.style.height = height;
    add_transform(node, _a2);
  }
}

function add_transform(node, a) {
  var b = node.getBoundingClientRect();

  if (a.left !== b.left || a.top !== b.top) {
    var style = getComputedStyle(node);
    var transform = style.transform === 'none' ? '' : style.transform;
    node.style.transform = "".concat(transform, " translate(").concat(a.left - b.left, "px, ").concat(a.top - b.top, "px)");
  }
}

var current_component;

function set_current_component(component) {
  current_component = component;
}

function get_current_component() {
  if (!current_component) throw new Error("Function called outside component initialization");
  return current_component;
}

function onDestroy(fn) {
  get_current_component().$$.on_destroy.push(fn);
}

var dirty_components = [];
var binding_callbacks = [];
var render_callbacks = [];
var flush_callbacks = [];
var resolved_promise = Promise.resolve();
var update_scheduled = false;

function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}

function add_render_callback(fn) {
  render_callbacks.push(fn);
}

var flushing = false;
var seen_callbacks = new Set();

function flush() {
  if (flushing) return;
  flushing = true;

  do {
    // first, call beforeUpdate functions
    // and update components
    for (var _i2 = 0; _i2 < dirty_components.length; _i2 += 1) {
      var component = dirty_components[_i2];
      set_current_component(component);
      update(component.$$);
    }

    dirty_components.length = 0;

    while (binding_callbacks.length) {
      binding_callbacks.pop()();
    } // then, once components are updated, call
    // afterUpdate functions. This may cause
    // subsequent updates...


    for (var _i3 = 0; _i3 < render_callbacks.length; _i3 += 1) {
      var callback = render_callbacks[_i3];

      if (!seen_callbacks.has(callback)) {
        // ...so guard against infinite loops
        seen_callbacks.add(callback);
        callback();
      }
    }

    render_callbacks.length = 0;
  } while (dirty_components.length);

  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }

  update_scheduled = false;
  flushing = false;
  seen_callbacks.clear();
}

function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    var dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}

var promise;

function wait() {
  if (!promise) {
    promise = Promise.resolve();
    promise.then(function () {
      promise = null;
    });
  }

  return promise;
}

function dispatch(node, direction, kind) {
  node.dispatchEvent(custom_event("".concat(direction ? 'intro' : 'outro').concat(kind)));
}

var outroing = new Set();
var outros;

function group_outros() {
  outros = {
    r: 0,
    c: [],
    p: outros // parent group

  };
}

function check_outros() {
  if (!outros.r) {
    run_all(outros.c);
  }

  outros = outros.p;
}

function transition_in(block, local) {
  if (block && block.i) {
    outroing["delete"](block);
    block.i(local);
  }
}

function transition_out(block, local, detach, callback) {
  if (block && block.o) {
    if (outroing.has(block)) return;
    outroing.add(block);
    outros.c.push(function () {
      outroing["delete"](block);

      if (callback) {
        if (detach) block.d(1);
        callback();
      }
    });
    block.o(local);
  }
}

var null_transition = {
  duration: 0
};

function create_in_transition(node, fn, params) {
  var config = fn(node, params);
  var running = false;
  var animation_name;
  var task;
  var uid = 0;

  function cleanup() {
    if (animation_name) delete_rule(node, animation_name);
  }

  function go() {
    var _ref11 = config || null_transition,
        _ref11$delay = _ref11.delay,
        delay = _ref11$delay === void 0 ? 0 : _ref11$delay,
        _ref11$duration = _ref11.duration,
        duration = _ref11$duration === void 0 ? 300 : _ref11$duration,
        _ref11$easing = _ref11.easing,
        easing = _ref11$easing === void 0 ? identity : _ref11$easing,
        _ref11$tick = _ref11.tick,
        tick = _ref11$tick === void 0 ? noop$1 : _ref11$tick,
        css = _ref11.css;

    if (css) animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
    tick(0, 1);
    var start_time = now() + delay;
    var end_time = start_time + duration;
    if (task) task.abort();
    running = true;
    add_render_callback(function () {
      return dispatch(node, true, 'start');
    });
    task = loop(function (now) {
      if (running) {
        if (now >= end_time) {
          tick(1, 0);
          dispatch(node, true, 'end');
          cleanup();
          return running = false;
        }

        if (now >= start_time) {
          var t = easing((now - start_time) / duration);
          tick(t, 1 - t);
        }
      }

      return running;
    });
  }

  var started = false;
  return {
    start: function start() {
      if (started) return;
      delete_rule(node);

      if (is_function(config)) {
        config = config();
        wait().then(go);
      } else {
        go();
      }
    },
    invalidate: function invalidate() {
      started = false;
    },
    end: function end() {
      if (running) {
        cleanup();
        running = false;
      }
    }
  };
}

function create_out_transition(node, fn, params) {
  var config = fn(node, params);
  var running = true;
  var animation_name;
  var group = outros;
  group.r += 1;

  function go() {
    var _ref12 = config || null_transition,
        _ref12$delay = _ref12.delay,
        delay = _ref12$delay === void 0 ? 0 : _ref12$delay,
        _ref12$duration = _ref12.duration,
        duration = _ref12$duration === void 0 ? 300 : _ref12$duration,
        _ref12$easing = _ref12.easing,
        easing = _ref12$easing === void 0 ? identity : _ref12$easing,
        _ref12$tick = _ref12.tick,
        tick = _ref12$tick === void 0 ? noop$1 : _ref12$tick,
        css = _ref12.css;

    if (css) animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
    var start_time = now() + delay;
    var end_time = start_time + duration;
    add_render_callback(function () {
      return dispatch(node, false, 'start');
    });
    loop(function (now) {
      if (running) {
        if (now >= end_time) {
          tick(0, 1);
          dispatch(node, false, 'end');

          if (! --group.r) {
            // this will result in `end()` being called,
            // so we don't need to clean up here
            run_all(group.c);
          }

          return false;
        }

        if (now >= start_time) {
          var t = easing((now - start_time) / duration);
          tick(1 - t, t);
        }
      }

      return running;
    });
  }

  if (is_function(config)) {
    wait().then(function () {
      // @ts-ignore
      config = config();
      go();
    });
  } else {
    go();
  }

  return {
    end: function end(reset) {
      if (reset && config.tick) {
        config.tick(1, 0);
      }

      if (running) {
        if (animation_name) delete_rule(node, animation_name);
        running = false;
      }
    }
  };
}

function outro_and_destroy_block(block, lookup) {
  transition_out(block, 1, 1, function () {
    lookup["delete"](block.key);
  });
}

function fix_and_outro_and_destroy_block(block, lookup) {
  block.f();
  outro_and_destroy_block(block, lookup);
}

function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
  var o = old_blocks.length;
  var n = list.length;
  var i = o;
  var old_indexes = {};

  while (i--) {
    old_indexes[old_blocks[i].key] = i;
  }

  var new_blocks = [];
  var new_lookup = new Map();
  var deltas = new Map();
  i = n;

  while (i--) {
    var child_ctx = get_context(ctx, list, i);
    var key = get_key(child_ctx);
    var block = lookup.get(key);

    if (!block) {
      block = create_each_block(key, child_ctx);
      block.c();
    } else if (dynamic) {
      block.p(child_ctx, dirty);
    }

    new_lookup.set(key, new_blocks[i] = block);
    if (key in old_indexes) deltas.set(key, Math.abs(i - old_indexes[key]));
  }

  var will_move = new Set();
  var did_move = new Set();

  function insert(block) {
    transition_in(block, 1);
    block.m(node, next);
    lookup.set(block.key, block);
    next = block.first;
    n--;
  }

  while (o && n) {
    var new_block = new_blocks[n - 1];
    var old_block = old_blocks[o - 1];
    var new_key = new_block.key;
    var old_key = old_block.key;

    if (new_block === old_block) {
      // do nothing
      next = new_block.first;
      o--;
      n--;
    } else if (!new_lookup.has(old_key)) {
      // remove old block
      destroy(old_block, lookup);
      o--;
    } else if (!lookup.has(new_key) || will_move.has(new_key)) {
      insert(new_block);
    } else if (did_move.has(old_key)) {
      o--;
    } else if (deltas.get(new_key) > deltas.get(old_key)) {
      did_move.add(new_key);
      insert(new_block);
    } else {
      will_move.add(old_key);
      o--;
    }
  }

  while (o--) {
    var _old_block = old_blocks[o];
    if (!new_lookup.has(_old_block.key)) destroy(_old_block, lookup);
  }

  while (n) {
    insert(new_blocks[n - 1]);
  }

  return new_blocks;
}

function create_component(block) {
  block && block.c();
}

function mount_component(component, target, anchor) {
  var _component$$$ = component.$$,
      fragment = _component$$$.fragment,
      on_mount = _component$$$.on_mount,
      on_destroy = _component$$$.on_destroy,
      after_update = _component$$$.after_update;
  fragment && fragment.m(target, anchor); // onMount happens before the initial afterUpdate

  add_render_callback(function () {
    var new_on_destroy = on_mount.map(run).filter(is_function);

    if (on_destroy) {
      on_destroy.push.apply(on_destroy, _toConsumableArray(new_on_destroy));
    } else {
      // Edge case - component was destroyed immediately,
      // most likely as a result of a binding initialising
      run_all(new_on_destroy);
    }

    component.$$.on_mount = [];
  });
  after_update.forEach(add_render_callback);
}

function destroy_component(component, detaching) {
  var $$ = component.$$;

  if ($$.fragment !== null) {
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching); // TODO null out other refs, including component.$$ (but need to
    // preserve final state?)

    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}

function make_dirty(component, i) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }

  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
}

function init(component, options, instance, create_fragment, not_equal, props) {
  var dirty = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [-1];
  var parent_component = current_component;
  set_current_component(component);
  var prop_values = options.props || {};
  var $$ = component.$$ = {
    fragment: null,
    ctx: null,
    // state
    props: props,
    update: noop$1,
    not_equal: not_equal,
    bound: blank_object(),
    // lifecycle
    on_mount: [],
    on_destroy: [],
    before_update: [],
    after_update: [],
    context: new Map(parent_component ? parent_component.$$.context : []),
    // everything else
    callbacks: blank_object(),
    dirty: dirty
  };
  var ready = false;
  $$.ctx = instance ? instance(component, prop_values, function (i, ret) {
    var value = (arguments.length <= 2 ? 0 : arguments.length - 2) ? arguments.length <= 2 ? undefined : arguments[2] : ret;

    if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
      if ($$.bound[i]) $$.bound[i](value);
      if (ready) make_dirty(component, i);
    }

    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update); // `false` as a special case of no DOM component

  $$.fragment = create_fragment ? create_fragment($$.ctx) : false;

  if (options.target) {
    if (options.hydrate) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      $$.fragment && $$.fragment.l(children(options.target));
    } else {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      $$.fragment && $$.fragment.c();
    }

    if (options.intro) transition_in(component.$$.fragment);
    mount_component(component, options.target, options.anchor);
    flush();
  }

  set_current_component(parent_component);
}

var SvelteComponent = /*#__PURE__*/function () {
  function SvelteComponent() {
    _classCallCheck(this, SvelteComponent);
  }

  _createClass(SvelteComponent, [{
    key: "$destroy",
    value: function $destroy() {
      destroy_component(this, 1);
      this.$destroy = noop$1;
    }
  }, {
    key: "$on",
    value: function $on(type, callback) {
      var callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
      callbacks.push(callback);
      return function () {
        var index = callbacks.indexOf(callback);
        if (index !== -1) callbacks.splice(index, 1);
      };
    }
  }, {
    key: "$set",
    value: function $set() {// overridden by instance, if it has props
    }
  }]);

  return SvelteComponent;
}();

function cubicOut(t) {
  var f = t - 1.0;
  return f * f * f + 1.0;
}

function quintIn(t) {
  return t * t * t * t * t;
}

function fly(node, _ref13) {
  var _ref13$delay = _ref13.delay,
      delay = _ref13$delay === void 0 ? 0 : _ref13$delay,
      _ref13$duration = _ref13.duration,
      duration = _ref13$duration === void 0 ? 400 : _ref13$duration,
      _ref13$easing = _ref13.easing,
      easing = _ref13$easing === void 0 ? cubicOut : _ref13$easing,
      _ref13$x = _ref13.x,
      x = _ref13$x === void 0 ? 0 : _ref13$x,
      _ref13$y = _ref13.y,
      y = _ref13$y === void 0 ? 0 : _ref13$y,
      _ref13$opacity = _ref13.opacity,
      opacity = _ref13$opacity === void 0 ? 0 : _ref13$opacity;
  var style = getComputedStyle(node);
  var target_opacity = +style.opacity;
  var transform = style.transform === 'none' ? '' : style.transform;
  var od = target_opacity * (1 - opacity);
  return {
    delay: delay,
    duration: duration,
    easing: easing,
    css: function css(t, u) {
      return "\n\t\t\ttransform: ".concat(transform, " translate(").concat((1 - t) * x, "px, ").concat((1 - t) * y, "px);\n\t\t\topacity: ").concat(target_opacity - od * u);
    }
  };
}

function flip(node, animation, params) {
  var style = getComputedStyle(node);
  var transform = style.transform === 'none' ? '' : style.transform;
  var scaleX = animation.from.width / node.clientWidth;
  var scaleY = animation.from.height / node.clientHeight;
  var dx = (animation.from.left - animation.to.left) / scaleX;
  var dy = (animation.from.top - animation.to.top) / scaleY;
  var d = Math.sqrt(dx * dx + dy * dy);
  var _params$delay = params.delay,
      delay = _params$delay === void 0 ? 0 : _params$delay,
      _params$duration = params.duration,
      duration = _params$duration === void 0 ? function (d) {
    return Math.sqrt(d) * 120;
  } : _params$duration,
      _params$easing = params.easing,
      easing = _params$easing === void 0 ? cubicOut : _params$easing;
  return {
    delay: delay,
    duration: is_function(duration) ? duration(d) : duration,
    easing: easing,
    css: function css(_t, u) {
      return "transform: ".concat(transform, " translate(").concat(u * dx, "px, ").concat(u * dy, "px);");
    }
  };
}

var subscriber_queue = [];
/**
 * Create a `Writable` store that allows both updating and reading by subscription.
 * @param {*=}value initial value
 * @param {StartStopNotifier=}start start and stop notifications for subscriptions
 */

function writable(value) {
  var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop$1;
  var stop;
  var subscribers = [];

  function set(new_value) {
    if (safe_not_equal(value, new_value)) {
      value = new_value;

      if (stop) {
        // store is ready
        var run_queue = !subscriber_queue.length;

        for (var _i4 = 0; _i4 < subscribers.length; _i4 += 1) {
          var _s3 = subscribers[_i4];

          _s3[1]();

          subscriber_queue.push(_s3, value);
        }

        if (run_queue) {
          for (var _i5 = 0; _i5 < subscriber_queue.length; _i5 += 2) {
            subscriber_queue[_i5][0](subscriber_queue[_i5 + 1]);
          }

          subscriber_queue.length = 0;
        }
      }
    }
  }

  function update(fn) {
    set(fn(value));
  }

  function subscribe(run) {
    var invalidate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop$1;
    var subscriber = [run, invalidate];
    subscribers.push(subscriber);

    if (subscribers.length === 1) {
      stop = start(set) || noop$1;
    }

    run(value);
    return function () {
      var index = subscribers.indexOf(subscriber);

      if (index !== -1) {
        subscribers.splice(index, 1);
      }

      if (subscribers.length === 0) {
        stop();
        stop = null;
      }
    };
  }

  return {
    set: set,
    update: update,
    subscribe: subscribe
  };
}

function argsEqual(args1, args2) {
  return JSON.stringify(args1) === JSON.stringify(args2);
}

function timeString(time) {
  var seconds = Math.floor(time / 1000);
  var formattedSeconds = seconds < 0 ? 0 : seconds;
  return formattedSeconds >= 60 ? "".concat(Math.floor(formattedSeconds / 60), " min") : "".concat(formattedSeconds, " sec");
}

function formatTime(number) {
  var time = new Date(number);
  return time.toLocaleString('en-US', {
    hour: 'numeric',
    minute: 'numeric',
    hour12: true
  });
} // will update object(merge new data) in list if it passes predicate, otherwise adds new object


function replaceOrAdd(list, predicate, data) {
  var clone = _toConsumableArray(list);

  var index = clone.findIndex(predicate);

  if (index !== -1) {
    var startTime = clone[index].startTime;
    var serverStartTime = data.startTime;
    clone[index] = _objectSpread({}, data, {
      startTime: startTime || serverStartTime
    });
    return clone;
  }

  return [].concat(_toConsumableArray(list), [data]);
}

function extractMessageFromError(error) {
  if (!error.stack || !error.message) {
    return {
      eventCode: 'txError',
      errorMsg: 'An unknown error occured'
    };
  }

  var message = error.stack || error.message;

  if (message.includes('User denied transaction signature')) {
    return {
      eventCode: 'txSendFail',
      errorMsg: 'User denied transaction signature'
    };
  }

  if (message.includes('transaction underpriced')) {
    return {
      eventCode: 'txUnderpriced',
      errorMsg: 'Transaction is under priced'
    };
  }

  return {
    eventCode: 'txError',
    errorMsg: message
  };
}

function createEmitter() {
  return {
    listeners: {},
    on: function on(eventCode, listener) {
      // check if valid eventCode
      switch (eventCode) {
        case 'txSent':
        case 'txPool':
        case 'txConfirmed':
        case 'txSpeedUp':
        case 'txCancel':
        case 'txFailed':
        case 'txRequest':
        case 'nsfFail':
        case 'txRepeat':
        case 'txAwaitingApproval':
        case 'txConfirmReminder':
        case 'txSendFail':
        case 'txError':
        case 'txUnderPriced':
        case 'all':
          break;

        default:
          throw new Error("".concat(eventCode, " is not a valid event code, for a list of valid event codes see: https://github.com/blocknative/notify"));
      } // check that listener is a function


      if (typeof listener !== 'function') {
        throw new Error('Listener must be a function');
      } // add listener for the eventCode


      this.listeners[eventCode] = listener;
    },
    emit: function emit(state) {
      if (this.listeners[state.eventCode || '']) {
        return this.listeners[state.eventCode || ''](state);
      }

      if (this.listeners.all) {
        return this.listeners.all(state);
      }
    }
  };
}

var defaultNotifyMessages = {
  en: {
    transaction: {
      txRequest: 'Your transaction is waiting for you to confirm',
      nsfFail: 'You have insufficient funds to complete this transaction',
      txUnderpriced: 'The gas price for your transaction is too low, try again with a higher gas price',
      txRepeat: 'This could be a repeat transaction',
      txAwaitingApproval: 'You have a previous transaction waiting for you to confirm',
      txConfirmReminder: 'Please confirm your transaction to continue, the transaction window may be behind your browser',
      txSendFail: 'You rejected the transaction',
      txSent: 'Your transaction has been sent to the network',
      txStallPending: 'Your transaction has stalled and has not entered the transaction pool',
      txPool: 'Your transaction has started',
      txStallConfirmed: "Your transaction has stalled and hasn't been confirmed",
      txSpeedUp: 'Your transaction has been sped up',
      txCancel: 'Your transaction is being canceled',
      txFailed: 'Your transaction has failed',
      txConfirmed: 'Your transaction has succeeded',
      txError: 'Oops something went wrong, please try again'
    },
    watched: {
      txPool: 'Your account is {verb} {formattedValue} {asset} {preposition} {counterpartyShortened}',
      txSpeedUp: 'Your account is {verb} {formattedValue} {asset} {preposition} {counterpartyShortened}',
      txCancel: 'Your account is {verb} {formattedValue} {asset} {preposition} {counterpartyShortened}',
      txConfirmed: 'Your account successfully {verb} {formattedValue} {asset} {preposition} {counterpartyShortened}',
      txFailed: 'Your account failed to {verb} {formattedValue} {asset} {preposition} {counterpartyShortened}'
    }
  },
  es: {
    transaction: {
      txRequest: 'Su transacción está esperando que confirme',
      nsfFail: 'No tiene fondos suficientes para completar esta transacción.',
      txUnderpriced: 'El precio del gas para su transacción es demasiado bajo, intente nuevamente con un precio del gas más alto',
      txRepeat: 'Esto podría ser una transacción repetida',
      txAwaitingApproval: 'Tienes una transacción anterior esperando que confirmes',
      txConfirmReminder: 'Confirme su transacción para continuar, la ventana de transacción puede estar detrás de su navegador',
      txSendFail: 'Rechazaste la transacción',
      txSent: 'Su transacción ha sido enviada a la red.',
      txStallPending: 'Su transacción se ha estancado y no ha ingresado al grupo de transacciones',
      txPool: 'Su transacción ha comenzado',
      txStallConfirmed: 'Su transacción se ha estancado y no ha sido confirmada.',
      txSpeedUp: 'Su transacción ha sido acelerada',
      txCancel: 'Tu transacción está siendo cancelada',
      txFailed: 'Su transacción ha fallado',
      txConfirmed: 'Su transacción ha tenido éxito.',
      txError: 'Vaya, algo salió mal, por favor intente nuevamente'
    },
    watched: {
      txPool: 'su cuenta está {verb, select, receiving {recibiendo} sending {enviando}} {formattedValue} {asset} {preposition, select, from {desde} to {a}} {counterpartyShortened}',
      txSpeedUp: 'su cuenta está {verb, select, receiving {recibiendo} sending {enviando}} {formattedValue} {asset} {preposition, select, from {desde} to {a}} {counterpartyShortened}',
      txCancel: 'su cuenta está {verb, select, receiving {recibiendo} sending {enviando}} {formattedValue} {asset} {preposition, select, from {desde} to {a}} {counterpartyShortened}',
      txConfirmed: 'su cuenta {verb, select, received {recibió} sent {ha enviado}} con éxito {formattedValue} {asset} {preposition, select, from {de} to {a}} {counterpartyShortened}',
      txFailed: 'su cuenta fallado {verb, select, received {recibió} sent {ha enviado}} con éxito {formattedValue} {asset} {preposition, select, from {de} to {a}} {counterpartyShortened}'
    }
  }
};
var app = writable({
  version: '',
  dappId: '',
  networkId: 1,
  nodeSynced: true,
  mobilePosition: 'top',
  desktopPosition: 'bottomRight',
  darkMode: false,
  txApproveReminderTimeout: 20000,
  txStallPendingTimeout: 20000,
  txStallConfirmedTimeout: 90000,
  clientLocale: 'en',
  notifyMessages: defaultNotifyMessages
});
var transactions = createTransactionStore([]);
var notifications = createNotificationStore([]);

function createTransactionStore(initialState) {
  var _writable = writable(initialState),
      subscribe = _writable.subscribe,
      update = _writable.update;

  function updateQueue(transaction) {
    var predicate = function predicate(tx) {
      return tx.id === transaction.id;
    };

    update(function (store) {
      return replaceOrAdd(store, predicate, transaction);
    });
  }

  function add(transaction) {
    update(function (store) {
      return [].concat(_toConsumableArray(store), [transaction]);
    });
  }

  return {
    subscribe: subscribe,
    updateQueue: updateQueue,
    add: add
  };
}

function createNotificationStore(initialState) {
  var _writable2 = writable(initialState),
      subscribe = _writable2.subscribe,
      update = _writable2.update;

  function add(notification) {
    update(function (store) {
      var existingNotification = store.find(function (n) {
        return n.id === notification.id;
      }); // if notification is a hint type or there are no existing notifications with same id, then just add it.

      if (notification.type === 'hint' || !existingNotification) {
        return [].concat(_toConsumableArray(store), [notification]);
      } // otherwise filter out all notifications with the same id and then add the new notification


      return [].concat(_toConsumableArray(store.filter(function (n) {
        return n.id !== notification.id;
      })), [notification]);
    });
  }

  function remove(id, eventCode) {
    update(function (store) {
      return store.filter(function (n) {
        return n.id !== id || n.eventCode !== eventCode;
      });
    });
  }

  return {
    subscribe: subscribe,
    add: add,
    remove: remove,
    update: update
  };
}
/* src/components/CloseIcon.svelte generated by Svelte v3.19.1 */


function add_css() {
  var style = element("style");
  style.id = "svelte-r8gx3p-style";
  style.textContent = "div.svelte-r8gx3p{display:flex;justify-content:center;align-items:center;font-size:inherit;font-family:inherit;padding:0.3em;border-radius:40px;transition:background 150ms ease-in-out}div.svelte-r8gx3p:hover{background:#eeeeee;cursor:pointer}.bn-notify-dark-mode-close-background.svelte-r8gx3p:hover{background:#00222c}";
  append(document.head, style);
}

function create_fragment(ctx) {
  var div;
  var svg;
  var g;
  var path0;
  var path1;
  var g_stroke_value;
  var div_class_value;
  var dispose;
  return {
    c: function c() {
      div = element("div");
      svg = svg_element("svg");
      g = svg_element("g");
      path0 = svg_element("path");
      path1 = svg_element("path");
      attr(path0, "d", "m.1.1 7.82304289 7.82304289");
      attr(path1, "d", "m.1.1 7.82304289 7.82304289");
      attr(path1, "transform", "matrix(-1 0 0 1 8 0)");
      attr(g, "fill", "none");
      attr(g, "stroke", g_stroke_value =
      /*hovered*/
      ctx[0] ?
      /*$app*/
      ctx[1].darkMode ? "#ffffff" : "#4a4a4a" : "#9B9B9B");
      attr(g, "stroke-linecap", "square");
      attr(g, "stroke-width", "2");
      set_style(g, "transition", "stroke 150ms ease-in-out");
      attr(g, "transform", "translate(2 2)");
      attr(svg, "height", "8");
      attr(svg, "viewBox", "0 0 12 12");
      attr(svg, "width", "8");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(div, "class", div_class_value = "bn-notify-custom bn-notify-notification-close-icon " + (
      /*$app*/
      ctx[1].name ? "bn-notify-".concat(
      /*$app*/
      ctx[1].name) : "") + " svelte-r8gx3p");
      toggle_class(div, "bn-notify-dark-mode-close-background",
      /*$app*/
      ctx[1].darkMode);
    },
    m: function m(target, anchor) {
      insert(target, div, anchor);
      append(div, svg);
      append(svg, g);
      append(g, path0);
      append(g, path1);
      dispose = [listen(div, "mouseenter",
      /*mouseenter_handler*/
      ctx[2]), listen(div, "mouseleave",
      /*mouseleave_handler*/
      ctx[3])];
    },
    p: function p(ctx, _ref14) {
      var _ref15 = _slicedToArray(_ref14, 1),
          dirty = _ref15[0];

      if (dirty &
      /*hovered, $app*/
      3 && g_stroke_value !== (g_stroke_value =
      /*hovered*/
      ctx[0] ?
      /*$app*/
      ctx[1].darkMode ? "#ffffff" : "#4a4a4a" : "#9B9B9B")) {
        attr(g, "stroke", g_stroke_value);
      }

      if (dirty &
      /*$app*/
      2 && div_class_value !== (div_class_value = "bn-notify-custom bn-notify-notification-close-icon " + (
      /*$app*/
      ctx[1].name ? "bn-notify-".concat(
      /*$app*/
      ctx[1].name) : "") + " svelte-r8gx3p")) {
        attr(div, "class", div_class_value);
      }

      if (dirty &
      /*$app, $app*/
      2) {
        toggle_class(div, "bn-notify-dark-mode-close-background",
        /*$app*/
        ctx[1].darkMode);
      }
    },
    i: noop$1,
    o: noop$1,
    d: function d(detaching) {
      if (detaching) detach(div);
      run_all(dispose);
    }
  };
}

function instance($$self, $$props, $$invalidate) {
  var $app;
  component_subscribe($$self, app, function ($$value) {
    return $$invalidate(1, $app = $$value);
  });
  var hovered;

  var mouseenter_handler = function mouseenter_handler() {
    return $$invalidate(0, hovered = true);
  };

  var mouseleave_handler = function mouseleave_handler() {
    return $$invalidate(0, hovered = false);
  };

  return [hovered, $app, mouseenter_handler, mouseleave_handler];
}

var CloseIcon = /*#__PURE__*/function (_SvelteComponent) {
  _inherits(CloseIcon, _SvelteComponent);

  function CloseIcon(options) {
    var _this3;

    _classCallCheck(this, CloseIcon);

    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(CloseIcon).call(this));
    if (!document.getElementById("svelte-r8gx3p-style")) add_css();
    init(_assertThisInitialized(_this3), options, instance, create_fragment, safe_not_equal, {});
    return _this3;
  }

  return CloseIcon;
}(SvelteComponent);
/* src/elements/NotificationMessage.svelte generated by Svelte v3.19.1 */


function add_css$1() {
  var style = element("style");
  style.id = "svelte-12gqi36-style";
  style.textContent = "p.svelte-12gqi36{margin:0;font-family:inherit;font-size:inherit}";
  append(document.head, style);
}

function create_fragment$1(ctx) {
  var _p3;

  var p_class_value;
  return {
    c: function c() {
      _p3 = element("p");
      attr(_p3, "class", p_class_value = "bn-notify-custom bn-notify-notification-info-message " + (
      /*$app*/
      ctx[1].name ? "bn-notify-".concat(
      /*$app*/
      ctx[1].name) : "") + " svelte-12gqi36");
    },
    m: function m(target, anchor) {
      insert(target, _p3, anchor);
      _p3.innerHTML =
      /*message*/
      ctx[0];
    },
    p: function p(ctx, _ref16) {
      var _ref17 = _slicedToArray(_ref16, 1),
          dirty = _ref17[0];

      if (dirty &
      /*message*/
      1) _p3.innerHTML =
      /*message*/
      ctx[0];

      if (dirty &
      /*$app*/
      2 && p_class_value !== (p_class_value = "bn-notify-custom bn-notify-notification-info-message " + (
      /*$app*/
      ctx[1].name ? "bn-notify-".concat(
      /*$app*/
      ctx[1].name) : "") + " svelte-12gqi36")) {
        attr(_p3, "class", p_class_value);
      }
    },
    i: noop$1,
    o: noop$1,
    d: function d(detaching) {
      if (detaching) detach(_p3);
    }
  };
}

function instance$1($$self, $$props, $$invalidate) {
  var $app;
  component_subscribe($$self, app, function ($$value) {
    return $$invalidate(1, $app = $$value);
  });
  var message = $$props.message;

  $$self.$set = function ($$props) {
    if ("message" in $$props) $$invalidate(0, message = $$props.message);
  };

  return [message, $app];
}

var NotificationMessage = /*#__PURE__*/function (_SvelteComponent2) {
  _inherits(NotificationMessage, _SvelteComponent2);

  function NotificationMessage(options) {
    var _this4;

    _classCallCheck(this, NotificationMessage);

    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(NotificationMessage).call(this));
    if (!document.getElementById("svelte-12gqi36-style")) add_css$1();
    init(_assertThisInitialized(_this4), options, instance$1, create_fragment$1, safe_not_equal, {
      message: 0
    });
    return _this4;
  }

  return NotificationMessage;
}(SvelteComponent);
/* src/elements/Clock.svelte generated by Svelte v3.19.1 */


function add_css$2() {
  var style = element("style");
  style.id = "svelte-1ociadw-style";
  style.textContent = "svg.svelte-1ociadw{margin:0 0.25em 0 0.5em}";
  append(document.head, style);
}

function create_fragment$2(ctx) {
  var svg;
  var g;
  var path;
  return {
    c: function c() {
      svg = svg_element("svg");
      g = svg_element("g");
      path = svg_element("path");
      attr(path, "d", "M7.06681227,1.92484595 C10.9634297,1.92484595 14.1336806,5.03922755\n      14.1336806,8.86724251 C14.1336806,12.6953675 10.9634297,15.8096941\n      7.06681227,15.8096941 C3.17019489,15.8096941 1.66977543e-13,12.6953675\n      1.66977543e-13,8.86724251 C1.66977543e-13,5.03922755 3.17019489,1.92484595\n      7.06681227,1.92484595 Z M7.06681227,13.5248129 C9.68105959,13.5248129\n      11.8078517,11.4354643 11.8078517,8.8672425 C11.8078517,8.25643705\n      11.6862119,7.67319541 11.4676859,7.13820421 L7.06334005,8.88946962\n      L7.06334005,4.20972711 C4.45066084,4.2115977 2.32577285,6.30028608\n      2.32577285,8.86724251 C2.32577285,11.4354643 4.45256495,13.5248129\n      7.06681227,13.5248129 Z M5.53007392,1.22124533e-14\n      L8.61626343,1.22124533e-14 L8.61626343,1.6696743 L5.53007392,1.6696743\n      L5.53007392,1.22124533e-14 Z");
      attr(path, "id", "transaction-timer");
      attr(path, "fill", "#AEAEAE");
      attr(path, "fill-rule", "nonzero");
      attr(g, "id", "Notify-Style-Concepts");
      attr(g, "stroke", "none");
      attr(g, "stroke-width", "1");
      attr(g, "fill", "none");
      attr(g, "fill-rule", "evenodd");
      attr(svg, "width", "15px");
      attr(svg, "height", "16px");
      attr(svg, "viewBox", "0 0 15 16");
      attr(svg, "version", "1.1");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
      attr(svg, "class", "svelte-1ociadw");
    },
    m: function m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, g);
      append(g, path);
    },
    p: noop$1,
    i: noop$1,
    o: noop$1,
    d: function d(detaching) {
      if (detaching) detach(svg);
    }
  };
}

var Clock = /*#__PURE__*/function (_SvelteComponent3) {
  _inherits(Clock, _SvelteComponent3);

  function Clock(options) {
    var _this5;

    _classCallCheck(this, Clock);

    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(Clock).call(this));
    if (!document.getElementById("svelte-1ociadw-style")) add_css$2();
    init(_assertThisInitialized(_this5), options, null, create_fragment$2, safe_not_equal, {});
    return _this5;
  }

  return Clock;
}(SvelteComponent);
/* src/elements/Time.svelte generated by Svelte v3.19.1 */


function add_css$3() {
  var style = element("style");
  style.id = "svelte-1cfg11z-style";
  style.textContent = "span.svelte-1cfg11z{font-size:inherit;font-family:inherit;margin-right:0.5em}";
  append(document.head, style);
}

function create_fragment$3(ctx) {
  var span;
  var t;
  var span_class_value;
  return {
    c: function c() {
      span = element("span");
      t = text(
      /*time*/
      ctx[0]);
      attr(span, "class", span_class_value = "bn-notify-custom bn-notify-notification-info-meta-timestamp " + (
      /*$app*/
      ctx[1].name ? "bn-notify-".concat(
      /*$app*/
      ctx[1].name) : "") + " svelte-1cfg11z");
    },
    m: function m(target, anchor) {
      insert(target, span, anchor);
      append(span, t);
    },
    p: function p(ctx, _ref18) {
      var _ref19 = _slicedToArray(_ref18, 1),
          dirty = _ref19[0];

      if (dirty &
      /*time*/
      1) set_data(t,
      /*time*/
      ctx[0]);

      if (dirty &
      /*$app*/
      2 && span_class_value !== (span_class_value = "bn-notify-custom bn-notify-notification-info-meta-timestamp " + (
      /*$app*/
      ctx[1].name ? "bn-notify-".concat(
      /*$app*/
      ctx[1].name) : "") + " svelte-1cfg11z")) {
        attr(span, "class", span_class_value);
      }
    },
    i: noop$1,
    o: noop$1,
    d: function d(detaching) {
      if (detaching) detach(span);
    }
  };
}

function instance$2($$self, $$props, $$invalidate) {
  var $app;
  component_subscribe($$self, app, function ($$value) {
    return $$invalidate(1, $app = $$value);
  });
  var time = $$props.time;

  $$self.$set = function ($$props) {
    if ("time" in $$props) $$invalidate(0, time = $$props.time);
  };

  return [time, $app];
}

var Time = /*#__PURE__*/function (_SvelteComponent4) {
  _inherits(Time, _SvelteComponent4);

  function Time(options) {
    var _this6;

    _classCallCheck(this, Time);

    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(Time).call(this));
    if (!document.getElementById("svelte-1cfg11z-style")) add_css$3();
    init(_assertThisInitialized(_this6), options, instance$2, create_fragment$3, safe_not_equal, {
      time: 0
    });
    return _this6;
  }

  return Time;
}(SvelteComponent);
/* src/elements/Timer.svelte generated by Svelte v3.19.1 */


function add_css$4() {
  var style = element("style");
  style.id = "svelte-82cst2-style";
  style.textContent = "span.svelte-82cst2{font-size:inherit;font-family:inherit}";
  append(document.head, style);
}

function create_fragment$4(ctx) {
  var span;
  var t;
  var span_class_value;
  return {
    c: function c() {
      span = element("span");
      t = text(
      /*value*/
      ctx[0]);
      attr(span, "class", span_class_value = "bn-notify-custom bn-notify-notification-info-meta-duration-time " + (
      /*$app*/
      ctx[1].name ? "bn-notify-".concat(
      /*$app*/
      ctx[1].name) : "") + " svelte-82cst2");
    },
    m: function m(target, anchor) {
      insert(target, span, anchor);
      append(span, t);
    },
    p: function p(ctx, _ref20) {
      var _ref21 = _slicedToArray(_ref20, 1),
          dirty = _ref21[0];

      if (dirty &
      /*value*/
      1) set_data(t,
      /*value*/
      ctx[0]);

      if (dirty &
      /*$app*/
      2 && span_class_value !== (span_class_value = "bn-notify-custom bn-notify-notification-info-meta-duration-time " + (
      /*$app*/
      ctx[1].name ? "bn-notify-".concat(
      /*$app*/
      ctx[1].name) : "") + " svelte-82cst2")) {
        attr(span, "class", span_class_value);
      }
    },
    i: noop$1,
    o: noop$1,
    d: function d(detaching) {
      if (detaching) detach(span);
    }
  };
}

function instance$3($$self, $$props, $$invalidate) {
  var $app;
  component_subscribe($$self, app, function ($$value) {
    return $$invalidate(1, $app = $$value);
  });
  var value = $$props.value;

  $$self.$set = function ($$props) {
    if ("value" in $$props) $$invalidate(0, value = $$props.value);
  };

  return [value, $app];
}

var Timer = /*#__PURE__*/function (_SvelteComponent5) {
  _inherits(Timer, _SvelteComponent5);

  function Timer(options) {
    var _this7;

    _classCallCheck(this, Timer);

    _this7 = _possibleConstructorReturn(this, _getPrototypeOf(Timer).call(this));
    if (!document.getElementById("svelte-82cst2-style")) add_css$4();
    init(_assertThisInitialized(_this7), options, instance$3, create_fragment$4, safe_not_equal, {
      value: 0
    });
    return _this7;
  }

  return Timer;
}(SvelteComponent);
/* src/components/NotificationContent.svelte generated by Svelte v3.19.1 */


function add_css$5() {
  var style = element("style");
  style.id = "svelte-5f7pqk-style";
  style.textContent = "div.svelte-5f7pqk{display:flex;flex-flow:column nowrap;justify-content:center;font-size:inherit;font-family:inherit;margin-left:0.75em;max-width:78%}p.svelte-5f7pqk{display:flex;align-items:center;margin:0.5em 0 0 0;opacity:0.7;font-size:0.889em;line-height:1.15;font-family:inherit}span.svelte-5f7pqk{font-family:inherit;display:flex;align-items:center}";
  append(document.head, style);
} // (49:4) {#if notification.type === 'pending' && notification.startTime}


function create_if_block(ctx) {
  var span;
  var t0;
  var t1;
  var span_class_value;
  var current;
  var clock = new Clock({});
  var timer = new Timer({
    props: {
      value: timeString(
      /*currentTime*/
      ctx[2] -
      /*notification*/
      ctx[0].startTime)
    }
  });
  return {
    c: function c() {
      span = element("span");
      t0 = text("-\n        ");
      create_component(clock.$$.fragment);
      t1 = space();
      create_component(timer.$$.fragment);
      attr(span, "class", span_class_value = "bn-notify-custom bn-notify-notification-info-meta-duration " + (
      /*$app*/
      ctx[3].name ? "bn-notify-".concat(
      /*$app*/
      ctx[3].name) : "") + " svelte-5f7pqk");
    },
    m: function m(target, anchor) {
      insert(target, span, anchor);
      append(span, t0);
      mount_component(clock, span, null);
      append(span, t1);
      mount_component(timer, span, null);
      current = true;
    },
    p: function p(ctx, dirty) {
      var timer_changes = {};
      if (dirty &
      /*currentTime, notification*/
      5) timer_changes.value = timeString(
      /*currentTime*/
      ctx[2] -
      /*notification*/
      ctx[0].startTime);
      timer.$set(timer_changes);

      if (!current || dirty &
      /*$app*/
      8 && span_class_value !== (span_class_value = "bn-notify-custom bn-notify-notification-info-meta-duration " + (
      /*$app*/
      ctx[3].name ? "bn-notify-".concat(
      /*$app*/
      ctx[3].name) : "") + " svelte-5f7pqk")) {
        attr(span, "class", span_class_value);
      }
    },
    i: function i(local) {
      if (current) return;
      transition_in(clock.$$.fragment, local);
      transition_in(timer.$$.fragment, local);
      current = true;
    },
    o: function o(local) {
      transition_out(clock.$$.fragment, local);
      transition_out(timer.$$.fragment, local);
      current = false;
    },
    d: function d(detaching) {
      if (detaching) detach(span);
      destroy_component(clock);
      destroy_component(timer);
    }
  };
}

function create_fragment$5(ctx) {
  var div;
  var t0;

  var _p4;

  var t1;
  var p_class_value;
  var div_class_value;
  var current;
  var notificationmessage = new NotificationMessage({
    props: {
      message:
      /*notification*/
      ctx[0].message
    }
  });
  var time = new Time({
    props: {
      time:
      /*formattedTime*/
      ctx[1]
    }
  });
  var if_block =
  /*notification*/
  ctx[0].type === "pending" &&
  /*notification*/
  ctx[0].startTime && create_if_block(ctx);
  return {
    c: function c() {
      div = element("div");
      create_component(notificationmessage.$$.fragment);
      t0 = space();
      _p4 = element("p");
      create_component(time.$$.fragment);
      t1 = space();
      if (if_block) if_block.c();
      attr(_p4, "class", p_class_value = "bn-notify-custom bn-notify-notification-info-meta " + (
      /*$app*/
      ctx[3].name ? "bn-notify-".concat(
      /*$app*/
      ctx[3].name) : "") + " svelte-5f7pqk");
      attr(div, "class", div_class_value = "bn-notify-custom bn-notify-notification-info " + (
      /*$app*/
      ctx[3].name ? "bn-notify-".concat(
      /*$app*/
      ctx[3].name) : "") + " svelte-5f7pqk");
    },
    m: function m(target, anchor) {
      insert(target, div, anchor);
      mount_component(notificationmessage, div, null);
      append(div, t0);
      append(div, _p4);
      mount_component(time, _p4, null);
      append(_p4, t1);
      if (if_block) if_block.m(_p4, null);
      current = true;
    },
    p: function p(ctx, _ref22) {
      var _ref23 = _slicedToArray(_ref22, 1),
          dirty = _ref23[0];

      var notificationmessage_changes = {};
      if (dirty &
      /*notification*/
      1) notificationmessage_changes.message =
      /*notification*/
      ctx[0].message;
      notificationmessage.$set(notificationmessage_changes);
      var time_changes = {};
      if (dirty &
      /*formattedTime*/
      2) time_changes.time =
      /*formattedTime*/
      ctx[1];
      time.$set(time_changes);

      if (
      /*notification*/
      ctx[0].type === "pending" &&
      /*notification*/
      ctx[0].startTime) {
        if (if_block) {
          if_block.p(ctx, dirty);
          transition_in(if_block, 1);
        } else {
          if_block = create_if_block(ctx);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(_p4, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, function () {
          if_block = null;
        });
        check_outros();
      }

      if (!current || dirty &
      /*$app*/
      8 && p_class_value !== (p_class_value = "bn-notify-custom bn-notify-notification-info-meta " + (
      /*$app*/
      ctx[3].name ? "bn-notify-".concat(
      /*$app*/
      ctx[3].name) : "") + " svelte-5f7pqk")) {
        attr(_p4, "class", p_class_value);
      }

      if (!current || dirty &
      /*$app*/
      8 && div_class_value !== (div_class_value = "bn-notify-custom bn-notify-notification-info " + (
      /*$app*/
      ctx[3].name ? "bn-notify-".concat(
      /*$app*/
      ctx[3].name) : "") + " svelte-5f7pqk")) {
        attr(div, "class", div_class_value);
      }
    },
    i: function i(local) {
      if (current) return;
      transition_in(notificationmessage.$$.fragment, local);
      transition_in(time.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o: function o(local) {
      transition_out(notificationmessage.$$.fragment, local);
      transition_out(time.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d: function d(detaching) {
      if (detaching) detach(div);
      destroy_component(notificationmessage);
      destroy_component(time);
      if (if_block) if_block.d();
    }
  };
}

function instance$4($$self, $$props, $$invalidate) {
  var $app;
  component_subscribe($$self, app, function ($$value) {
    return $$invalidate(3, $app = $$value);
  });
  var notification = $$props.notification;
  var formattedTime = $$props.formattedTime;
  var currentTime = $$props.currentTime;

  $$self.$set = function ($$props) {
    if ("notification" in $$props) $$invalidate(0, notification = $$props.notification);
    if ("formattedTime" in $$props) $$invalidate(1, formattedTime = $$props.formattedTime);
    if ("currentTime" in $$props) $$invalidate(2, currentTime = $$props.currentTime);
  };

  return [notification, formattedTime, currentTime, $app];
}

var NotificationContent = /*#__PURE__*/function (_SvelteComponent6) {
  _inherits(NotificationContent, _SvelteComponent6);

  function NotificationContent(options) {
    var _this8;

    _classCallCheck(this, NotificationContent);

    _this8 = _possibleConstructorReturn(this, _getPrototypeOf(NotificationContent).call(this));
    if (!document.getElementById("svelte-5f7pqk-style")) add_css$5();
    init(_assertThisInitialized(_this8), options, instance$4, create_fragment$5, safe_not_equal, {
      notification: 0,
      formattedTime: 1,
      currentTime: 2
    });
    return _this8;
  }

  return NotificationContent;
}(SvelteComponent);
/* src/components/TypeIcon.svelte generated by Svelte v3.19.1 */


function add_css$6() {
  var style = element("style");
  style.id = "svelte-7rn0pv-style";
  style.textContent = "div.svelte-7rn0pv{height:100%;font-size:inherit;font-family:inherit;width:1.5em}";
  append(document.head, style);
} // (17:2) {#if type === 'hint'}


function create_if_block_3(ctx) {
  var svg;
  var style;
  var t;
  var g2;
  var g0;
  var circle0;
  var g1;
  var path;
  var circle1;
  return {
    c: function c() {
      svg = svg_element("svg");
      style = svg_element("style");
      t = text("@-webkit-keyframes kf_el_51c2MS41pY_an_cXFUsKhg3V {\n          50% {\n            stroke-dasharray: 553;\n          }\n          0% {\n            stroke-dasharray: 553;\n          }\n          100% {\n            stroke-dasharray: 553;\n          }\n        }\n        @keyframes kf_el_51c2MS41pY_an_cXFUsKhg3V {\n          50% {\n            stroke-dasharray: 553;\n          }\n          0% {\n            stroke-dasharray: 553;\n          }\n          100% {\n            stroke-dasharray: 553;\n          }\n        }\n        @-webkit-keyframes kf_el_51c2MS41pY_an_M-ML-YLcm {\n          50% {\n            stroke-dashoffset: 553;\n          }\n          100% {\n            stroke-dashoffset: 0;\n          }\n          0% {\n            stroke-dashoffset: 553;\n          }\n        }\n        @keyframes kf_el_51c2MS41pY_an_M-ML-YLcm {\n          50% {\n            stroke-dashoffset: 553;\n          }\n          100% {\n            stroke-dashoffset: 0;\n          }\n          0% {\n            stroke-dashoffset: 553;\n          }\n        }\n        @-webkit-keyframes kf_el_j5HR_U6Nrp_an_KGzPpGvQb {\n          50% {\n            opacity: 0;\n          }\n          56.67% {\n            opacity: 1;\n          }\n          0% {\n            opacity: 0;\n          }\n          100% {\n            opacity: 1;\n          }\n        }\n        @keyframes kf_el_j5HR_U6Nrp_an_KGzPpGvQb {\n          50% {\n            opacity: 0;\n          }\n          56.67% {\n            opacity: 1;\n          }\n          0% {\n            opacity: 0;\n          }\n          100% {\n            opacity: 1;\n          }\n        }\n        @-webkit-keyframes kf_el_j5HR_U6Nrp_an_al_MjoEv-F {\n          50% {\n            stroke-dasharray: 39.41;\n          }\n          0% {\n            stroke-dasharray: 39.41;\n          }\n          100% {\n            stroke-dasharray: 39.41;\n          }\n        }\n        @keyframes kf_el_j5HR_U6Nrp_an_al_MjoEv-F {\n          50% {\n            stroke-dasharray: 39.41;\n          }\n          0% {\n            stroke-dasharray: 39.41;\n          }\n          100% {\n            stroke-dasharray: 39.41;\n          }\n        }\n        @-webkit-keyframes kf_el_j5HR_U6Nrp_an_VsVMmQ1MU {\n          50% {\n            stroke-dashoffset: 39.41;\n          }\n          100% {\n            stroke-dashoffset: 0;\n          }\n          0% {\n            stroke-dashoffset: 39.41;\n          }\n        }\n        @keyframes kf_el_j5HR_U6Nrp_an_VsVMmQ1MU {\n          50% {\n            stroke-dashoffset: 39.41;\n          }\n          100% {\n            stroke-dashoffset: 0;\n          }\n          0% {\n            stroke-dashoffset: 39.41;\n          }\n        }\n        @-webkit-keyframes kf_el_TZApOLwXZU_an_dL6-SZLSH {\n          50% {\n            -webkit-transform: translate(88.50000762939453px, 56.5px)\n              scale(0, 0) translate(-88.50000762939453px, -56.5px);\n            transform: translate(88.50000762939453px, 56.5px) scale(0, 0)\n              translate(-88.50000762939453px, -56.5px);\n          }\n          83.33% {\n            -webkit-transform: translate(88.50000762939453px, 56.5px)\n              scale(0, 0) translate(-88.50000762939453px, -56.5px);\n            transform: translate(88.50000762939453px, 56.5px) scale(0, 0)\n              translate(-88.50000762939453px, -56.5px);\n          }\n          100% {\n            -webkit-transform: translate(88.50000762939453px, 56.5px)\n              scale(1, 1) translate(-88.50000762939453px, -56.5px);\n            transform: translate(88.50000762939453px, 56.5px) scale(1, 1)\n              translate(-88.50000762939453px, -56.5px);\n          }\n          0% {\n            -webkit-transform: translate(88.50000762939453px, 56.5px)\n              scale(0, 0) translate(-88.50000762939453px, -56.5px);\n            transform: translate(88.50000762939453px, 56.5px) scale(0, 0)\n              translate(-88.50000762939453px, -56.5px);\n          }\n        }\n        @keyframes kf_el_TZApOLwXZU_an_dL6-SZLSH {\n          50% {\n            -webkit-transform: translate(88.50000762939453px, 56.5px)\n              scale(0, 0) translate(-88.50000762939453px, -56.5px);\n            transform: translate(88.50000762939453px, 56.5px) scale(0, 0)\n              translate(-88.50000762939453px, -56.5px);\n          }\n          83.33% {\n            -webkit-transform: translate(88.50000762939453px, 56.5px)\n              scale(0, 0) translate(-88.50000762939453px, -56.5px);\n            transform: translate(88.50000762939453px, 56.5px) scale(0, 0)\n              translate(-88.50000762939453px, -56.5px);\n          }\n          100% {\n            -webkit-transform: translate(88.50000762939453px, 56.5px)\n              scale(1, 1) translate(-88.50000762939453px, -56.5px);\n            transform: translate(88.50000762939453px, 56.5px) scale(1, 1)\n              translate(-88.50000762939453px, -56.5px);\n          }\n          0% {\n            -webkit-transform: translate(88.50000762939453px, 56.5px)\n              scale(0, 0) translate(-88.50000762939453px, -56.5px);\n            transform: translate(88.50000762939453px, 56.5px) scale(0, 0)\n              translate(-88.50000762939453px, -56.5px);\n          }\n        }\n        #el_DHAskxC2T * {\n          -webkit-animation-duration: 1s;\n          animation-duration: 1s;\n          -webkit-animation-iteration-count: 1;\n          animation-iteration-count: 1;\n          -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1);\n          animation-timing-function: cubic-bezier(0, 0, 1, 1);\n        }\n        #el__hILOKhuR3 {\n          fill: none;\n          -webkit-transform: translate(7px, 7px);\n          transform: translate(7px, 7px);\n        }\n        #el_TZApOLwXZU {\n          fill: #979797;\n          -webkit-transform: matrix(1, 0, 0, -1, 0, 113);\n          transform: matrix(1, 0, 0, -1, 0, 113);\n        }\n        #el_fIxIrV8WbF {\n          stroke: #979797;\n          stroke-width: 14;\n        }\n        #el_TZApOLwXZU_an_dL6-SZLSH {\n          -webkit-animation-fill-mode: forwards;\n          animation-fill-mode: forwards;\n          -webkit-animation-name: kf_el_TZApOLwXZU_an_dL6-SZLSH;\n          animation-name: kf_el_TZApOLwXZU_an_dL6-SZLSH;\n          -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1);\n          animation-timing-function: cubic-bezier(0, 0, 1, 1);\n        }\n        #el_j5HR_U6Nrp {\n          -webkit-animation-fill-mode: forwards, forwards, forwards;\n          animation-fill-mode: forwards, forwards, forwards;\n          -webkit-animation-name: kf_el_j5HR_U6Nrp_an_VsVMmQ1MU,\n            kf_el_j5HR_U6Nrp_an_al_MjoEv-F, kf_el_j5HR_U6Nrp_an_KGzPpGvQb;\n          animation-name: kf_el_j5HR_U6Nrp_an_VsVMmQ1MU,\n            kf_el_j5HR_U6Nrp_an_al_MjoEv-F, kf_el_j5HR_U6Nrp_an_KGzPpGvQb;\n          -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1),\n            cubic-bezier(0, 0, 1, 1), cubic-bezier(0, 0, 1, 1);\n          animation-timing-function: cubic-bezier(0, 0, 1, 1),\n            cubic-bezier(0, 0, 1, 1), cubic-bezier(0, 0, 1, 1);\n        }\n        #el_51c2MS41pY {\n          -webkit-animation-fill-mode: forwards, forwards;\n          animation-fill-mode: forwards, forwards;\n          -webkit-animation-name: kf_el_51c2MS41pY_an_M-ML-YLcm,\n            kf_el_51c2MS41pY_an_cXFUsKhg3V;\n          animation-name: kf_el_51c2MS41pY_an_M-ML-YLcm,\n            kf_el_51c2MS41pY_an_cXFUsKhg3V;\n          -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1),\n            cubic-bezier(0, 0, 1, 1);\n          animation-timing-function: cubic-bezier(0, 0, 1, 1),\n            cubic-bezier(0, 0, 1, 1);\n        }\n      ");
      g2 = svg_element("g");
      g0 = svg_element("g");
      circle0 = svg_element("circle");
      g1 = svg_element("g");
      path = svg_element("path");
      circle1 = svg_element("circle");
      attr(circle0, "cx", "88.5");
      attr(circle0, "cy", "56.5");
      attr(circle0, "r", "7.5");
      attr(circle0, "id", "el_TZApOLwXZU");
      attr(g0, "id", "el_TZApOLwXZU_an_dL6-SZLSH");
      attr(g0, "data-animator-group", "true");
      attr(g0, "data-animator-type", "2");
      attr(path, "d", "m88.5 128v-39.4130859");
      attr(path, "stroke-linecap", "round");
      attr(path, "stroke-linejoin", "round");
      attr(path, "id", "el_j5HR_U6Nrp");
      attr(circle1, "cx", "88");
      attr(circle1, "cy", "88");
      attr(circle1, "r", "88");
      attr(circle1, "id", "el_51c2MS41pY");
      attr(g1, "id", "el_fIxIrV8WbF");
      attr(g2, "fill-rule", "evenodd");
      attr(g2, "id", "el__hILOKhuR3");
      attr(svg, "viewBox", "0 0 190 190");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "id", "el_DHAskxC2T");
    },
    m: function m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, style);
      append(style, t);
      append(svg, g2);
      append(g2, g0);
      append(g0, circle0);
      append(g2, g1);
      append(g1, path);
      append(g1, circle1);
    },
    d: function d(detaching) {
      if (detaching) detach(svg);
    }
  };
} // (265:2) {#if type === 'pending'}


function create_if_block_2(ctx) {
  var svg;
  var style;
  var t;
  var g3;
  var circle;
  var g2;
  var g0;
  var path0;
  var g1;
  var path1;
  return {
    c: function c() {
      svg = svg_element("svg");
      style = svg_element("style");
      t = text("@-webkit-keyframes kf_el_fv0z90vBrL_an_PwUBZ96LS {\n          0% {\n            -webkit-transform: translate(88px, 87.587890625px) rotate(0deg)\n              translate(-88px, -87.587890625px);\n            transform: translate(88px, 87.587890625px) rotate(0deg)\n              translate(-88px, -87.587890625px);\n          }\n          100% {\n            -webkit-transform: translate(88px, 87.587890625px) rotate(360deg)\n              translate(-88px, -87.587890625px);\n            transform: translate(88px, 87.587890625px) rotate(360deg)\n              translate(-88px, -87.587890625px);\n          }\n        }\n        @keyframes kf_el_fv0z90vBrL_an_PwUBZ96LS {\n          0% {\n            -webkit-transform: translate(88px, 87.587890625px) rotate(0deg)\n              translate(-88px, -87.587890625px);\n            transform: translate(88px, 87.587890625px) rotate(0deg)\n              translate(-88px, -87.587890625px);\n          }\n          100% {\n            -webkit-transform: translate(88px, 87.587890625px) rotate(360deg)\n              translate(-88px, -87.587890625px);\n            transform: translate(88px, 87.587890625px) rotate(360deg)\n              translate(-88px, -87.587890625px);\n          }\n        }\n        @-webkit-keyframes kf_el_u3QHGLTow3_an_EQ8OetHGq {\n          0% {\n            -webkit-transform: translate(88px, 87.587890625px) rotate(0deg)\n              translate(-88px, -87.587890625px);\n            transform: translate(88px, 87.587890625px) rotate(0deg)\n              translate(-88px, -87.587890625px);\n          }\n          50% {\n            -webkit-transform: translate(88px, 87.587890625px) rotate(360deg)\n              translate(-88px, -87.587890625px);\n            transform: translate(88px, 87.587890625px) rotate(360deg)\n              translate(-88px, -87.587890625px);\n          }\n          100% {\n            -webkit-transform: translate(88px, 87.587890625px) rotate(720deg)\n              translate(-88px, -87.587890625px);\n            transform: translate(88px, 87.587890625px) rotate(720deg)\n              translate(-88px, -87.587890625px);\n          }\n        }\n        @keyframes kf_el_u3QHGLTow3_an_EQ8OetHGq {\n          0% {\n            -webkit-transform: translate(88px, 87.587890625px) rotate(0deg)\n              translate(-88px, -87.587890625px);\n            transform: translate(88px, 87.587890625px) rotate(0deg)\n              translate(-88px, -87.587890625px);\n          }\n          50% {\n            -webkit-transform: translate(88px, 87.587890625px) rotate(360deg)\n              translate(-88px, -87.587890625px);\n            transform: translate(88px, 87.587890625px) rotate(360deg)\n              translate(-88px, -87.587890625px);\n          }\n          100% {\n            -webkit-transform: translate(88px, 87.587890625px) rotate(720deg)\n              translate(-88px, -87.587890625px);\n            transform: translate(88px, 87.587890625px) rotate(720deg)\n              translate(-88px, -87.587890625px);\n          }\n        }\n        #el_XWLVvD_rP * {\n          -webkit-animation-duration: 2s;\n          animation-duration: 2s;\n          -webkit-animation-iteration-count: infinite;\n          animation-iteration-count: infinite;\n          -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1);\n          animation-timing-function: cubic-bezier(0, 0, 1, 1);\n        }\n        #el_Uh6HOhkAVi {\n          fill: none;\n          stroke-width: 14;\n          -webkit-transform: translate(7px, 7px);\n          transform: translate(7px, 7px);\n        }\n        #el_PHAWgO26lN {\n          stroke: #ffbd00;\n        }\n        #el_A4XF5QQwhp {\n          stroke: #ffbf00;\n        }\n        #el_u3QHGLTow3_an_EQ8OetHGq {\n          -webkit-animation-fill-mode: backwards;\n          animation-fill-mode: backwards;\n          -webkit-transform: translate(88px, 87.587890625px) rotate(0deg)\n            translate(-88px, -87.587890625px);\n          transform: translate(88px, 87.587890625px) rotate(0deg)\n            translate(-88px, -87.587890625px);\n          -webkit-animation-name: kf_el_u3QHGLTow3_an_EQ8OetHGq;\n          animation-name: kf_el_u3QHGLTow3_an_EQ8OetHGq;\n          -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1);\n          animation-timing-function: cubic-bezier(0, 0, 1, 1);\n        }\n        #el_fv0z90vBrL_an_PwUBZ96LS {\n          -webkit-animation-fill-mode: backwards;\n          animation-fill-mode: backwards;\n          -webkit-transform: translate(88px, 87.587890625px) rotate(0deg)\n            translate(-88px, -87.587890625px);\n          transform: translate(88px, 87.587890625px) rotate(0deg)\n            translate(-88px, -87.587890625px);\n          -webkit-animation-name: kf_el_fv0z90vBrL_an_PwUBZ96LS;\n          animation-name: kf_el_fv0z90vBrL_an_PwUBZ96LS;\n          -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1);\n          animation-timing-function: cubic-bezier(0, 0, 1, 1);\n        }\n      ");
      g3 = svg_element("g");
      circle = svg_element("circle");
      g2 = svg_element("g");
      g0 = svg_element("g");
      path0 = svg_element("path");
      g1 = svg_element("g");
      path1 = svg_element("path");
      attr(circle, "cx", "88");
      attr(circle, "cy", "88");
      attr(circle, "r", "88");
      attr(circle, "id", "el_PHAWgO26lN");
      attr(path0, "d", "m88 25v62.5878906");
      attr(path0, "id", "el_fv0z90vBrL");
      attr(g0, "id", "el_fv0z90vBrL_an_PwUBZ96LS");
      attr(g0, "data-animator-group", "true");
      attr(g0, "data-animator-type", "1");
      attr(path1, "d", "m88 45.9160156v41.671875");
      attr(path1, "id", "el_u3QHGLTow3");
      attr(g1, "id", "el_u3QHGLTow3_an_EQ8OetHGq");
      attr(g1, "data-animator-group", "true");
      attr(g1, "data-animator-type", "1");
      attr(g2, "stroke-linecap", "round");
      attr(g2, "stroke-linejoin", "round");
      attr(g2, "id", "el_A4XF5QQwhp");
      attr(g3, "fill-rule", "evenodd");
      attr(g3, "id", "el_Uh6HOhkAVi");
      attr(svg, "viewBox", "0 0 190 190");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "id", "el_XWLVvD_rP");
    },
    m: function m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, style);
      append(style, t);
      append(svg, g3);
      append(g3, circle);
      append(g3, g2);
      append(g2, g0);
      append(g0, path0);
      append(g2, g1);
      append(g1, path1);
    },
    d: function d(detaching) {
      if (detaching) detach(svg);
    }
  };
} // (404:2) {#if type === 'success'}


function create_if_block_1(ctx) {
  var svg;
  var style;
  var t;
  var path;
  return {
    c: function c() {
      svg = svg_element("svg");
      style = svg_element("style");
      t = text("@-webkit-keyframes kf_el_RzYtw9rUyN_an_gX4OsFPwzz {\n          0% {\n            stroke-dasharray: 473.87;\n          }\n          100% {\n            stroke-dasharray: 473.87;\n          }\n        }\n        @keyframes kf_el_RzYtw9rUyN_an_gX4OsFPwzz {\n          0% {\n            stroke-dasharray: 473.87;\n          }\n          100% {\n            stroke-dasharray: 473.87;\n          }\n        }\n        @-webkit-keyframes kf_el_RzYtw9rUyN_an_WfcYZ9pjL {\n          0% {\n            stroke-dashoffset: 473.87;\n          }\n          50% {\n            stroke-dashoffset: 473.87;\n          }\n          100% {\n            stroke-dashoffset: 0;\n          }\n        }\n        @keyframes kf_el_RzYtw9rUyN_an_WfcYZ9pjL {\n          0% {\n            stroke-dashoffset: 473.87;\n          }\n          50% {\n            stroke-dashoffset: 473.87;\n          }\n          100% {\n            stroke-dashoffset: 0;\n          }\n        }\n        #el_3OA8Szq_A * {\n          -webkit-animation-duration: 1s;\n          animation-duration: 1s;\n          -webkit-animation-iteration-count: 1;\n          animation-iteration-count: 1;\n          -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1);\n          animation-timing-function: cubic-bezier(0, 0, 1, 1);\n        }\n        #el_RzYtw9rUyN {\n          fill: none;\n          stroke: #7ed321;\n          stroke-width: 17;\n          -webkit-animation-fill-mode: forwards, forwards;\n          animation-fill-mode: forwards, forwards;\n          -webkit-animation-name: kf_el_RzYtw9rUyN_an_WfcYZ9pjL,\n            kf_el_RzYtw9rUyN_an_gX4OsFPwzz;\n          animation-name: kf_el_RzYtw9rUyN_an_WfcYZ9pjL,\n            kf_el_RzYtw9rUyN_an_gX4OsFPwzz;\n          -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1),\n            cubic-bezier(0, 0, 1, 1);\n          animation-timing-function: cubic-bezier(0, 0, 1, 1),\n            cubic-bezier(0, 0, 1, 1);\n        }\n      ");
      path = svg_element("path");
      attr(path, "d", "m176.126953 63.8789062-94.4130858 95.4130858-72.87402345-72.8740232\n        27.93945315-27.9394532 44.9345703 44.9345704 94.4130858-94.413086");
      attr(path, "stroke-linecap", "round");
      attr(path, "stroke-linejoin", "round");
      attr(path, "id", "el_RzYtw9rUyN");
      attr(svg, "viewBox", "0 0 185 168");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "id", "el_3OA8Szq_A");
    },
    m: function m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, style);
      append(style, t);
      append(svg, path);
    },
    d: function d(detaching) {
      if (detaching) detach(svg);
    }
  };
} // (481:2) {#if type === 'error'}


function create_if_block$1(ctx) {
  var svg;
  var style;
  var t;
  var g1;
  var path0;
  var g0;
  var circle;
  var path1;
  return {
    c: function c() {
      svg = svg_element("svg");
      style = svg_element("style");
      t = text("@-webkit-keyframes kf_el_IAuv9ut-2-_an_xlDuvYsRc {\n          50% {\n            opacity: 0;\n          }\n          66.67% {\n            opacity: 1;\n          }\n          0% {\n            opacity: 0;\n          }\n          100% {\n            opacity: 1;\n          }\n        }\n        @keyframes kf_el_IAuv9ut-2-_an_xlDuvYsRc {\n          50% {\n            opacity: 0;\n          }\n          66.67% {\n            opacity: 1;\n          }\n          0% {\n            opacity: 0;\n          }\n          100% {\n            opacity: 1;\n          }\n        }\n        @-webkit-keyframes kf_el_IAuv9ut-2-_an_29XE36SGo1 {\n          50% {\n            stroke-dasharray: 39.41;\n          }\n          0% {\n            stroke-dasharray: 39.41;\n          }\n          100% {\n            stroke-dasharray: 39.41;\n          }\n        }\n        @keyframes kf_el_IAuv9ut-2-_an_29XE36SGo1 {\n          50% {\n            stroke-dasharray: 39.41;\n          }\n          0% {\n            stroke-dasharray: 39.41;\n          }\n          100% {\n            stroke-dasharray: 39.41;\n          }\n        }\n        @-webkit-keyframes kf_el_IAuv9ut-2-_an_xo_EIWruT {\n          50% {\n            stroke-dashoffset: 39.41;\n          }\n          100% {\n            stroke-dashoffset: 0;\n          }\n          0% {\n            stroke-dashoffset: 39.41;\n          }\n        }\n        @keyframes kf_el_IAuv9ut-2-_an_xo_EIWruT {\n          50% {\n            stroke-dashoffset: 39.41;\n          }\n          100% {\n            stroke-dashoffset: 0;\n          }\n          0% {\n            stroke-dashoffset: 39.41;\n          }\n        }\n        @-webkit-keyframes kf_el_q_eIK0z3HI_an_045tZJOHl {\n          50% {\n            -webkit-transform: translate(88.50000762939453px, 144.5px)\n              scale(0, 0) translate(-88.50000762939453px, -144.5px);\n            transform: translate(88.50000762939453px, 144.5px) scale(0, 0)\n              translate(-88.50000762939453px, -144.5px);\n          }\n          83.33% {\n            -webkit-transform: translate(88.50000762939453px, 144.5px)\n              scale(0, 0) translate(-88.50000762939453px, -144.5px);\n            transform: translate(88.50000762939453px, 144.5px) scale(0, 0)\n              translate(-88.50000762939453px, -144.5px);\n          }\n          100% {\n            -webkit-transform: translate(88.50000762939453px, 144.5px)\n              scale(1, 1) translate(-88.50000762939453px, -144.5px);\n            transform: translate(88.50000762939453px, 144.5px) scale(1, 1)\n              translate(-88.50000762939453px, -144.5px);\n          }\n          0% {\n            -webkit-transform: translate(88.50000762939453px, 144.5px)\n              scale(0, 0) translate(-88.50000762939453px, -144.5px);\n            transform: translate(88.50000762939453px, 144.5px) scale(0, 0)\n              translate(-88.50000762939453px, -144.5px);\n          }\n        }\n        @keyframes kf_el_q_eIK0z3HI_an_045tZJOHl {\n          50% {\n            -webkit-transform: translate(88.50000762939453px, 144.5px)\n              scale(0, 0) translate(-88.50000762939453px, -144.5px);\n            transform: translate(88.50000762939453px, 144.5px) scale(0, 0)\n              translate(-88.50000762939453px, -144.5px);\n          }\n          83.33% {\n            -webkit-transform: translate(88.50000762939453px, 144.5px)\n              scale(0, 0) translate(-88.50000762939453px, -144.5px);\n            transform: translate(88.50000762939453px, 144.5px) scale(0, 0)\n              translate(-88.50000762939453px, -144.5px);\n          }\n          100% {\n            -webkit-transform: translate(88.50000762939453px, 144.5px)\n              scale(1, 1) translate(-88.50000762939453px, -144.5px);\n            transform: translate(88.50000762939453px, 144.5px) scale(1, 1)\n              translate(-88.50000762939453px, -144.5px);\n          }\n          0% {\n            -webkit-transform: translate(88.50000762939453px, 144.5px)\n              scale(0, 0) translate(-88.50000762939453px, -144.5px);\n            transform: translate(88.50000762939453px, 144.5px) scale(0, 0)\n              translate(-88.50000762939453px, -144.5px);\n          }\n        }\n        @-webkit-keyframes kf_el_5BNAI_PBsn_an_aToWhdlG8F {\n          50% {\n            stroke-dasharray: 527.67;\n          }\n          0% {\n            stroke-dasharray: 527.67;\n          }\n          100% {\n            stroke-dasharray: 527.67;\n          }\n        }\n        @keyframes kf_el_5BNAI_PBsn_an_aToWhdlG8F {\n          50% {\n            stroke-dasharray: 527.67;\n          }\n          0% {\n            stroke-dasharray: 527.67;\n          }\n          100% {\n            stroke-dasharray: 527.67;\n          }\n        }\n        @-webkit-keyframes kf_el_5BNAI_PBsn_an_tQV_CQebU {\n          50% {\n            stroke-dashoffset: 527.67;\n          }\n          100% {\n            stroke-dashoffset: 0;\n          }\n          0% {\n            stroke-dashoffset: 527.67;\n          }\n        }\n        @keyframes kf_el_5BNAI_PBsn_an_tQV_CQebU {\n          50% {\n            stroke-dashoffset: 527.67;\n          }\n          100% {\n            stroke-dashoffset: 0;\n          }\n          0% {\n            stroke-dashoffset: 527.67;\n          }\n        }\n        #el_bYTVKD04y * {\n          -webkit-animation-duration: 1s;\n          animation-duration: 1s;\n          -webkit-animation-iteration-count: 1;\n          animation-iteration-count: 1;\n          -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1);\n          animation-timing-function: cubic-bezier(0, 0, 1, 1);\n        }\n        #el_doMgf96Cxx {\n          fill: none;\n          -webkit-transform: translate(1px, -5px);\n          transform: translate(1px, -5px);\n        }\n        #el_5BNAI_PBsn {\n          stroke: #ff0039;\n          stroke-width: 14;\n          -webkit-animation-fill-mode: forwards, forwards;\n          animation-fill-mode: forwards, forwards;\n          -webkit-animation-name: kf_el_5BNAI_PBsn_an_tQV_CQebU,\n            kf_el_5BNAI_PBsn_an_aToWhdlG8F;\n          animation-name: kf_el_5BNAI_PBsn_an_tQV_CQebU,\n            kf_el_5BNAI_PBsn_an_aToWhdlG8F;\n          -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1),\n            cubic-bezier(0, 0, 1, 1);\n          animation-timing-function: cubic-bezier(0, 0, 1, 1),\n            cubic-bezier(0, 0, 1, 1);\n        }\n        #el_q_eIK0z3HI {\n          fill: #ff0042;\n        }\n        #el_IAuv9ut-2- {\n          stroke: #ff0042;\n          stroke-width: 14;\n          -webkit-animation-fill-mode: forwards, forwards, forwards;\n          animation-fill-mode: forwards, forwards, forwards;\n          -webkit-animation-name: kf_el_IAuv9ut-2-_an_xo_EIWruT,\n            kf_el_IAuv9ut-2-_an_29XE36SGo1, kf_el_IAuv9ut-2-_an_xlDuvYsRc;\n          animation-name: kf_el_IAuv9ut-2-_an_xo_EIWruT,\n            kf_el_IAuv9ut-2-_an_29XE36SGo1, kf_el_IAuv9ut-2-_an_xlDuvYsRc;\n          -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1),\n            cubic-bezier(0, 0, 1, 1), cubic-bezier(0, 0, 1, 1);\n          animation-timing-function: cubic-bezier(0, 0, 1, 1),\n            cubic-bezier(0, 0, 1, 1), cubic-bezier(0, 0, 1, 1);\n        }\n        #el_q_eIK0z3HI_an_045tZJOHl {\n          -webkit-animation-fill-mode: forwards;\n          animation-fill-mode: forwards;\n          -webkit-animation-name: kf_el_q_eIK0z3HI_an_045tZJOHl;\n          animation-name: kf_el_q_eIK0z3HI_an_045tZJOHl;\n          -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1);\n          animation-timing-function: cubic-bezier(0, 0, 1, 1);\n        }\n      ");
      g1 = svg_element("g");
      path0 = svg_element("path");
      g0 = svg_element("g");
      circle = svg_element("circle");
      path1 = svg_element("path");
      attr(path0, "d", "m96.9442719 17.8885438 71.8196601 143.6393202c2.469893\n          4.939785.467649 10.946515-4.472136 13.416408-1.388554.694277-2.919685\n          1.055728-4.472136 1.055728h-143.6393201c-5.5228475\n          0-10.00000001-4.477153-10.00000001-10 0-1.552451.36145092-3.083582\n          1.05572809-4.472136l71.81966012-143.6393202c2.4698925-4.939785\n          8.4766229-6.9420284 13.4164079-4.4721359 1.935274.967637 3.5044989\n          2.5368619 4.4721359 4.4721359z");
      attr(path0, "stroke-linejoin", "round");
      attr(path0, "id", "el_5BNAI_PBsn");
      attr(circle, "cx", "88.5");
      attr(circle, "cy", "144.5");
      attr(circle, "r", "7.5");
      attr(circle, "id", "el_q_eIK0z3HI");
      attr(g0, "id", "el_q_eIK0z3HI_an_045tZJOHl");
      attr(g0, "data-animator-group", "true");
      attr(g0, "data-animator-type", "2");
      attr(path1, "d", "m88.5 112.413086v-39.413086");
      attr(path1, "stroke-linecap", "round");
      attr(path1, "stroke-linejoin", "round");
      attr(path1, "id", "el_IAuv9ut-2-");
      attr(g1, "fill-rule", "evenodd");
      attr(g1, "id", "el_doMgf96Cxx");
      attr(svg, "viewBox", "0 0 178 178");
      attr(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr(svg, "id", "el_bYTVKD04y");
    },
    m: function m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, style);
      append(style, t);
      append(svg, g1);
      append(g1, path0);
      append(g1, g0);
      append(g0, circle);
      append(g1, path1);
    },
    d: function d(detaching) {
      if (detaching) detach(svg);
    }
  };
}

function create_fragment$6(ctx) {
  var div;
  var t0;
  var t1;
  var t2;
  var div_class_value;
  var if_block0 =
  /*type*/
  ctx[0] === "hint" && create_if_block_3();
  var if_block1 =
  /*type*/
  ctx[0] === "pending" && create_if_block_2();
  var if_block2 =
  /*type*/
  ctx[0] === "success" && create_if_block_1();
  var if_block3 =
  /*type*/
  ctx[0] === "error" && create_if_block$1();
  return {
    c: function c() {
      div = element("div");
      if (if_block0) if_block0.c();
      t0 = space();
      if (if_block1) if_block1.c();
      t1 = space();
      if (if_block2) if_block2.c();
      t2 = space();
      if (if_block3) if_block3.c();
      attr(div, "class", div_class_value = "bn-notify-custom bn-notify-notification-status-icon " + (
      /*$app*/
      ctx[1].name ? "bn-notify-".concat(
      /*$app*/
      ctx[1].name) : "") + " svelte-7rn0pv");
    },
    m: function m(target, anchor) {
      insert(target, div, anchor);
      if (if_block0) if_block0.m(div, null);
      append(div, t0);
      if (if_block1) if_block1.m(div, null);
      append(div, t1);
      if (if_block2) if_block2.m(div, null);
      append(div, t2);
      if (if_block3) if_block3.m(div, null);
    },
    p: function p(ctx, _ref24) {
      var _ref25 = _slicedToArray(_ref24, 1),
          dirty = _ref25[0];

      if (
      /*type*/
      ctx[0] === "hint") {
        if (!if_block0) {
          if_block0 = create_if_block_3();
          if_block0.c();
          if_block0.m(div, t0);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }

      if (
      /*type*/
      ctx[0] === "pending") {
        if (!if_block1) {
          if_block1 = create_if_block_2();
          if_block1.c();
          if_block1.m(div, t1);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }

      if (
      /*type*/
      ctx[0] === "success") {
        if (!if_block2) {
          if_block2 = create_if_block_1();
          if_block2.c();
          if_block2.m(div, t2);
        }
      } else if (if_block2) {
        if_block2.d(1);
        if_block2 = null;
      }

      if (
      /*type*/
      ctx[0] === "error") {
        if (!if_block3) {
          if_block3 = create_if_block$1();
          if_block3.c();
          if_block3.m(div, null);
        }
      } else if (if_block3) {
        if_block3.d(1);
        if_block3 = null;
      }

      if (dirty &
      /*$app*/
      2 && div_class_value !== (div_class_value = "bn-notify-custom bn-notify-notification-status-icon " + (
      /*$app*/
      ctx[1].name ? "bn-notify-".concat(
      /*$app*/
      ctx[1].name) : "") + " svelte-7rn0pv")) {
        attr(div, "class", div_class_value);
      }
    },
    i: noop$1,
    o: noop$1,
    d: function d(detaching) {
      if (detaching) detach(div);
      if (if_block0) if_block0.d();
      if (if_block1) if_block1.d();
      if (if_block2) if_block2.d();
      if (if_block3) if_block3.d();
    }
  };
}

function instance$5($$self, $$props, $$invalidate) {
  var $app;
  component_subscribe($$self, app, function ($$value) {
    return $$invalidate(1, $app = $$value);
  });
  var type = $$props.type;

  $$self.$set = function ($$props) {
    if ("type" in $$props) $$invalidate(0, type = $$props.type);
  };

  return [type, $app];
}

var TypeIcon = /*#__PURE__*/function (_SvelteComponent7) {
  _inherits(TypeIcon, _SvelteComponent7);

  function TypeIcon(options) {
    var _this9;

    _classCallCheck(this, TypeIcon);

    _this9 = _possibleConstructorReturn(this, _getPrototypeOf(TypeIcon).call(this));
    if (!document.getElementById("svelte-7rn0pv-style")) add_css$6();
    init(_assertThisInitialized(_this9), options, instance$5, create_fragment$6, safe_not_equal, {
      type: 0
    });
    return _this9;
  }

  return TypeIcon;
}(SvelteComponent);
/* src/components/AutoDismiss.svelte generated by Svelte v3.19.1 */


function instance$6($$self, $$props, $$invalidate) {
  var _$$props$notification = $$props.notification,
      notification = _$$props$notification === void 0 ? {
    id: "",
    type: "",
    key: "",
    message: "",
    eventCode: ""
  } : _$$props$notification;

  if (notification.autoDismiss && notification.id) {
    setTimeout(function () {
      notifications.remove(notification.id, notification.eventCode);
    }, notification.autoDismiss);
  }

  $$self.$set = function ($$props) {
    if ("notification" in $$props) $$invalidate(0, notification = $$props.notification);
  };

  return [notification];
}

var AutoDismiss = /*#__PURE__*/function (_SvelteComponent8) {
  _inherits(AutoDismiss, _SvelteComponent8);

  function AutoDismiss(options) {
    var _this10;

    _classCallCheck(this, AutoDismiss);

    _this10 = _possibleConstructorReturn(this, _getPrototypeOf(AutoDismiss).call(this));
    init(_assertThisInitialized(_this10), options, instance$6, null, safe_not_equal, {
      notification: 0
    });
    return _this10;
  }

  return AutoDismiss;
}(SvelteComponent);
/* src/views/Notify.svelte generated by Svelte v3.19.1 */


function add_css$7() {
  var style = element("style");
  style.id = "svelte-166mr51-style";
  style.textContent = "ul.svelte-166mr51{display:flex;flex-flow:column nowrap;position:fixed;font-size:16px;padding:0 0.75em;margin:0;list-style-type:none;width:20em;bottom:0;right:0;font-family:'Helvetica Neue';max-height:100vh;overflow-y:scroll;overflow-x:hidden;color:#4a4a4a;background:transparent;scrollbar-width:none;box-sizing:border-box;height:100vh;pointer-events:none;z-index:99999999}@media only screen and (max-width: 450px){ul.svelte-166mr51{width:100%}}.bn-notify-custom.bn-notify-dark-mode{background:#283944;color:#ffffff;background:rgba(40, 57, 68, 0.9)}.bn-notify-clickable:hover{cursor:pointer}.svelte-166mr51::-webkit-scrollbar{display:none}li.svelte-166mr51{position:relative;display:flex;padding:0.75em;font-size:0.889em;font-family:inherit;border-radius:10px;background:#ffffff;box-shadow:0px 2px 10px rgba(0, 0, 0, 0.1);color:inherit;transition:background 300ms ease-in-out, color 300ms ease-in-out;pointer-events:all;background:#ffffff;backdrop-filter:blur(5px);background:rgba(255, 255, 255, 0.9)}div.svelte-166mr51{position:absolute;top:0.75em;right:0.75em;font-size:inherit;font-family:inherit}";
  append(document.head, style);
}

function get_each_context(ctx, list, i) {
  var child_ctx = ctx.slice();
  child_ctx[15] = list[i];
  child_ctx[17] = i;
  return child_ctx;
} // (177:0) {#if $notifications.length > 0}


function create_if_block$2(ctx) {
  var ul;
  var each_blocks = [];
  var each_1_lookup = new Map();
  var ul_class_value;
  var ul_style_value;
  var current;
  var each_value =
  /*$notifications*/
  ctx[6];

  var get_key = function get_key(ctx) {
    return (
      /*notification*/
      ctx[15].key
    );
  };

  for (var _i6 = 0; _i6 < each_value.length; _i6 += 1) {
    var child_ctx = get_each_context(ctx, each_value, _i6);
    var key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[_i6] = create_each_block(key, child_ctx));
  }

  return {
    c: function c() {
      ul = element("ul");

      for (var _i7 = 0; _i7 < each_blocks.length; _i7 += 1) {
        each_blocks[_i7].c();
      }

      attr(ul, "class", ul_class_value = "bn-notify-custom bn-notify-notifications " + (
      /*$app*/
      ctx[7].name ? "bn-notify-".concat(
      /*$app*/
      ctx[7].name) : "") + " svelte-166mr51");
      attr(ul, "style", ul_style_value = "".concat(
      /*positioning*/
      ctx[0], " ").concat(
      /*justifyContent*/
      ctx[4]));
    },
    m: function m(target, anchor) {
      insert(target, ul, anchor);

      for (var _i8 = 0; _i8 < each_blocks.length; _i8 += 1) {
        each_blocks[_i8].m(ul, null);
      }

      current = true;
    },
    p: function p(ctx, dirty) {
      if (dirty &
      /*notificationMargin, $app, $notifications, notifications, formattedTime, currentTime*/
      488) {
        var _each_value =
        /*$notifications*/
        ctx[6];
        group_outros();

        for (var _i9 = 0; _i9 < each_blocks.length; _i9 += 1) {
          each_blocks[_i9].r();
        }

        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, _each_value, each_1_lookup, ul, fix_and_outro_and_destroy_block, create_each_block, null, get_each_context);

        for (var _i10 = 0; _i10 < each_blocks.length; _i10 += 1) {
          each_blocks[_i10].a();
        }

        check_outros();
      }

      if (!current || dirty &
      /*$app*/
      128 && ul_class_value !== (ul_class_value = "bn-notify-custom bn-notify-notifications " + (
      /*$app*/
      ctx[7].name ? "bn-notify-".concat(
      /*$app*/
      ctx[7].name) : "") + " svelte-166mr51")) {
        attr(ul, "class", ul_class_value);
      }

      if (!current || dirty &
      /*positioning, justifyContent*/
      17 && ul_style_value !== (ul_style_value = "".concat(
      /*positioning*/
      ctx[0], " ").concat(
      /*justifyContent*/
      ctx[4]))) {
        attr(ul, "style", ul_style_value);
      }
    },
    i: function i(local) {
      if (current) return;

      for (var _i11 = 0; _i11 < each_value.length; _i11 += 1) {
        transition_in(each_blocks[_i11]);
      }

      current = true;
    },
    o: function o(local) {
      for (var _i12 = 0; _i12 < each_blocks.length; _i12 += 1) {
        transition_out(each_blocks[_i12]);
      }

      current = false;
    },
    d: function d(detaching) {
      if (detaching) detach(ul);

      for (var _i13 = 0; _i13 < each_blocks.length; _i13 += 1) {
        each_blocks[_i13].d();
      }
    }
  };
} // (181:4) {#each $notifications as notification, i (notification.key)}


function create_each_block(key_1, ctx) {
  var li;
  var t0;
  var t1;
  var div;
  var div_class_value;
  var t2;
  var t3;
  var li_class_value;
  var li_intro;
  var li_outro;
  var rect;
  var stop_animation = noop$1;
  var current;
  var dispose;
  var typeicon = new TypeIcon({
    props: {
      type:
      /*notification*/
      ctx[15].type
    }
  });
  var notificationcontent = new NotificationContent({
    props: {
      notification:
      /*notification*/
      ctx[15],
      formattedTime:
      /*formattedTime*/
      ctx[8],
      currentTime:
      /*currentTime*/
      ctx[5]
    }
  });
  var closeicon = new CloseIcon({});

  function click_handler() {
    var _ctx;

    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    return (
      /*click_handler*/
      (_ctx = ctx)[13].apply(_ctx, [
      /*notification*/
      ctx[15]].concat(args))
    );
  }

  var autodismiss = new AutoDismiss({
    props: {
      notification:
      /*notification*/
      ctx[15]
    }
  });

  function click_handler_1() {
    var _ctx2;

    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }

    return (
      /*click_handler_1*/
      (_ctx2 = ctx)[14].apply(_ctx2, [
      /*notification*/
      ctx[15]].concat(args))
    );
  }

  return {
    key: key_1,
    first: null,
    c: function c() {
      li = element("li");
      create_component(typeicon.$$.fragment);
      t0 = space();
      create_component(notificationcontent.$$.fragment);
      t1 = space();
      div = element("div");
      create_component(closeicon.$$.fragment);
      t2 = space();
      create_component(autodismiss.$$.fragment);
      t3 = space();
      attr(div, "class", div_class_value = "bn-notify-custom bn-notify-notification-close " + (
      /*$app*/
      ctx[7].name ? "bn-notify-".concat(
      /*$app*/
      ctx[7].name) : "") + " svelte-166mr51");
      attr(li, "style",
      /*notificationMargin*/
      ctx[3]);
      attr(li, "class", li_class_value = "bn-notify-custom bn-notify-notification " + (
      /*$app*/
      ctx[7].name ? "bn-notify-".concat(
      /*$app*/
      ctx[7].name) : "") + " svelte-166mr51");
      toggle_class(li, "bn-notify-dark-mode",
      /*$app*/
      ctx[7].darkMode);
      toggle_class(li, "bn-notify-clickable",
      /*notification*/
      ctx[15].onclick);
      this.first = li;
    },
    m: function m(target, anchor) {
      insert(target, li, anchor);
      mount_component(typeicon, li, null);
      append(li, t0);
      mount_component(notificationcontent, li, null);
      append(li, t1);
      append(li, div);
      mount_component(closeicon, div, null);
      append(li, t2);
      mount_component(autodismiss, li, null);
      append(li, t3);
      current = true;
      dispose = [listen(div, "click", click_handler), listen(li, "click", click_handler_1)];
    },
    p: function p(new_ctx, dirty) {
      ctx = new_ctx;
      var typeicon_changes = {};
      if (dirty &
      /*$notifications*/
      64) typeicon_changes.type =
      /*notification*/
      ctx[15].type;
      typeicon.$set(typeicon_changes);
      var notificationcontent_changes = {};
      if (dirty &
      /*$notifications*/
      64) notificationcontent_changes.notification =
      /*notification*/
      ctx[15];
      if (dirty &
      /*currentTime*/
      32) notificationcontent_changes.currentTime =
      /*currentTime*/
      ctx[5];
      notificationcontent.$set(notificationcontent_changes);

      if (!current || dirty &
      /*$app*/
      128 && div_class_value !== (div_class_value = "bn-notify-custom bn-notify-notification-close " + (
      /*$app*/
      ctx[7].name ? "bn-notify-".concat(
      /*$app*/
      ctx[7].name) : "") + " svelte-166mr51")) {
        attr(div, "class", div_class_value);
      }

      var autodismiss_changes = {};
      if (dirty &
      /*$notifications*/
      64) autodismiss_changes.notification =
      /*notification*/
      ctx[15];
      autodismiss.$set(autodismiss_changes);

      if (!current || dirty &
      /*notificationMargin*/
      8) {
        attr(li, "style",
        /*notificationMargin*/
        ctx[3]);
      }

      if (!current || dirty &
      /*$app*/
      128 && li_class_value !== (li_class_value = "bn-notify-custom bn-notify-notification " + (
      /*$app*/
      ctx[7].name ? "bn-notify-".concat(
      /*$app*/
      ctx[7].name) : "") + " svelte-166mr51")) {
        attr(li, "class", li_class_value);
      }

      if (dirty &
      /*$app, $app*/
      128) {
        toggle_class(li, "bn-notify-dark-mode",
        /*$app*/
        ctx[7].darkMode);
      }

      if (dirty &
      /*$app, $notifications*/
      192) {
        toggle_class(li, "bn-notify-clickable",
        /*notification*/
        ctx[15].onclick);
      }
    },
    r: function r() {
      rect = li.getBoundingClientRect();
    },
    f: function f() {
      fix_position(li);
      stop_animation();
      add_transform(li, rect);
    },
    a: function a() {
      stop_animation();
      stop_animation = create_animation(li, rect, flip, {
        duration: 500
      });
    },
    i: function i(local) {
      if (current) return;
      transition_in(typeicon.$$.fragment, local);
      transition_in(notificationcontent.$$.fragment, local);
      transition_in(closeicon.$$.fragment, local);
      transition_in(autodismiss.$$.fragment, local);
      add_render_callback(function () {
        if (li_outro) li_outro.end(1);
        if (!li_intro) li_intro = create_in_transition(li, fly, {
          duration: 1200,
          delay: 300,
          x:
          /*x*/
          ctx[1],
          y:
          /*y*/
          ctx[2],
          easing: elasticOut
        });
        li_intro.start();
      });
      current = true;
    },
    o: function o(local) {
      transition_out(typeicon.$$.fragment, local);
      transition_out(notificationcontent.$$.fragment, local);
      transition_out(closeicon.$$.fragment, local);
      transition_out(autodismiss.$$.fragment, local);
      if (li_intro) li_intro.invalidate();
      li_outro = create_out_transition(li, fly, {
        duration: 400,
        x:
        /*x*/
        ctx[1],
        y:
        /*y*/
        ctx[2],
        easing: quintIn
      });
      current = false;
    },
    d: function d(detaching) {
      if (detaching) detach(li);
      destroy_component(typeicon);
      destroy_component(notificationcontent);
      destroy_component(closeicon);
      destroy_component(autodismiss);
      if (detaching && li_outro) li_outro.end();
      run_all(dispose);
    }
  };
}

function create_fragment$7(ctx) {
  var if_block_anchor;
  var current;
  var if_block =
  /*$notifications*/
  ctx[6].length > 0 && create_if_block$2(ctx);
  return {
    c: function c() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    m: function m(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p: function p(ctx, _ref26) {
      var _ref27 = _slicedToArray(_ref26, 1),
          dirty = _ref27[0];

      if (
      /*$notifications*/
      ctx[6].length > 0) {
        if (if_block) {
          if_block.p(ctx, dirty);
          transition_in(if_block, 1);
        } else {
          if_block = create_if_block$2(ctx);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, function () {
          if_block = null;
        });
        check_outros();
      }
    },
    i: function i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o: function o(local) {
      transition_out(if_block);
      current = false;
    },
    d: function d(detaching) {
      if (if_block) if_block.d(detaching);
      if (detaching) detach(if_block_anchor);
    }
  };
}

function elasticOut(t) {
  return Math.sin(-13 * (t + 1) * Math.PI / 2) * Math.pow(2, -35 * t) + 1;
}

function instance$7($$self, $$props, $$invalidate) {
  var $notifications;
  var $app;
  component_subscribe($$self, notifications, function ($$value) {
    return $$invalidate(6, $notifications = $$value);
  });
  component_subscribe($$self, app, function ($$value) {
    return $$invalidate(7, $app = $$value);
  });
  var smallScreen = window.outerWidth < 450;
  var positioning;
  var x;
  var y;
  var notificationMargin;
  var justifyContent;
  var appState = {
    version: "",
    dappId: "",
    networkId: 1,
    nodeSynced: true,
    mobilePosition: "top",
    desktopPosition: "bottomRight",
    darkMode: false,
    txApproveReminderTimeout: 20000,
    txStallPendingTimeout: 20000,
    txStallConfirmedTimeout: 90000
  };
  var unsubscribe = app.subscribe(function (store) {
    return $$invalidate(10, appState = store);
  }); // listen for screen resize events

  window.addEventListener("resize", debounce(function () {
    if (window.outerWidth < 450) {
      if (!smallScreen) {
        $$invalidate(9, smallScreen = true);
      }
    } else {
      if (smallScreen) {
        $$invalidate(9, smallScreen = false);
      }
    }
  }, 300));
  var currentTime = Date.now();
  var intervalId = setInterval(function () {
    $$invalidate(5, currentTime = Date.now());
  }, 1000);
  onDestroy(function () {
    clearInterval(intervalId);
    unsubscribe();
  });
  var formattedTime = formatTime(currentTime);

  var click_handler = function click_handler(notification) {
    return notifications.remove(notification.id, notification.eventCode);
  };

  var click_handler_1 = function click_handler_1(notification) {
    return notification.onclick && notification.onclick();
  };

  $$self.$$.update = function () {
    if ($$self.$$.dirty &
    /*appState, smallScreen, positioning*/
    1537) {
      if (appState.desktopPosition && !smallScreen) {
        $$invalidate(0, positioning = appState.desktopPosition === "bottomRight" ? "bottom: 0; right: 0;" : appState.desktopPosition === "bottomLeft" ? "left: 0; right: unset;" : appState.desktopPosition === "topRight" ? "top: 0;" : "top: 0; bottom: unset; left: 0; right: unset;");
        $$invalidate(1, x = positioning && positioning.includes("left") ? -321 : 321);
        $$invalidate(2, y = 0);

        if (appState.desktopPosition.includes("top")) {
          $$invalidate(4, justifyContent = "justify-content: unset;");
          $$invalidate(3, notificationMargin = "margin: 0.75rem 0 0 0;");
        } else {
          $$invalidate(4, justifyContent = "justify-content: flex-end;");
          $$invalidate(3, notificationMargin = "margin: 0 0 0.75rem 0;");
        }
      }
    }

    if ($$self.$$.dirty &
    /*appState, smallScreen*/
    1536) {
      if (appState.mobilePosition && smallScreen) {
        $$invalidate(0, positioning = appState.mobilePosition === "top" ? "top: 0; bottom: unset;" : "bottom: 0; top: unset;");
        $$invalidate(1, x = 0);

        if (appState.mobilePosition === "top") {
          $$invalidate(2, y = -50);
          $$invalidate(4, justifyContent = "justify-content: unset;");
          $$invalidate(3, notificationMargin = "margin: 0.75rem 0 0 0;");
        } else {
          $$invalidate(2, y = 50);
          $$invalidate(4, justifyContent = "justify-content: flex-end;");
          $$invalidate(3, notificationMargin = "margin: 0 0 0.75rem 0;");
        }
      }
    }

    if ($$self.$$.dirty &
    /*appState, smallScreen*/
    1536) {
      if (!appState.desktopPosition && !appState.mobilePosition) {
        $$invalidate(1, x = smallScreen ? 0 : 321);
        $$invalidate(2, y = smallScreen ? 50 : 0);
        $$invalidate(3, notificationMargin = "margin: 0 0 0.75rem 0;");
        $$invalidate(4, justifyContent = "justify-content: flex-end;");
        $$invalidate(0, positioning = "bottom: 0; right: 0;");
      }
    }
  };

  return [positioning, x, y, notificationMargin, justifyContent, currentTime, $notifications, $app, formattedTime, smallScreen, appState, unsubscribe, intervalId, click_handler, click_handler_1];
}

var Notify = /*#__PURE__*/function (_SvelteComponent9) {
  _inherits(Notify, _SvelteComponent9);

  function Notify(options) {
    var _this11;

    _classCallCheck(this, Notify);

    _this11 = _possibleConstructorReturn(this, _getPrototypeOf(Notify).call(this));
    if (!document.getElementById("svelte-166mr51-style")) add_css$7();
    init(_assertThisInitialized(_this11), options, instance$7, create_fragment$7, safe_not_equal, {});
    return _this11;
  }

  return Notify;
}(SvelteComponent);

function eventToType(eventCode) {
  switch (eventCode) {
    case 'txSent':
    case 'txPool':
    case 'txSpeedUp':
    case 'txCancel':
      return 'pending';

    case 'txRequest':
    case 'txRepeat':
    case 'txAwaitingApproval':
    case 'txConfirmReminder':
    case 'txStallPending':
    case 'txStallConfirmed':
      return 'hint';

    case 'txError':
    case 'txSendFail':
    case 'txFailed':
    case 'txDropped':
    case 'nsfFail':
    case 'txUnderpriced':
      return 'error';

    case 'txConfirmed':
      return 'success';

    default:
      return 'hint';
  }
}

function typeToDismissTimeout(type) {
  switch (type) {
    case 'success':
    case 'hint':
      return 4000;

    default:
      return 0;
  }
} // subscribe to the formatter store


var formatter;
Bt.subscribe(function (store) {
  return formatter = store;
});

function createNotification(details) {
  var customization = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var id = details.id,
      hash = details.hash,
      startTime = details.startTime,
      eventCode = details.eventCode,
      direction = details.direction,
      counterparty = details.counterparty,
      value = details.value,
      asset = details.asset;
  var type = eventToType(eventCode);
  var key = "".concat(id, "-").concat(_typeof(customization) === 'object' && customization.eventCode || eventCode);
  var counterpartyShortened = counterparty && counterparty.substring(0, 4) + '...' + counterparty.substring(counterparty.length - 4);
  var formattedValue = new BigNumber(value || 0).div(new BigNumber('1000000000000000000')).toString(10);
  var formatterOptions = counterparty && value ? {
    messageId: "watched['".concat(eventCode, "']"),
    values: {
      verb: eventCode === 'txConfirmed' ? direction === 'incoming' ? 'received' : 'sent' : direction === 'incoming' ? 'receiving' : 'sending',
      formattedValue: formattedValue,
      preposition: direction === 'incoming' ? 'from' : 'to',
      counterpartyShortened: counterpartyShortened,
      asset: asset
    }
  } : {
    messageId: "transaction['".concat(eventCode, "']"),
    values: {
      formattedValue: formattedValue,
      asset: asset
    }
  };
  var internationalizedMessage = formatter(formatterOptions.messageId, {
    values: formatterOptions.values
  });
  var noMessageAvailable = internationalizedMessage === formatterOptions.messageId;
  var message = noMessageAvailable ? defaultNotifyMessages.en[counterparty ? 'watched' : 'transaction'][eventCode || ''] : internationalizedMessage;
  var notificationObject = {
    id: id || hash,
    type: type,
    key: key,
    startTime: startTime,
    eventCode: eventCode,
    message: message,
    autoDismiss: typeToDismissTimeout(_typeof(customization) === 'object' && customization.type || type)
  };

  if (_typeof(customization) === 'object') {
    notificationObject = _objectSpread({}, notificationObject, {}, customization);
  }

  notifications.add(notificationObject);
}

var validInitKeys = ['dappId', 'networkId', 'transactionHandler', 'name', 'mobilePosition', 'desktopPosition', 'darkMode', 'txApproveReminderTimeout', 'txStallPendingTimeout', 'txStallConfirmedTimeout', 'notifyMessages', 'clientLocale'];
var validNotificationKeys = ['eventCode', 'type', 'message', 'autoDismiss', 'onclick'];
var validTransactionKeys = ['sendTransaction', 'estimateGas', 'gasPrice', 'balance', 'contractCall', 'txDetails'];

function invalidParams(params, validParams, functionName) {
  var invalid = Object.keys(params);

  if (invalid.length > 0) {
    throw new Error("".concat(invalid[0], " is not a valid parameter for ").concat(functionName, ", must be one of the following valid parameters: ").concat(validParams.join(', ')));
  }
}

function validateType(_ref28) {
  var name = _ref28.name,
      value = _ref28.value,
      type = _ref28.type,
      optional = _ref28.optional,
      customValidation = _ref28.customValidation;

  if (!optional && typeof value === 'undefined') {
    throw new Error("\"".concat(name, "\" is required"));
  }

  if (typeof value !== 'undefined' && (type === 'array' ? Array.isArray(type) : _typeof(value) !== type)) {
    throw new Error("\"".concat(name, "\" must be of type: ").concat(type, ", received type: ").concat(_typeof(value), " from value: ").concat(value));
  }

  if (typeof value !== 'undefined' && customValidation) {
    customValidation(value);
  }
}

function validateInit(init) {
  validateType({
    name: 'init',
    value: init,
    type: 'object'
  });

  var dappId = init.dappId,
      networkId = init.networkId,
      transactionHandler = init.transactionHandler,
      name = init.name,
      apiUrl = init.apiUrl,
      otherParams = _objectWithoutProperties(init, ["dappId", "networkId", "transactionHandler", "name", "apiUrl"]);

  validateType({
    name: 'dappId',
    value: dappId,
    type: 'string'
  });
  validateType({
    name: 'networkId',
    value: networkId,
    type: 'number'
  });
  validateType({
    name: 'name',
    value: name,
    type: 'string',
    optional: true
  });
  validateType({
    name: 'apiUrl',
    value: apiUrl,
    type: 'string',
    optional: true
  });
  validateType({
    name: 'transactionHandler',
    value: transactionHandler,
    type: 'function',
    optional: true
  });
  validateConfig(otherParams);
}

function stringOrNumber(val) {
  return typeof val === 'string' || typeof val === 'number';
}

function validateTransactionOptions(options) {
  validateType({
    name: 'transaction options',
    value: options,
    type: 'object'
  });

  var sendTransaction = options.sendTransaction,
      estimateGas = options.estimateGas,
      gasPrice = options.gasPrice,
      balance = options.balance,
      contractCall = options.contractCall,
      txDetails = options.txDetails,
      otherParams = _objectWithoutProperties(options, ["sendTransaction", "estimateGas", "gasPrice", "balance", "contractCall", "txDetails"]);

  invalidParams(otherParams, validTransactionKeys, 'Transaction Options');
  validateType({
    name: 'sendTransaction',
    value: sendTransaction,
    type: 'function',
    optional: true
  });
  validateType({
    name: 'estimateGas',
    value: estimateGas,
    type: 'function',
    optional: true
  });
  validateType({
    name: 'gasPrice',
    value: gasPrice,
    type: 'function',
    optional: true
  });
  validateType({
    name: 'balance',
    value: balance,
    type: 'string',
    optional: true
  });
  validateType({
    name: 'contractCall',
    value: contractCall,
    type: 'object',
    optional: true
  });

  if (contractCall) {
    var methodName = contractCall.methodName,
        params = contractCall.params,
        _otherParams = _objectWithoutProperties(contractCall, ["methodName", "params"]);

    invalidParams(_otherParams, ['methodName', 'params'], 'contractCall');
    validateType({
      name: 'methodName',
      value: methodName,
      type: 'string',
      optional: true
    });
    validateType({
      name: 'params',
      value: params,
      type: 'array',
      optional: true
    });
  }

  validateType({
    name: 'txDetails',
    value: txDetails,
    type: 'object',
    optional: true
  });

  if (txDetails) {
    var to = txDetails.to,
        value = txDetails.value,
        from = txDetails.from,
        _otherParams2 = _objectWithoutProperties(txDetails, ["to", "value", "from"]);

    invalidParams(_otherParams2, ['to', 'value', 'from'], 'txDetails');
    validateType({
      name: 'to',
      value: to,
      type: 'string',
      optional: true,
      customValidation: isAddress
    });

    if (typeof value !== 'undefined' && !stringOrNumber(value)) {
      throw new Error("\"value\" must be of type: string | number, received type: ".concat(_typeof(value), " from value: ").concat(value));
    }

    validateType({
      name: 'from',
      value: from,
      type: 'string',
      optional: true,
      customValidation: isAddress
    });
  }
}

function validateNotificationObject(notification) {
  validateType({
    name: 'notification',
    value: notification,
    type: 'object'
  });
  if (_typeof(notification) !== 'object') return;

  var eventCode = notification.eventCode,
      type = notification.type,
      message = notification.message,
      autoDismiss = notification.autoDismiss,
      onclick = notification.onclick,
      otherParams = _objectWithoutProperties(notification, ["eventCode", "type", "message", "autoDismiss", "onclick"]);

  invalidParams(otherParams, validNotificationKeys, 'notification');
  validateType({
    name: 'eventCode',
    value: eventCode,
    type: 'string',
    optional: true
  });
  validateType({
    name: 'type',
    value: type,
    type: 'string',
    optional: true,
    customValidation: validNotificationType
  });
  validateType({
    name: 'message',
    value: message,
    type: 'string'
  });
  validateType({
    name: 'autoDismiss',
    value: autoDismiss,
    type: 'number',
    optional: true
  });
  validateType({
    name: 'onclick',
    value: onclick,
    type: 'function',
    optional: true
  });
}

function validateConfig(config) {
  validateType({
    name: 'config',
    value: config,
    type: 'object'
  });

  var mobilePosition = config.mobilePosition,
      desktopPosition = config.desktopPosition,
      darkMode = config.darkMode,
      notifyMessages = config.notifyMessages,
      clientLocale = config.clientLocale,
      txApproveReminderTimeout = config.txApproveReminderTimeout,
      txStallPendingTimeout = config.txStallPendingTimeout,
      txStallConfirmedTimeout = config.txStallConfirmedTimeout,
      otherParams = _objectWithoutProperties(config, ["mobilePosition", "desktopPosition", "darkMode", "notifyMessages", "clientLocale", "txApproveReminderTimeout", "txStallPendingTimeout", "txStallConfirmedTimeout"]);

  invalidParams(otherParams, validInitKeys, 'config / initialize');
  validateType({
    name: 'mobilePosition',
    value: mobilePosition,
    type: 'string',
    optional: true,
    customValidation: validMobilePosition
  });
  validateType({
    name: 'desktopPosition',
    value: desktopPosition,
    type: 'string',
    optional: true,
    customValidation: validDesktopPosition
  });
  validateType({
    name: 'darkMode',
    value: darkMode,
    type: 'boolean',
    optional: true
  });
  validateType({
    name: 'notifyMessages',
    value: notifyMessages,
    type: 'object',
    optional: true
  });

  if (notifyMessages) {
    Object.keys(notifyMessages).forEach(function (locale) {
      validateType({
        name: locale,
        value: notifyMessages[locale],
        type: 'object'
      });

      var _notifyMessages$local = notifyMessages[locale],
          transaction = _notifyMessages$local.transaction,
          watched = _notifyMessages$local.watched,
          otherParams = _objectWithoutProperties(_notifyMessages$local, ["transaction", "watched"]);

      invalidParams(otherParams, ['transaction', 'watched'], locale);
      validateType({
        name: "notifyMessages.".concat(locale, ".transaction"),
        value: transaction,
        type: 'object'
      });
      validateType({
        name: "notifyMessages.".concat(locale, ".watched"),
        value: watched,
        type: 'object'
      });
    });
  }

  validateType({
    name: 'clientLocale',
    value: clientLocale,
    type: 'string',
    optional: true
  });
  validateType({
    name: 'txApproveReminderTimeout',
    value: txApproveReminderTimeout,
    type: 'number',
    optional: true
  });
  validateType({
    name: 'txStallPendingTimeout',
    value: txStallPendingTimeout,
    type: 'number',
    optional: true
  });
  validateType({
    name: 'txStallConfirmedTimeout',
    value: txStallConfirmedTimeout,
    type: 'number',
    optional: true
  });
}

function validNotificationType(type) {
  switch (type) {
    case 'hint':
    case 'pending':
    case 'error':
    case 'success':
      return;

    default:
      throw new Error("".concat(type, " is not a valid notification type, must be one of: 'hint', 'pending', 'error' or 'success'."));
  }
}

function validMobilePosition(position) {
  switch (position) {
    case 'top':
    case 'bottom':
      return;

    default:
      throw new Error("".concat(position, " is not a valid mobile notification position, must be one of: 'top' or 'bottom'."));
  }
}

function validDesktopPosition(position) {
  switch (position) {
    case 'bottomLeft':
    case 'bottomRight':
    case 'topLeft':
    case 'topRight':
      return;

    default:
      throw new Error("".concat(position, " is not a valid desktop notification position, must be one of: 'bottomLeft', 'bottomRight', 'topLeft' or 'topRight'."));
  }
}

function isAddress(address) {
  if (!/^(0x)?[0-9a-fA-F]{40}$/.test(address)) {
    throw new Error("".concat(address, " is not a valid ethereum address."));
  }
}

var blocknative;

function getBlocknative(options) {
  if (!blocknative && options) {
    blocknative = new BlocknativeSdk(options);
  }

  return blocknative;
}

var transactionQueue;
transactions.subscribe(function (store) {
  return transactionQueue = store;
});

function handlePreFlightEvent(preflightEvent) {
  var eventCode = preflightEvent.eventCode,
      contractCall = preflightEvent.contractCall,
      balance = preflightEvent.balance,
      txDetails = preflightEvent.txDetails,
      emitter = preflightEvent.emitter,
      status = preflightEvent.status;
  var blocknative = getBlocknative();
  blocknative.event({
    categoryCode: contractCall ? 'activeContract' : 'activeTransaction',
    eventCode: eventCode,
    transaction: txDetails,
    wallet: {
      balance: balance
    },
    contract: contractCall
  });

  var transaction = _objectSpread({}, txDetails, {
    eventCode: eventCode,
    status: status,
    contractCall: contractCall
  });

  var emitterResult = emitter.emit(transaction);

  if (emitterResult) {
    validateNotificationObject(emitterResult);
  }

  handleTransactionEvent({
    transaction: transaction,
    emitterResult: emitterResult
  });
}

function handleTransactionEvent(event) {
  var transaction = event.transaction,
      emitterResult = event.emitterResult;
  transactions.updateQueue(transaction); // create notification if dev hasn't opted out

  if (emitterResult !== false) {
    var transactionObj = transactionQueue.find(function (tx) {
      return tx.id === transaction.id;
    });

    if (transactionObj) {
      createNotification(transactionObj, emitterResult);
    }
  }
}

function duplicateTransactionCandidate(transaction, contract) {
  var duplicate = transactionQueue.find(function (tx) {
    if (contract && typeof tx.contractCall === 'undefined') return false;
    var sameMethod = contract ? contract.methodName === (tx.contractCall && tx.contractCall.methodName) : true;
    var sameParams = contract ? argsEqual(contract.params, tx.contractCall && tx.contractCall.params) : true;
    var sameVal = tx.value == transaction.value;
    var sameTo = contract ? sameMethod : tx.to && tx.to.toLowerCase() === transaction.to && transaction.to.toLowerCase();
    return sameMethod && sameParams && sameVal && sameTo;
  });

  if (duplicate && (duplicate.status === 'confirmed' || duplicate.status === 'failed')) {
    duplicate = false;
  }

  return duplicate;
}

function preflightTransaction(options, emitter) {
  return new Promise(function (resolve, reject) {
    // wrap in set timeout to put to the end of the event queue
    setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var sendTransaction, estimateGas, gasPrice, balance, contractCall, txDetails, blocknative, _ref30, _ref31, gas, price, id, value, calculated, txObject, transactionCost, eventCode, _eventCode, _get_store_value, txApproveReminderTimeout, txStallPendingTimeout, txStallConfirmedTimeout, _eventCode2, sendTransactionResult, hash, _extractMessageFromEr, _eventCode4, errorMsg, serverEmitter;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              sendTransaction = options.sendTransaction, estimateGas = options.estimateGas, gasPrice = options.gasPrice, balance = options.balance, contractCall = options.contractCall, txDetails = options.txDetails;
              blocknative = getBlocknative(); //=== if `balance` or `estimateGas` or `gasPrice` is not provided, then sufficient funds check is disabled === //
              //=== if `txDetails` is not provided, then duplicate transaction check is disabled === //
              //== if dev doesn't want notify to intiate the transaction and `sendTransaction` is not provided, then transaction rejected notification is disabled ==//
              //=== to disable hints for `txAwaitingApproval`, `txConfirmReminder` or any other notification, then return false from listener functions ==//

              _context.next = 4;
              return gasEstimates(estimateGas, gasPrice);

            case 4:
              _ref30 = _context.sent;
              _ref31 = _slicedToArray(_ref30, 2);
              gas = _ref31[0];
              price = _ref31[1];
              id = uuid();
              value = new BigNumber(txDetails && txDetails.value || 0);
              calculated = {
                value: value.toString(10),
                gas: gas && gas.toString(10),
                gasPrice: price && price.toString(10)
              };
              txObject = txDetails ? _objectSpread({}, txDetails, {}, calculated, {
                id: id
              }) : _objectSpread({}, calculated, {
                id: id
              }); // check sufficient balance if required parameters are available

              if (!(balance && gas && price)) {
                _context.next = 18;
                break;
              }

              transactionCost = gas.times(price).plus(value); // if transaction cost is greater than the current balance

              if (!transactionCost.gt(new BigNumber(balance))) {
                _context.next = 18;
                break;
              }

              eventCode = 'nsfFail';
              handlePreFlightEvent({
                eventCode: eventCode,
                contractCall: contractCall,
                balance: balance,
                txDetails: txObject,
                emitter: emitter
              });
              return _context.abrupt("return", reject('User has insufficient funds'));

            case 18:
              // check if it is a duplicate transaction
              if (txDetails && duplicateTransactionCandidate({
                to: txDetails.to,
                value: txDetails.value
              }, contractCall)) {
                _eventCode = 'txRepeat';
                handlePreFlightEvent({
                  eventCode: _eventCode,
                  contractCall: contractCall,
                  balance: balance,
                  txDetails: txObject,
                  emitter: emitter
                });
              }

              _get_store_value = get_store_value(app), txApproveReminderTimeout = _get_store_value.txApproveReminderTimeout, txStallPendingTimeout = _get_store_value.txStallPendingTimeout, txStallConfirmedTimeout = _get_store_value.txStallConfirmedTimeout; // check previous transactions awaiting approval

              if (transactionQueue.find(function (tx) {
                return tx.status === 'awaitingApproval';
              })) {
                _eventCode2 = 'txAwaitingApproval';
                handlePreFlightEvent({
                  eventCode: _eventCode2,
                  contractCall: contractCall,
                  balance: balance,
                  txDetails: txObject,
                  emitter: emitter
                });
              } // confirm reminder after timeout


              setTimeout(function () {
                var awaitingApproval = transactionQueue.find(function (tx) {
                  return tx.id === id && tx.status === 'awaitingApproval';
                });

                if (awaitingApproval) {
                  var _eventCode3 = 'txConfirmReminder';
                  handlePreFlightEvent({
                    eventCode: _eventCode3,
                    contractCall: contractCall,
                    balance: balance,
                    txDetails: txObject,
                    emitter: emitter
                  });
                }
              }, txApproveReminderTimeout);
              handlePreFlightEvent({
                eventCode: 'txRequest',
                status: 'awaitingApproval',
                contractCall: contractCall,
                balance: balance,
                txDetails: txObject,
                emitter: emitter
              });
              resolve(id); // if not provided with sendTransaction function, resolve with id so dev can initiate transaction
              // dev will need to call notify.hash(txHash, id) with this id to link up the preflight with the postflight notifications

              if (sendTransaction) {
                _context.next = 26;
                break;
              }

              return _context.abrupt("return");

            case 26:
              // initiate transaction
              sendTransactionResult = sendTransaction(); // get result and handle errors

              _context.prev = 27;
              _context.next = 30;
              return sendTransactionResult;

            case 30:
              hash = _context.sent;
              _context.next = 38;
              break;

            case 33:
              _context.prev = 33;
              _context.t0 = _context["catch"](27);
              _extractMessageFromEr = extractMessageFromError(_context.t0), _eventCode4 = _extractMessageFromEr.eventCode, errorMsg = _extractMessageFromEr.errorMsg;
              handlePreFlightEvent({
                eventCode: _eventCode4,
                status: 'failed',
                contractCall: contractCall,
                balance: balance,
                txDetails: txObject,
                emitter: emitter
              });
              return _context.abrupt("return", reject(errorMsg));

            case 38:
              if (!(hash && typeof hash === 'string')) {
                _context.next = 45;
                break;
              }

              serverEmitter = blocknative.transaction(hash, id).emitter;
              serverEmitter.on('all', function (transaction) {
                var result = emitter.emit(transaction);
                return result;
              }); // Check for pending stall status

              setTimeout(function () {
                var transaction = transactionQueue.find(function (tx) {
                  return tx.id === id;
                });

                if (transaction && transaction.status === 'sent' && blocknative.status.connected && blocknative.status.nodeSynced) {
                  var _eventCode5 = 'txStallPending';
                  handlePreFlightEvent({
                    eventCode: _eventCode5,
                    contractCall: contractCall,
                    balance: balance,
                    txDetails: txObject,
                    emitter: emitter
                  });
                }
              }, txStallPendingTimeout); // Check for confirmed stall status

              setTimeout(function () {
                var transaction = transactionQueue.find(function (tx) {
                  return tx.id === id;
                });

                if (transaction && transaction.status === 'pending' && blocknative.status.connected && blocknative.status.nodeSynced) {
                  var _eventCode6 = 'txStallConfirmed';
                  handlePreFlightEvent({
                    eventCode: _eventCode6,
                    contractCall: contractCall,
                    balance: balance,
                    txDetails: txObject,
                    emitter: emitter
                  });
                }
              }, txStallConfirmedTimeout);
              _context.next = 46;
              break;

            case 45:
              throw new Error('sendTransaction function must resolve to a transaction hash that is of type String.');

            case 46:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[27, 33]]);
    })), 10);
  });
}

function gasEstimates(gasFunc, gasPriceFunc) {
  if (!gasFunc || !gasPriceFunc) {
    return Promise.resolve([]);
  }

  var gasProm = gasFunc();

  if (!gasProm.then) {
    throw new Error('The `estimateGas` function must return a Promise');
  }

  var gasPriceProm = gasPriceFunc();

  if (!gasPriceProm.then) {
    throw new Error('The `gasPrice` function must return a Promise');
  }

  return Promise.all([gasProm, gasPriceProm]).then(function (_ref32) {
    var _ref33 = _slicedToArray(_ref32, 2),
        gasResult = _ref33[0],
        gasPriceResult = _ref33[1];

    if (typeof gasResult !== 'string') {
      throw new Error("The Promise returned from calling 'estimateGas' must resolve with a value of type 'string'. Received a value of: ".concat(gasResult, " with a type: ").concat(_typeof(gasResult)));
    }

    if (typeof gasPriceResult !== 'string') {
      throw new Error("The Promise returned from calling 'gasPrice' must resolve with a value of type 'string'. Received a value of: ".concat(gasPriceResult, " with a type: ").concat(_typeof(gasPriceResult)));
    }

    return [new BigNumber(gasResult), new BigNumber(gasPriceResult)];
  })["catch"](function (error) {
    throw new Error("There was an error getting gas estimates: ".concat(error));
  });
}

var version = "1.1.2";
var notify;

function init$1(options) {
  if (notify) {
    console.warn('notify has already been initialized');
    notify.$destroy();
  }

  validateInit(options);
  var dappId = options.dappId,
      networkId = options.networkId,
      transactionHandler = options.transactionHandler,
      name = options.name,
      apiUrl = options.apiUrl;
  var transactionHandlers = [handleTransactionEvent];

  if (transactionHandler) {
    transactionHandlers.push(transactionHandler);
  }

  var blocknative = getBlocknative({
    dappId: dappId,
    networkId: networkId,
    transactionHandlers: transactionHandlers,
    name: name || 'Notify',
    apiUrl: apiUrl
  }); // save config to app store

  app.update(function (store) {
    return _objectSpread({}, store, {}, options, {
      version: version,
      clientLocale: Ct({
        fallback: 'en',
        navigator: true
      })
    });
  }); // initialize App

  notify = new Notify({
    target: document.body
  });
  app.subscribe(function (store) {
    var notifyMessages = store.notifyMessages,
        clientLocale = store.clientLocale; // set the dictionary for i18n

    Nt.set(notifyMessages);
    var availableLocale = notifyMessages[clientLocale] || notifyMessages[clientLocale.slice(0, 2)];
    Tt.set(availableLocale ? clientLocale : 'en');
  });
  return {
    hash: hash,
    transaction: transaction,
    account: account,
    unsubscribe: unsubscribe,
    notification: notification,
    config: config
  };

  function account(address) {
    try {
      var result = blocknative.account(address);
      return result;
    } catch (error) {
      throw new Error(error);
    }
  }

  function hash(hash, id) {
    try {
      var result = blocknative.transaction(hash, id);
      return result;
    } catch (error) {
      throw new Error(error);
    }
  }

  function transaction(options) {
    validateTransactionOptions(options);
    var emitter = createEmitter();
    var result = preflightTransaction(options, emitter);
    return {
      emitter: emitter,
      result: result
    };
  }

  function unsubscribe(addressOrHash) {
    blocknative.unsubscribe(addressOrHash);
  }

  function notification(notificationObject) {
    validateNotificationObject(notificationObject);
    var key = 0;
    var id = uuid();
    var startTime = Date.now();
    var _notificationObject$e = notificationObject.eventCode,
        eventCode = _notificationObject$e === void 0 ? "customNotification".concat(key++) : _notificationObject$e;

    var dismiss = function dismiss() {
      return notifications.remove(id, eventCode);
    };

    function update(notificationUpdate) {
      validateNotificationObject(notificationUpdate);
      var _notificationUpdate$e = notificationUpdate.eventCode,
          eventCode = _notificationUpdate$e === void 0 ? "customNotification".concat(key++) : _notificationUpdate$e;
      createNotification({
        id: id,
        startTime: startTime,
        eventCode: eventCode
      }, notificationUpdate);
      return {
        dismiss: dismiss,
        update: update
      };
    }

    createNotification({
      id: id,
      startTime: startTime,
      eventCode: eventCode
    }, notificationObject);
    return {
      dismiss: dismiss,
      update: update
    };
  }

  function config(options) {
    validateConfig(options);

    var notifyMessages = options.notifyMessages,
        otherOptions = _objectWithoutProperties(options, ["notifyMessages"]);

    app.update(function (store) {
      return _objectSpread({}, store, {}, otherOptions, {
        notifyMessages: notifyMessages ? _objectSpread({}, store.notifyMessages, {}, notifyMessages) : store.notifyMessages
      });
    });
  }
}

export default init$1;
