{"ast":null,"code":"var _jsxFileName = \"/Users/ken/Documents/scaffold-eth/packages/react-app/src/components/Account.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { ethers } from \"ethers\";\nimport BurnerProvider from 'burner-provider';\nimport Web3Modal from \"web3modal\";\nimport { Balance, Address } from \".\";\nimport { usePoller } from \"../hooks\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { Button, Typography } from 'antd';\nconst {\n  Text\n} = Typography;\nconst INFURA_ID = \"2717afb6bf164045b5d5468031b93f87\"; // MY INFURA_ID, SWAP IN YOURS!\n\nconst web3Modal = new Web3Modal({\n  //network: \"mainnet\", // optional\n  cacheProvider: true,\n  // optional\n  providerOptions: {\n    walletconnect: {\n      package: WalletConnectProvider,\n      // required\n      options: {\n        infuraId: INFURA_ID\n      }\n    }\n  }\n});\nexport default function Account(props) {\n  const createBurnerIfNoAddress = () => {\n    if (!props.injectedProvider && props.localProvider) {\n      if (props.localProvider.connection && props.localProvider.connection.url) {\n        props.setInjectedProvider(new ethers.providers.Web3Provider(new BurnerProvider(props.localProvider.connection.url)));\n      } else if (props.localProvider._network && props.localProvider._network.name) {\n        props.setInjectedProvider(new ethers.providers.Web3Provider(new BurnerProvider(\"https://\" + props.localProvider._network.name + \".infura.io/v3/\" + INFURA_ID)));\n      } else {\n        props.setInjectedProvider(new ethers.providers.Web3Provider(new BurnerProvider(\"https://mainnet.infura.io/v3/\" + INFURA_ID)));\n      }\n    } else {\n      pollInjectedProvider();\n    }\n  };\n\n  useEffect(createBurnerIfNoAddress, [props.injectedProvider]);\n\n  const pollInjectedProvider = async () => {\n    if (props.injectedProvider) {\n      let accounts = await props.injectedProvider.listAccounts();\n\n      if (accounts && accounts[0] && accounts[0] != props.account) {\n        //console.log(\"ADDRESS: \",accounts[0])\n        if (typeof props.setAddress == \"function\") props.setAddress(accounts[0]);\n      }\n    }\n  };\n\n  usePoller(() => {\n    pollInjectedProvider();\n  }, props.pollTime ? props.pollTime : 1999);\n\n  const loadWeb3Modal = async () => {\n    const provider = await web3Modal.connect(); //console.log(\"GOT CACHED PROVIDER FROM WEB3 MODAL\",provider)\n\n    props.setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    pollInjectedProvider();\n  };\n\n  const logoutOfWeb3Modal = async () => {\n    const clear = await web3Modal.clearCachedProvider(); //console.log(\"Cleared cache provider!?!\",clear)\n\n    setTimeout(() => {\n      window.location.reload();\n    }, 1);\n  };\n\n  let modalButtons = [];\n\n  if (web3Modal.cachedProvider) {\n    modalButtons.push( /*#__PURE__*/React.createElement(Button, {\n      key: \"logoutbutton\",\n      style: {\n        verticalAlign: \"top\",\n        marginLeft: 8,\n        marginTop: 4\n      },\n      shape: \"round\",\n      size: \"large\",\n      onClick: logoutOfWeb3Modal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }\n    }, \"logout\"));\n  } else {\n    modalButtons.push( /*#__PURE__*/React.createElement(Button, {\n      key: \"loginbutton\",\n      style: {\n        verticalAlign: \"top\",\n        marginLeft: 8,\n        marginTop: 4\n      },\n      shape: \"round\",\n      size: \"large\",\n      type: \"primary\",\n      onClick: loadWeb3Modal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }\n    }, \"connect\"));\n  }\n\n  React.useEffect(async () => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, props.address ? /*#__PURE__*/React.createElement(Address, {\n    value: props.address,\n    ensProvider: props.mainnetProvider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }) : \"Connecting...\", /*#__PURE__*/React.createElement(Balance, {\n    address: props.address,\n    provider: props.injectedProvider,\n    dollarMultiplier: props.price,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }), modalButtons);\n}","map":{"version":3,"sources":["/Users/ken/Documents/scaffold-eth/packages/react-app/src/components/Account.js"],"names":["React","useState","useEffect","useRef","ethers","BurnerProvider","Web3Modal","Balance","Address","usePoller","WalletConnectProvider","Button","Typography","Text","INFURA_ID","web3Modal","cacheProvider","providerOptions","walletconnect","package","options","infuraId","Account","props","createBurnerIfNoAddress","injectedProvider","localProvider","connection","url","setInjectedProvider","providers","Web3Provider","_network","name","pollInjectedProvider","accounts","listAccounts","account","setAddress","pollTime","loadWeb3Modal","provider","connect","logoutOfWeb3Modal","clear","clearCachedProvider","setTimeout","window","location","reload","modalButtons","cachedProvider","push","verticalAlign","marginLeft","marginTop","address","mainnetProvider","price"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { ethers } from \"ethers\";\nimport BurnerProvider from 'burner-provider';\nimport Web3Modal from \"web3modal\";\nimport { Balance, Address } from \".\"\nimport { usePoller } from \"../hooks\"\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { Button, Typography } from 'antd';\nconst { Text } = Typography;\n\nconst INFURA_ID = \"2717afb6bf164045b5d5468031b93f87\"  // MY INFURA_ID, SWAP IN YOURS!\n\nconst web3Modal = new Web3Modal({\n  //network: \"mainnet\", // optional\n  cacheProvider: true, // optional\n  providerOptions: {\n    walletconnect: {\n      package: WalletConnectProvider, // required\n      options: {\n        infuraId: INFURA_ID\n      }\n    }\n  }\n});\n\nexport default function Account(props) {\n\n  const createBurnerIfNoAddress = () => {\n    if (!props.injectedProvider && props.localProvider){\n      if(props.localProvider.connection && props.localProvider.connection.url){\n        props.setInjectedProvider(new ethers.providers.Web3Provider(new BurnerProvider(props.localProvider.connection.url)))\n      }else if( props.localProvider._network && props.localProvider._network.name ){\n        props.setInjectedProvider(new ethers.providers.Web3Provider(new BurnerProvider(\"https://\"+props.localProvider._network.name+\".infura.io/v3/\"+INFURA_ID)))\n      }else{\n        props.setInjectedProvider(new ethers.providers.Web3Provider(new BurnerProvider(\"https://mainnet.infura.io/v3/\"+INFURA_ID)))\n      }\n    }else{\n      pollInjectedProvider()\n    }\n  }\n  useEffect(createBurnerIfNoAddress, [props.injectedProvider]);\n\n  const pollInjectedProvider = async ()=>{\n    if(props.injectedProvider){\n      let accounts = await props.injectedProvider.listAccounts()\n      if(accounts && accounts[0] && accounts[0] != props.account){\n        //console.log(\"ADDRESS: \",accounts[0])\n        if(typeof props.setAddress == \"function\") props.setAddress(accounts[0])\n      }\n    }\n  }\n  usePoller(()=>{pollInjectedProvider()},props.pollTime?props.pollTime:1999)\n\n  const loadWeb3Modal = async ()=>{\n    const provider = await web3Modal.connect();\n    //console.log(\"GOT CACHED PROVIDER FROM WEB3 MODAL\",provider)\n    props.setInjectedProvider(new ethers.providers.Web3Provider(provider))\n    pollInjectedProvider()\n  }\n\n  const logoutOfWeb3Modal = async ()=>{\n    const clear = await web3Modal.clearCachedProvider();\n    //console.log(\"Cleared cache provider!?!\",clear)\n    setTimeout(()=>{\n      window.location.reload()\n    },1)\n  }\n\n  let modalButtons = []\n  if (web3Modal.cachedProvider) {\n    modalButtons.push(\n      <Button key=\"logoutbutton\" style={{verticalAlign:\"top\",marginLeft:8,marginTop:4}} shape={\"round\"} size={\"large\"}  onClick={logoutOfWeb3Modal}>logout</Button>\n    )\n  }else{\n    modalButtons.push(\n      <Button key=\"loginbutton\" style={{verticalAlign:\"top\",marginLeft:8,marginTop:4}} shape={\"round\"} size={\"large\"} type={\"primary\"} onClick={loadWeb3Modal}>connect</Button>\n    )\n  }\n\n  React.useEffect(async () => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal()\n    }\n  }, []);\n\n  return (\n    <div>\n      {props.address?(\n        <Address value={props.address} ensProvider={props.mainnetProvider}/>\n      ):\"Connecting...\"}\n      <Balance address={props.address} provider={props.injectedProvider} dollarMultiplier={props.price}/>\n      {modalButtons}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}