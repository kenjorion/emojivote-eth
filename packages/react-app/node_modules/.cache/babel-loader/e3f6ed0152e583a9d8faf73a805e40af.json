{"ast":null,"code":"var _jsxFileName = \"/Users/ken/Documents/scaffold-eth/packages/react-app/src/TimeReport.js\";\nimport React from 'react';\nimport { ethers } from \"ethers\";\nimport { useTimestamp } from \"./hooks\";\nimport { Card } from 'antd';\nexport default function TimeReport(props) {\n  // pick a time here: https://www.unixtimestamp.com/index.php and paste it here:\n  const TIME_WHEN_VOTES_WILL_BE_COUNTED = 10000;\n  const timestamp = useTimestamp(props.mainnetProvider);\n  const timeLeft = TIME_WHEN_VOTES_WILL_BE_COUNTED - timestamp;\n  let date = new Date(timestamp * 1000);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    title: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 11\n      }\n    }, \"\\uD83D\\uDD70  Votes will be counted:\"),\n    size: \"large\",\n    style: {\n      width: 550,\n      marginTop: 25\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 11\n    }\n  }, \"at mainnet timestamp: \", TIME_WHEN_VOTES_WILL_BE_COUNTED), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 11\n    }\n  }, \"current timestamp: \", timestamp), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 11\n    }\n  }, \"(\", prettyTimeFromNow(timeLeft), \" from now)\")));\n}\n\nfunction prettyTimeFromNow(timeLeft) {\n  var sec_num = timeLeft;\n  var hours = Math.floor(sec_num / 3600);\n  var minutes = Math.floor((sec_num - hours * 3600) / 60);\n  var seconds = sec_num - hours * 3600 - minutes * 60;\n\n  if (hours < 10) {\n    hours = \"0\" + hours;\n  }\n\n  if (minutes < 10) {\n    minutes = \"0\" + minutes;\n  }\n\n  if (seconds < 10) {\n    seconds = \"0\" + seconds;\n  }\n\n  return hours + ':' + minutes + ':' + seconds;\n}","map":{"version":3,"sources":["/Users/ken/Documents/scaffold-eth/packages/react-app/src/TimeReport.js"],"names":["React","ethers","useTimestamp","Card","TimeReport","props","TIME_WHEN_VOTES_WILL_BE_COUNTED","timestamp","mainnetProvider","timeLeft","date","Date","width","marginTop","prettyTimeFromNow","sec_num","hours","Math","floor","minutes","seconds"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,YAAT,QAA6B,SAA7B;AACA,SAASC,IAAT,QAAqB,MAArB;AAEA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAExC;AACA,QAAMC,+BAA+B,GAAG,KAAxC;AAEA,QAAMC,SAAS,GAAGL,YAAY,CAACG,KAAK,CAACG,eAAP,CAA9B;AACA,QAAMC,QAAQ,GAAGH,+BAA+B,GAAGC,SAAnD;AAEA,MAAIG,IAAI,GAAG,IAAIC,IAAJ,CAASJ,SAAS,GAAC,IAAnB,CAAX;AAEA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AACE,IAAA,KAAK,eACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAFJ;AAME,IAAA,IAAI,EAAC,OANP;AAOE,IAAA,KAAK,EAAE;AAAEK,MAAAA,KAAK,EAAE,GAAT;AAAcC,MAAAA,SAAS,EAAE;AAAzB,KAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACyBP,+BADzB,CATJ,eAYI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACsBC,SADtB,CAZJ,eAeI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACIO,iBAAiB,CAACL,QAAD,CADrB,eAfJ,CADF,CADF;AAwBD;;AAED,SAASK,iBAAT,CAA2BL,QAA3B,EAAqC;AACjC,MAAIM,OAAO,GAAGN,QAAd;AACA,MAAIO,KAAK,GAAKC,IAAI,CAACC,KAAL,CAAWH,OAAO,GAAG,IAArB,CAAd;AACA,MAAII,OAAO,GAAGF,IAAI,CAACC,KAAL,CAAW,CAACH,OAAO,GAAIC,KAAK,GAAG,IAApB,IAA6B,EAAxC,CAAd;AACA,MAAII,OAAO,GAAGL,OAAO,GAAIC,KAAK,GAAG,IAAnB,GAA4BG,OAAO,GAAG,EAApD;;AAEA,MAAIH,KAAK,GAAK,EAAd,EAAkB;AAACA,IAAAA,KAAK,GAAK,MAAIA,KAAd;AAAqB;;AACxC,MAAIG,OAAO,GAAG,EAAd,EAAkB;AAACA,IAAAA,OAAO,GAAG,MAAIA,OAAd;AAAuB;;AAC1C,MAAIC,OAAO,GAAG,EAAd,EAAkB;AAACA,IAAAA,OAAO,GAAG,MAAIA,OAAd;AAAuB;;AAC1C,SAAOJ,KAAK,GAAC,GAAN,GAAUG,OAAV,GAAkB,GAAlB,GAAsBC,OAA7B;AACH","sourcesContent":["import React from 'react'\nimport { ethers } from \"ethers\";\nimport { useTimestamp } from \"./hooks\"\nimport { Card } from 'antd';\n\nexport default function TimeReport(props) {\n\n  // pick a time here: https://www.unixtimestamp.com/index.php and paste it here:\n  const TIME_WHEN_VOTES_WILL_BE_COUNTED = 10000;\n\n  const timestamp = useTimestamp(props.mainnetProvider)\n  const timeLeft = TIME_WHEN_VOTES_WILL_BE_COUNTED - timestamp\n\n  let date = new Date(timestamp*1000)\n\n  return (\n    <div>\n      <Card\n        title={(\n          <div>\n            ðŸ•°  Votes will be counted:\n          </div>\n        )}\n        size=\"large\"\n        style={{ width: 550, marginTop: 25 }}\n        >\n          <div>\n            at mainnet timestamp: {TIME_WHEN_VOTES_WILL_BE_COUNTED}\n          </div>\n          <div>\n            current timestamp: {timestamp}\n          </div>\n          <div>\n            ({prettyTimeFromNow(timeLeft)} from now)\n          </div>\n      </Card>\n    </div>\n  );\n\n}\n\nfunction prettyTimeFromNow(timeLeft) {\n    var sec_num = timeLeft\n    var hours   = Math.floor(sec_num / 3600);\n    var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\n    var seconds = sec_num - (hours * 3600) - (minutes * 60);\n\n    if (hours   < 10) {hours   = \"0\"+hours;}\n    if (minutes < 10) {minutes = \"0\"+minutes;}\n    if (seconds < 10) {seconds = \"0\"+seconds;}\n    return hours+':'+minutes+':'+seconds;\n}\n"]},"metadata":{},"sourceType":"module"}