{"ast":null,"code":"var _jsxFileName = \"/Users/ken/Documents/scaffold-eth/packages/react-app/src/VoteReport.js\";\nimport React, { useEffect, useState } from 'react';\nimport { ethers } from \"ethers\";\nimport { useTimestamp } from \"./hooks\";\nimport { Card } from 'antd'; //import * as loadedVotes from \"./validVotes.json\"\n\nexport default function TimeReport(props) {\n  const [votes, setVotes] = useState([]);\n  const [results, setResults] = useState([]);\n\n  const loadedVotes = require(\"./validVotes.json\");\n\n  useEffect(() => {\n    console.log(loadedVotes + \"ici\");\n  }, [loadedVotes]);\n  useEffect(() => {\n    try {\n      //let loadedVotes = require(\"./validVotes.json\")\n      setVotes(loadedVotes);\n      let newResults = {};\n\n      for (let v in loadedVotes) {\n        if (newResults[loadedVotes[v].vote]) {\n          newResults[loadedVotes[v].vote] = newResults[loadedVotes[v].vote].add(loadedVotes[v].balance);\n        } else {\n          newResults[loadedVotes[v].vote] = ethers.utils.bigNumberify(loadedVotes[v].balance);\n        }\n      }\n\n      setResults(newResults);\n    } catch (e) {\n      console.log(\"ERR\", e);\n    }\n  }, []);\n  let displayVotes = [];\n  let winner;\n  let test = JSON.stringify(loadedVotes);\n  test = JSON.parse(test);\n  const voteArray = Object.values(test); //for (let i=0; i<voteArray.length ; i++) {\n\n  for (let r in results) {\n    console.log(voteArray);\n    let floatValue = parseFloat(results[r]);\n\n    if (typeof winner == \"undefined\" || winner.floatValue < floatValue) {\n      winner = {\n        vote: r,\n        floatValue: floatValue\n      };\n    }\n\n    displayVotes.push( /*#__PURE__*/React.createElement(\"div\", {\n      key: \"vote\" + r,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }, \"ðŸ’¸ wallet : \" + floatValue.toFixed(2), \" \", \"votes for \" + r));\n  } //}\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    title: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }\n    }, \"\\uD83D\\uDCD1  Votes: ( \", winner ? winner.vote + \" is winning\" : \"\", \" )\"),\n    size: \"large\",\n    style: {\n      width: 550,\n      marginTop: 25\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, displayVotes));\n}","map":{"version":3,"sources":["/Users/ken/Documents/scaffold-eth/packages/react-app/src/VoteReport.js"],"names":["React","useEffect","useState","ethers","useTimestamp","Card","TimeReport","props","votes","setVotes","results","setResults","loadedVotes","require","console","log","newResults","v","vote","add","balance","utils","bigNumberify","e","displayVotes","winner","test","JSON","stringify","parse","voteArray","Object","values","r","floatValue","parseFloat","push","toFixed","width","marginTop"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,YAAT,QAA6B,SAA7B;AACA,SAASC,IAAT,QAAqB,MAArB,C,CACA;;AAEA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAExC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,EAAD,CAAtC;;AACA,QAAMU,WAAW,GAAGC,OAAO,CAAC,mBAAD,CAA3B;;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,OAAO,CAACC,GAAR,CAAYH,WAAW,GAAG,KAA1B;AACD,GAFQ,EAEN,CAACA,WAAD,CAFM,CAAT;AAIAX,EAAAA,SAAS,CAAC,MAAI;AACZ,QAAG;AACD;AACAQ,MAAAA,QAAQ,CAACG,WAAD,CAAR;AACA,UAAII,UAAU,GAAG,EAAjB;;AACA,WAAI,IAAIC,CAAR,IAAaL,WAAb,EAAyB;AACvB,YAAGI,UAAU,CAACJ,WAAW,CAACK,CAAD,CAAX,CAAeC,IAAhB,CAAb,EAAmC;AACjCF,UAAAA,UAAU,CAACJ,WAAW,CAACK,CAAD,CAAX,CAAeC,IAAhB,CAAV,GAAkCF,UAAU,CAACJ,WAAW,CAACK,CAAD,CAAX,CAAeC,IAAhB,CAAV,CAAgCC,GAAhC,CAAoCP,WAAW,CAACK,CAAD,CAAX,CAAeG,OAAnD,CAAlC;AACD,SAFD,MAEK;AACHJ,UAAAA,UAAU,CAACJ,WAAW,CAACK,CAAD,CAAX,CAAeC,IAAhB,CAAV,GAAkCf,MAAM,CAACkB,KAAP,CAAaC,YAAb,CAA0BV,WAAW,CAACK,CAAD,CAAX,CAAeG,OAAzC,CAAlC;AACD;AACF;;AACDT,MAAAA,UAAU,CAACK,UAAD,CAAV;AACD,KAZD,CAYC,OAAMO,CAAN,EAAQ;AAACT,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkBQ,CAAlB;AAAqB;AAChC,GAdQ,EAcP,EAdO,CAAT;AAgBA,MAAIC,YAAY,GAAG,EAAnB;AACA,MAAIC,MAAJ;AACA,MAAIC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAehB,WAAf,CAAX;AACAc,EAAAA,IAAI,GAAGC,IAAI,CAACE,KAAL,CAAWH,IAAX,CAAP;AACA,QAAMI,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAcN,IAAd,CAAlB,CA9BwC,CA+BxC;;AACE,OAAI,IAAIO,CAAR,IAAavB,OAAb,EAAqB;AACnBI,IAAAA,OAAO,CAACC,GAAR,CAAYe,SAAZ;AACA,QAAII,UAAU,GAAGC,UAAU,CAACzB,OAAO,CAACuB,CAAD,CAAR,CAA3B;;AACA,QAAI,OAAOR,MAAP,IAAiB,WAAjB,IAAgCA,MAAM,CAACS,UAAP,GAAoBA,UAAxD,EAAmE;AACjET,MAAAA,MAAM,GAAG;AACPP,QAAAA,IAAI,EAACe,CADE;AAEPC,QAAAA,UAAU,EAACA;AAFJ,OAAT;AAID;;AACDV,IAAAA,YAAY,CAACY,IAAb,eACE;AAAK,MAAA,GAAG,EAAE,SAAOH,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,iBAAiBC,UAAU,CAACG,OAAX,CAAmB,CAAnB,CADpB,OAC4C,eAAeJ,CAD3D,CADF;AAKD,GA9CqC,CA+CxC;;;AAEA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AACE,IAAA,KAAK,eACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCACgBR,MAAM,GAACA,MAAM,CAACP,IAAP,GAAY,aAAb,GAA2B,EADjD,OAFJ;AAME,IAAA,IAAI,EAAC,OANP;AAOE,IAAA,KAAK,EAAE;AAAEoB,MAAAA,KAAK,EAAE,GAAT;AAAcC,MAAAA,SAAS,EAAE;AAAzB,KAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASKf,YATL,CADF,CADF;AAgBD","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { ethers } from \"ethers\";\nimport { useTimestamp } from \"./hooks\"\nimport { Card } from 'antd';\n//import * as loadedVotes from \"./validVotes.json\"\n\nexport default function TimeReport(props) {\n\n  const [votes, setVotes] = useState([])\n  const [results, setResults] = useState([])\n  const loadedVotes = require(\"./validVotes.json\")\n\n  useEffect(() => {\n    console.log(loadedVotes + \"ici\");\n  }, [loadedVotes]);\n\n  useEffect(()=>{\n    try{\n      //let loadedVotes = require(\"./validVotes.json\")\n      setVotes(loadedVotes)\n      let newResults = {}\n      for(let v in loadedVotes){\n        if(newResults[loadedVotes[v].vote]){\n          newResults[loadedVotes[v].vote] = newResults[loadedVotes[v].vote].add(loadedVotes[v].balance)\n        }else{\n          newResults[loadedVotes[v].vote] = ethers.utils.bigNumberify(loadedVotes[v].balance)\n        }\n      }\n      setResults(newResults)\n    }catch(e){console.log(\"ERR\",e)}\n  },[])\n\n  let displayVotes = []\n  let winner\n  let test = JSON.stringify(loadedVotes);\n  test = JSON.parse(test);\n  const voteArray = Object.values(test)\n  //for (let i=0; i<voteArray.length ; i++) {\n    for(let r in results){\n      console.log(voteArray);\n      let floatValue = parseFloat(results[r]);\n      if( typeof winner == \"undefined\" || winner.floatValue < floatValue){\n        winner = {\n          vote:r,\n          floatValue:floatValue,\n        }\n      }\n      displayVotes.push(\n        <div key={\"vote\"+r}>\n          {\"ðŸ’¸ wallet : \" + floatValue.toFixed(2)} {\"votes for \" + r} \n        </div>\n      )\n    }\n  //}\n\n  return (\n    <div>\n      <Card\n        title={(\n          <div>\n            ðŸ“‘  Votes: ( {winner?winner.vote+\" is winning\":\"\"} )\n          </div>\n        )}\n        size=\"large\"\n        style={{ width: 550, marginTop: 25 }}\n        >\n          {displayVotes}\n      </Card>\n    </div>\n  );\n\n}\n"]},"metadata":{},"sourceType":"module"}