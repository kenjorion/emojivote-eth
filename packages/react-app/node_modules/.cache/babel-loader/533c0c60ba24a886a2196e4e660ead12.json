{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ken/Documents/scaffold-eth/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/ken/Documents/scaffold-eth/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/ken/Documents/scaffold-eth/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState}from'react';import usePoller from\"./Poller.js\";import{ethers}from\"ethers\";export default function useBalance(address,provider,pollTime){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),balance=_useState2[0],setBalance=_useState2[1];var pollBalance=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var newBalance;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(address&&provider)){_context.next=5;break;}_context.next=3;return provider.getBalance(address);case 3:newBalance=_context.sent;if(newBalance!==balance){//console.log(\"NEW BALANCE:\",newBalance,\"Current balance\",balance)\nsetBalance(newBalance);}case 5:case\"end\":return _context.stop();}}},_callee);}));return function pollBalance(){return _ref.apply(this,arguments);};}();usePoller(pollBalance,pollTime?pollTime:777);return balance;}","map":{"version":3,"sources":["/Users/ken/Documents/scaffold-eth/packages/react-app/src/hooks/Balance.js"],"names":["useState","usePoller","ethers","useBalance","address","provider","pollTime","balance","setBalance","pollBalance","getBalance","newBalance"],"mappings":"qcAAA,OAASA,QAAT,KAAyB,OAAzB,CACA,MAAOC,CAAAA,SAAP,KAAsB,aAAtB,CACA,OAASC,MAAT,KAAuB,QAAvB,CACA,cAAe,SAASC,CAAAA,UAAT,CAAoBC,OAApB,CAA4BC,QAA5B,CAAqCC,QAArC,CAA+C,eAE9BN,QAAQ,CAAC,CAAD,CAFsB,wCAErDO,OAFqD,eAE5CC,UAF4C,eAG5D,GAAMC,CAAAA,WAAW,0FAAG,uJACfL,OAAO,EAAEC,QADM,gDAEOA,CAAAA,QAAQ,CAACK,UAAT,CAAoBN,OAApB,CAFP,QAEZO,UAFY,eAGhB,GAAGA,UAAU,GAAGJ,OAAhB,CAAwB,CACtB;AACAC,UAAU,CAACG,UAAD,CAAV,CACD,CANe,sDAAH,kBAAXF,CAAAA,WAAW,0CAAjB,CASAR,SAAS,CAACQ,WAAD,CAAaH,QAAQ,CAACA,QAAD,CAAU,GAA/B,CAAT,CAEA,MAAOC,CAAAA,OAAP,CACD","sourcesContent":["import { useState } from 'react';\nimport usePoller from \"./Poller.js\";\nimport { ethers } from \"ethers\";\nexport default function useBalance(address,provider,pollTime) {\n\n  const [balance, setBalance] = useState(0);\n  const pollBalance = async ()=>{\n    if(address&&provider){\n      let newBalance = await provider.getBalance(address)\n      if(newBalance!==balance){\n        //console.log(\"NEW BALANCE:\",newBalance,\"Current balance\",balance)\n        setBalance(newBalance)\n      }\n    }\n  }\n  usePoller(pollBalance,pollTime?pollTime:777)\n\n  return balance;\n}\n"]},"metadata":{},"sourceType":"module"}