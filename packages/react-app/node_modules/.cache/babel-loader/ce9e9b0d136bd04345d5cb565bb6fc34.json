{"ast":null,"code":"import { ethers } from \"ethers\";\nimport { useState, useEffect } from 'react';\n/*\n  when you want to load a local contract's abi but supply a custom address\n*/\n\nexport default function useCustomContractLoader(provider, contractName, address) {\n  const [contract, setContract] = useState();\n  useEffect(() => {\n    async function loadContract() {\n      if (typeof provider != \"undefined\" && contractName && address) {\n        try {\n          //we need to check to see if this provider has a signer or not\n          let signer;\n          let accounts = await provider.listAccounts();\n\n          if (accounts && accounts.length > 0) {\n            signer = provider.getSigner();\n          } else {\n            signer = provider;\n          }\n\n          let customContract = new ethers.Contract(address, require(\"../contracts/\" + contractName + \".abi.js\"), signer);\n\n          try {\n            customContract.bytecode = require(\"../contracts/\" + contractName + \".bytecode.js\");\n          } catch (e) {\n            console.log(e);\n          }\n\n          setContract(customContract);\n        } catch (e) {\n          console.log(\"ERROR LOADING CONTRACTS!!\", e);\n        }\n      }\n    }\n\n    loadContract();\n  }, [provider, contractName, address]);\n  return contract;\n}","map":{"version":3,"sources":["/Users/ken/Documents/scaffold-eth/packages/react-app/src/hooks/CustomContractLoader.js"],"names":["ethers","useState","useEffect","useCustomContractLoader","provider","contractName","address","contract","setContract","loadContract","signer","accounts","listAccounts","length","getSigner","customContract","Contract","require","bytecode","e","console","log"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA;;;;AAIA,eAAe,SAASC,uBAAT,CAAiCC,QAAjC,EAA0CC,YAA1C,EAAuDC,OAAvD,EAAgE;AAC7E,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,EAAxC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeO,YAAf,GAA8B;AAC5B,UAAG,OAAOL,QAAP,IAAmB,WAAnB,IAAkCC,YAAlC,IAAkDC,OAArD,EACA;AACE,YAAG;AACD;AACA,cAAII,MAAJ;AACA,cAAIC,QAAQ,GAAG,MAAMP,QAAQ,CAACQ,YAAT,EAArB;;AACA,cAAGD,QAAQ,IAAIA,QAAQ,CAACE,MAAT,GAAgB,CAA/B,EAAiC;AAC/BH,YAAAA,MAAM,GAAGN,QAAQ,CAACU,SAAT,EAAT;AACD,WAFD,MAEK;AACHJ,YAAAA,MAAM,GAAGN,QAAT;AACD;;AAED,cAAIW,cAAc,GAAG,IAAIf,MAAM,CAACgB,QAAX,CACnBV,OADmB,EAEnBW,OAAO,CAAC,kBAAgBZ,YAAhB,GAA6B,SAA9B,CAFY,EAGnBK,MAHmB,CAArB;;AAKA,cAAG;AACDK,YAAAA,cAAc,CAACG,QAAf,GAA0BD,OAAO,CAAC,kBAAgBZ,YAAhB,GAA6B,cAA9B,CAAjC;AACD,WAFD,CAEC,OAAMc,CAAN,EAAQ;AACPC,YAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;;AAEDX,UAAAA,WAAW,CAACO,cAAD,CAAX;AACD,SAtBD,CAsBC,OAAMI,CAAN,EAAQ;AACPC,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAwCF,CAAxC;AACD;AACF;AACF;;AACDV,IAAAA,YAAY;AACb,GAhCQ,EAgCP,CAACL,QAAD,EAAUC,YAAV,EAAuBC,OAAvB,CAhCO,CAAT;AAiCA,SAAOC,QAAP;AACD","sourcesContent":["import { ethers } from \"ethers\";\nimport { useState, useEffect } from 'react';\n\n/*\n  when you want to load a local contract's abi but supply a custom address\n*/\n\nexport default function useCustomContractLoader(provider,contractName,address) {\n  const [contract, setContract] = useState();\n  useEffect(() => {\n    async function loadContract() {\n      if(typeof provider != \"undefined\" && contractName && address)\n      {\n        try{\n          //we need to check to see if this provider has a signer or not\n          let signer\n          let accounts = await provider.listAccounts()\n          if(accounts && accounts.length>0){\n            signer = provider.getSigner()\n          }else{\n            signer = provider\n          }\n\n          let customContract = new ethers.Contract(\n            address,\n            require(\"../contracts/\"+contractName+\".abi.js\"),\n            signer,\n          );\n          try{\n            customContract.bytecode = require(\"../contracts/\"+contractName+\".bytecode.js\")\n          }catch(e){\n            console.log(e)\n          }\n\n          setContract(customContract)\n        }catch(e){\n          console.log(\"ERROR LOADING CONTRACTS!!\",e)\n        }\n      }\n    }\n    loadContract()\n  },[provider,contractName,address])\n  return contract\n}\n"]},"metadata":{},"sourceType":"module"}