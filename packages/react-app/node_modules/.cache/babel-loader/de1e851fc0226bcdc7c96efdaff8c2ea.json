{"ast":null,"code":"import _toConsumableArray from\"/Users/ken/Documents/scaffold-eth/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/ken/Documents/scaffold-eth/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from'react';export default function useEventListener(contracts,contractName,eventName,provider,startBlock,args){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),updates=_useState2[0],setUpdates=_useState2[1];useEffect(function(){if(typeof provider!=\"undefined\"&&typeof startBlock!=\"undefined\"){// if you want to read _all_ events from your contracts, set this to the block number it is deployed\nprovider.resetEventsBlock(startBlock);}if(contracts&&contractName&&contracts[contractName]){try{contracts[contractName].on(eventName,function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}setUpdates(function(messages){return[].concat(_toConsumableArray(messages),[args.pop().args]);});});return function(){contracts[contractName].removeListener(eventName);};}catch(e){console.log(e);}}},[provider,contracts,contractName,eventName]);return updates;}","map":{"version":3,"sources":["/Users/ken/Documents/scaffold-eth/packages/react-app/src/hooks/EventListener.js"],"names":["useState","useEffect","useEventListener","contracts","contractName","eventName","provider","startBlock","args","updates","setUpdates","resetEventsBlock","on","messages","pop","removeListener","e","console","log"],"mappings":"wTAAA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CAEA,cAAe,SAASC,CAAAA,gBAAT,CAA0BC,SAA1B,CAAoCC,YAApC,CAAiDC,SAAjD,CAA2DC,QAA3D,CAAoEC,UAApE,CAA+EC,IAA/E,CAAqF,eAErER,QAAQ,CAAC,EAAD,CAF6D,wCAE3FS,OAF2F,eAEnFC,UAFmF,eAIlGT,SAAS,CAAC,UAAM,CACd,GAAG,MAAOK,CAAAA,QAAP,EAAmB,WAAnB,EAAgC,MAAOC,CAAAA,UAAP,EAAqB,WAAxD,CAAoE,CAClE;AACAD,QAAQ,CAACK,gBAAT,CAA0BJ,UAA1B,EACD,CACD,GAAGJ,SAAS,EAAIC,YAAb,EAA6BD,SAAS,CAACC,YAAD,CAAzC,CAAwD,CACtD,GAAG,CACDD,SAAS,CAACC,YAAD,CAAT,CAAwBQ,EAAxB,CAA2BP,SAA3B,CAAsC,UAAa,+BAATG,IAAS,0CAATA,IAAS,wBACjDE,UAAU,CAAC,SAAAG,QAAQ,qCAAQA,QAAR,GAAmBL,IAAI,CAACM,GAAL,EAAD,CAAaN,IAA/B,IAAT,CAAV,CACD,CAFD,EAGA,MAAO,WAAI,CACTL,SAAS,CAACC,YAAD,CAAT,CAAwBW,cAAxB,CAAuCV,SAAvC,EACD,CAFD,CAGD,OAAMW,CAAN,CAAQ,CACPC,OAAO,CAACC,GAAR,CAAYF,CAAZ,EACD,CACF,CACF,CAjBQ,CAiBP,CAACV,QAAD,CAAUH,SAAV,CAAoBC,YAApB,CAAiCC,SAAjC,CAjBO,CAAT,CAmBA,MAAOI,CAAAA,OAAP,CACD","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport default function useEventListener(contracts,contractName,eventName,provider,startBlock,args) {\n\n  const [updates,setUpdates] = useState([]);\n\n  useEffect(() => {\n    if(typeof provider != \"undefined\"&&typeof startBlock != \"undefined\"){\n      // if you want to read _all_ events from your contracts, set this to the block number it is deployed\n      provider.resetEventsBlock(startBlock)\n    }\n    if(contracts && contractName && contracts[contractName]){\n      try{\n        contracts[contractName].on(eventName, (...args) => {\n          setUpdates(messages => [...messages, (args.pop()).args]) \n        });\n        return ()=>{\n          contracts[contractName].removeListener(eventName)\n        }\n      }catch(e){\n        console.log(e)\n      }\n    }\n  },[provider,contracts,contractName,eventName])\n\n  return updates;\n}\n"]},"metadata":{},"sourceType":"module"}