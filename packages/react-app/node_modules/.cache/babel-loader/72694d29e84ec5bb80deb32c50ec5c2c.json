{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ken/Documents/scaffold-eth/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/ken/Documents/scaffold-eth/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{ethers}from\"ethers\";import{notification}from'antd';import Notify from'bnc-notify';export default function Transactor(provider,gasPrice,etherscan){if(typeof provider!=\"undefined\"){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(tx){var signer,network,options,notify,etherscanNetwork,etherscanTxUrl,result,_notify$hash,emitter;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:signer=provider.getSigner();_context.next=3;return provider.getNetwork();case 3:network=_context.sent;console.log(\"network\",network);options={dappId:\"17422c49-c723-41e7-85dd-950f5831ef92\",networkId:network.chainId,//darkMode: Boolean, // (default: false)\ntransactionHandler:function transactionHandler(txInformation){console.log(\"HANDLE TX\",txInformation);}};notify=Notify(options);etherscanNetwork=\"\";if(network.name&&network.chainId>1){etherscanNetwork=network.name+\".\";}etherscanTxUrl=\"https://\"+etherscanNetwork+\"etherscan.io/tx/\";_context.prev=10;if(!(tx instanceof Promise)){_context.next=18;break;}console.log(\"AWAITING TX\",tx);_context.next=15;return tx;case 15:result=_context.sent;_context.next=24;break;case 18:if(!tx.gasPrice){tx.gasPrice=gasPrice?gasPrice:ethers.utils.parseUnits(\"4.1\",\"gwei\");}if(!tx.gasLimit){tx.gasLimit=ethers.utils.hexlify(120000);}console.log(\"RUNNING TX\",tx);_context.next=23;return signer.sendTransaction(tx);case 23:result=_context.sent;case 24:console.log(\"RESULT:\",result);console.log(\"Notify\",notify);//if it is a valid Notify.js network, use that, if not, just send a default notification\nif([1,3,4,5,42].indexOf(network.chainId)>=0){_notify$hash=notify.hash(result.hash),emitter=_notify$hash.emitter;emitter.on('all',function(transaction){return{onclick:function onclick(){return window.open((etherscan?etherscan:etherscanTxUrl)+transaction.hash);}};});}else{notification['info']({message:'Local Transaction Sent',description:result.hash,placement:\"bottomRight\"});}return _context.abrupt(\"return\",result);case 30:_context.prev=30;_context.t0=_context[\"catch\"](10);console.log(_context.t0);console.log(\"Transaction Error:\",_context.t0.message);notification['error']({message:'Transaction Error',description:_context.t0.message});case 35:case\"end\":return _context.stop();}}},_callee,null,[[10,30]]);}));return function(_x){return _ref.apply(this,arguments);};}();}}","map":{"version":3,"sources":["/Users/ken/Documents/scaffold-eth/packages/react-app/src/helpers/Transactor.js"],"names":["ethers","notification","Notify","Transactor","provider","gasPrice","etherscan","tx","signer","getSigner","getNetwork","network","console","log","options","dappId","networkId","chainId","transactionHandler","txInformation","notify","etherscanNetwork","name","etherscanTxUrl","Promise","result","utils","parseUnits","gasLimit","hexlify","sendTransaction","indexOf","hash","emitter","on","transaction","onclick","window","open","message","description","placement"],"mappings":"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","sourcesContent":["import { ethers } from \"ethers\";\nimport { notification } from 'antd';\n\nimport Notify from 'bnc-notify'\n\nexport default function Transactor(provider,gasPrice,etherscan) {\n  if(typeof provider != \"undefined\"){\n    return async (tx) => {\n      let signer = provider.getSigner()\n      const network = await provider.getNetwork()\n      console.log(\"network\",network)\n      const options = {\n        dappId: \"17422c49-c723-41e7-85dd-950f5831ef92\",\n        networkId: network.chainId,\n        //darkMode: Boolean, // (default: false)\n        transactionHandler: (txInformation)=>{\n          console.log(\"HANDLE TX\",txInformation)\n        },\n      }\n      const notify = Notify(options)\n\n      let etherscanNetwork = \"\"\n      if(network.name && network.chainId > 1){\n        etherscanNetwork = network.name+\".\"\n      }\n\n      const etherscanTxUrl = \"https://\"+etherscanNetwork+\"etherscan.io/tx/\"\n\n      try{\n        let result\n        if(tx instanceof Promise){\n          console.log(\"AWAITING TX\",tx)\n          result = await tx\n        }else{\n\n          if(!tx.gasPrice){\n            tx.gasPrice = gasPrice ? gasPrice : ethers.utils.parseUnits(\"4.1\",\"gwei\")\n          }\n          if(!tx.gasLimit){\n            tx.gasLimit = ethers.utils.hexlify(120000)\n          }\n          console.log(\"RUNNING TX\",tx)\n          result = await signer.sendTransaction(tx);\n        }\n        console.log(\"RESULT:\",result)\n        console.log(\"Notify\",notify)\n\n        //if it is a valid Notify.js network, use that, if not, just send a default notification\n        if([1,3,4,5,42].indexOf(network.chainId)>=0){\n          const { emitter } = notify.hash(result.hash)\n          emitter.on('all', (transaction) => {\n            return {\n              onclick: () =>\n              window.open((etherscan?etherscan:etherscanTxUrl)+transaction.hash),\n            }\n          })\n        }else{\n          notification['info']({\n            message: 'Local Transaction Sent',\n            description: result.hash,\n            placement:\"bottomRight\"\n          });\n        }\n\n        return result\n\n      }catch(e){\n        console.log(e)\n        console.log(\"Transaction Error:\",e.message)\n        notification['error']({\n          message: 'Transaction Error',\n          description: e.message\n        });\n      }\n    }\n\n  }\n}\n"]},"metadata":{},"sourceType":"module"}