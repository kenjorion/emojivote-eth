{"ast":null,"code":"var _jsxFileName = \"/Users/ken/Documents/scaffold-eth/packages/react-app/src/Vote.js\";\nimport React from 'react';\nimport { ethers, Wallet } from \"ethers\";\nimport { Card, Button } from 'antd';\n\nconst axios = require('axios');\n\nexport default function SmartContractWallet(props) {\n  const voteButton = emoji => {\n    return /*#__PURE__*/React.createElement(Button, {\n      onClick: () => {\n        castVote(emoji, translateEmoji(emoji));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 7\n      }\n    }, emoji);\n  };\n\n  const castVote = async (emoji, emojiName) => {\n    let timestamp = new Date();\n    timestamp = timestamp.getTime();\n    console.log(\"timestamp\", timestamp);\n    console.log(\"props.injectedProvider\", props.injectedProvider);\n    let signer = props.injectedProvider.getSigner();\n    console.log(\"props.address\", props.address);\n    let message = \"emojivote\" + emojiName + timestamp;\n    console.log(\"message\", message);\n    let result = await signer.signMessage(message);\n    console.log(\"result\", result);\n    let recovered = await ethers.utils.verifyMessage(message, result);\n    console.log(\"recovered\", recovered); // \n    /// CHANGE THIS TO YOUR ZAP: \n\n    var ethers = require('ethers');\n\n    console.log(\"Etherprovider\", ethers.providers);\n    var provider = new ethers.providers.InfuraProvider(\"kovan\", \"2717afb6bf164045b5d5468031b93f87\"); //var provider = new ethers.providers.Web3Provider(window.ethereum)\n\n    var address = '0x60Aa0A1D4ED84e1F28997354562c08A9F55Ba44d';\n    var abi = [];\n    var privateKey = '0xcbd6eac40dab0d8460da5b8d02261c230a565a933616de56ff1134a19217614d';\n    var contract = new ethers.Contract(address, abi, provider);\n    console.log(\"contract\", contract);\n    let balance = await contract.balanceOf(address);\n    console.log(\"Balance\", balance); //const signer = provider.getSigner();\n\n    const userSigner = contract.connect(signer);\n    console.log(\"add\", props.address);\n    await userSigner.mint(props.address, 100);\n    balance = await contract.balanceOf(address);\n    console.log(\"Balance\", balance); /// CHANGE THIS TO YOUR ZAP: \n\n    axios.get('https://hooks.zapier.com/hooks/catch/10067684/byh04p2/?address=' + props.address + '&vote=' + emoji + '&timestamp=' + timestamp + '&signature=' + result).then(function (response) {\n      console.log(response);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    title: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, \"\\uD83D\\uDDF3  Pick Your Favorite Emoji:\"),\n    size: \"large\",\n    style: {\n      width: 550,\n      marginTop: 25\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, voteButton(\"🐮\"), voteButton(\"🦁\"), voteButton(\"🐭\"), voteButton(\"🦊\"), voteButton(\"🐶\"), voteButton(\"🐰\"), voteButton(\"🐸\")));\n}\n\nconst translateEmoji = emoji => {\n  if (emoji === \"🦁\") {\n    return \"LION\";\n  } else if (emoji === \"🐮\") {\n    return \"COW\";\n  } else if (emoji === \"🐭\") {\n    return \"MOUSE\";\n  } else if (emoji === \"🦊\") {\n    return \"FOX\";\n  } else if (emoji === \"🐶\") {\n    return \"DOG\";\n  } else if (emoji === \"🐰\") {\n    return \"RABBIT\";\n  } else if (emoji === \"🐸\") {\n    return \"FROG\";\n  }\n};","map":{"version":3,"sources":["/Users/ken/Documents/scaffold-eth/packages/react-app/src/Vote.js"],"names":["React","ethers","Wallet","Card","Button","axios","require","SmartContractWallet","props","voteButton","emoji","castVote","translateEmoji","emojiName","timestamp","Date","getTime","console","log","injectedProvider","signer","getSigner","address","message","result","signMessage","recovered","utils","verifyMessage","providers","provider","InfuraProvider","abi","privateKey","contract","Contract","balance","balanceOf","userSigner","connect","mint","get","then","response","catch","error","width","marginTop"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { ethers, Wallet } from \"ethers\";\nimport { Card, Button } from 'antd';\nconst axios = require('axios');\n\nexport default function SmartContractWallet(props) {\n\n  const voteButton = (emoji)=>{\n    return (\n      <Button onClick={()=>{\n        castVote(emoji,translateEmoji(emoji))\n      }}>{emoji}</Button>\n    )\n  }\n\n  const castVote = async (emoji,emojiName)=>{\n    let timestamp = new Date;\n    timestamp = timestamp.getTime();\n    console.log(\"timestamp\",timestamp)\n    console.log(\"props.injectedProvider\",props.injectedProvider)\n    let signer = props.injectedProvider.getSigner()\n    console.log(\"props.address\",props.address)\n    let message = \"emojivote\"+emojiName+timestamp\n    console.log(\"message\",message)\n    let result = await signer.signMessage(message)\n    console.log(\"result\",result)\n    let recovered = await ethers.utils.verifyMessage ( message , result )\n    console.log(\"recovered\",recovered)\n\n    // \n    /// CHANGE THIS TO YOUR ZAP: \n    var ethers = require('ethers');\n    console.log(\"Etherprovider\", ethers.providers);\n    var provider = new ethers.providers.InfuraProvider(\"kovan\",\"2717afb6bf164045b5d5468031b93f87\")\n    //var provider = new ethers.providers.Web3Provider(window.ethereum)\n    \n    var address = '0x60Aa0A1D4ED84e1F28997354562c08A9F55Ba44d';\n    var abi = [];\n    var privateKey = '0xcbd6eac40dab0d8460da5b8d02261c230a565a933616de56ff1134a19217614d';\n    \n    var contract = new ethers.Contract(address,abi,provider);\n    console.log(\"contract\", contract);\n    let balance = await contract.balanceOf(address);\n    console.log(\"Balance\", balance);\n    //const signer = provider.getSigner();\n    const userSigner = contract.connect(signer);\n    console.log(\"add\", props.address)\n    await userSigner.mint(props.address, 100);\n    balance = await contract.balanceOf(address);\n    console.log(\"Balance\", balance);\n\n    /// CHANGE THIS TO YOUR ZAP: \n    axios.get('https://hooks.zapier.com/hooks/catch/10067684/byh04p2/?address='+props.address+'&vote='+emoji+'&timestamp='+timestamp+'&signature='+result)\n    .then(function (response) {\n      console.log(response);\n    })\n    .catch(function (error) {\n      console.log(error);\n    })\n  }\n\n  return (\n    <div>\n      <Card\n        title={(\n          <div>\n            🗳  Pick Your Favorite Emoji:\n          </div>\n        )}\n        size=\"large\"\n        style={{ width: 550, marginTop: 25 }}\n        >\n          {voteButton(\"🐮\",)}\n          {voteButton(\"🦁\")}\n          {voteButton(\"🐭\")}\n          {voteButton(\"🦊\")}\n          {voteButton(\"🐶\")}\n          {voteButton(\"🐰\")}\n          {voteButton(\"🐸\")}\n      </Card>\n    </div>\n  );\n\n}\n\n\n\nconst translateEmoji = (emoji)=>{\n  if(emoji===\"🦁\"){\n    return \"LION\"\n  } else if(emoji===\"🐮\"){\n    return \"COW\"\n  } else if(emoji===\"🐭\"){\n    return \"MOUSE\"\n  } else if(emoji===\"🦊\"){\n    return \"FOX\"\n  } else if(emoji===\"🐶\"){\n    return \"DOG\"\n  } else if(emoji===\"🐰\"){\n    return \"RABBIT\"\n  } else if(emoji===\"🐸\"){\n    return \"FROG\"\n  }\n}\n"]},"metadata":{},"sourceType":"module"}