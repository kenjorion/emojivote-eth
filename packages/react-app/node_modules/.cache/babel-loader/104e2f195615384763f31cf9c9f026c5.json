{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ken/Documents/scaffold-eth/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/ken/Documents/scaffold-eth/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/ken/Documents/scaffold-eth/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{ethers}from\"ethers\";import{useState,useEffect}from'react';/*\n  when you want to load a local contract's abi but supply a custom address\n*/export default function useCustomContractLoader(provider,contractName,address){var _useState=useState(),_useState2=_slicedToArray(_useState,2),contract=_useState2[0],setContract=_useState2[1];useEffect(function(){function loadContract(){return _loadContract.apply(this,arguments);}function _loadContract(){_loadContract=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var signer,accounts,customContract;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(typeof provider!=\"undefined\"&&contractName&&address)){_context.next=14;break;}_context.prev=1;_context.next=4;return provider.listAccounts();case 4:accounts=_context.sent;if(accounts&&accounts.length>0){signer=provider.getSigner();}else{signer=provider;}customContract=new ethers.Contract(address,require(\"../contracts/\"+contractName+\".abi.js\"),signer);try{customContract.bytecode=require(\"../contracts/\"+contractName+\".bytecode.js\");}catch(e){console.log(e);}setContract(customContract);_context.next=14;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](1);console.log(\"ERROR LOADING CONTRACTS!!\",_context.t0);case 14:case\"end\":return _context.stop();}}},_callee,null,[[1,11]]);}));return _loadContract.apply(this,arguments);}loadContract();},[provider,contractName,address]);return contract;}","map":{"version":3,"sources":["/Users/ken/Documents/scaffold-eth/packages/react-app/src/hooks/CustomContractLoader.js"],"names":["ethers","useState","useEffect","useCustomContractLoader","provider","contractName","address","contract","setContract","loadContract","listAccounts","accounts","length","signer","getSigner","customContract","Contract","require","bytecode","e","console","log"],"mappings":"qcAAA,OAASA,MAAT,KAAuB,QAAvB,CACA,OAASC,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CAEA;;EAIA,cAAe,SAASC,CAAAA,uBAAT,CAAiCC,QAAjC,CAA0CC,YAA1C,CAAuDC,OAAvD,CAAgE,eAC7CL,QAAQ,EADqC,wCACtEM,QADsE,eAC5DC,WAD4D,eAE7EN,SAAS,CAAC,UAAM,SACCO,CAAAA,YADD,8IACd,2KACK,MAAOL,CAAAA,QAAP,EAAmB,WAAnB,EAAkCC,YAAlC,EAAkDC,OADvD,iEAM2BF,CAAAA,QAAQ,CAACM,YAAT,EAN3B,QAMUC,QANV,eAOM,GAAGA,QAAQ,EAAIA,QAAQ,CAACC,MAAT,CAAgB,CAA/B,CAAiC,CAC/BC,MAAM,CAAGT,QAAQ,CAACU,SAAT,EAAT,CACD,CAFD,IAEK,CACHD,MAAM,CAAGT,QAAT,CACD,CAEGW,cAbV,CAa2B,GAAIf,CAAAA,MAAM,CAACgB,QAAX,CACnBV,OADmB,CAEnBW,OAAO,CAAC,gBAAgBZ,YAAhB,CAA6B,SAA9B,CAFY,CAGnBQ,MAHmB,CAb3B,CAkBM,GAAG,CACDE,cAAc,CAACG,QAAf,CAA0BD,OAAO,CAAC,gBAAgBZ,YAAhB,CAA6B,cAA9B,CAAjC,CACD,OAAMc,CAAN,CAAQ,CACPC,OAAO,CAACC,GAAR,CAAYF,CAAZ,EACD,CAEDX,WAAW,CAACO,cAAD,CAAX,CAxBN,iFA0BMK,OAAO,CAACC,GAAR,CAAY,2BAAZ,cA1BN,qEADc,+CA+BdZ,YAAY,GACb,CAhCQ,CAgCP,CAACL,QAAD,CAAUC,YAAV,CAAuBC,OAAvB,CAhCO,CAAT,CAiCA,MAAOC,CAAAA,QAAP,CACD","sourcesContent":["import { ethers } from \"ethers\";\nimport { useState, useEffect } from 'react';\n\n/*\n  when you want to load a local contract's abi but supply a custom address\n*/\n\nexport default function useCustomContractLoader(provider,contractName,address) {\n  const [contract, setContract] = useState();\n  useEffect(() => {\n    async function loadContract() {\n      if(typeof provider != \"undefined\" && contractName && address)\n      {\n        try{\n          //we need to check to see if this provider has a signer or not\n          let signer\n          let accounts = await provider.listAccounts()\n          if(accounts && accounts.length>0){\n            signer = provider.getSigner()\n          }else{\n            signer = provider\n          }\n\n          let customContract = new ethers.Contract(\n            address,\n            require(\"../contracts/\"+contractName+\".abi.js\"),\n            signer,\n          );\n          try{\n            customContract.bytecode = require(\"../contracts/\"+contractName+\".bytecode.js\")\n          }catch(e){\n            console.log(e)\n          }\n\n          setContract(customContract)\n        }catch(e){\n          console.log(\"ERROR LOADING CONTRACTS!!\",e)\n        }\n      }\n    }\n    loadContract()\n  },[provider,contractName,address])\n  return contract\n}\n"]},"metadata":{},"sourceType":"module"}