{"ast":null,"code":"import { useState } from 'react';\nimport { usePoller } from \".\";\nimport { ethers } from \"ethers\";\nimport { MAINNET_ID, addresses, abis } from \"@uniswap-v1-app/contracts\";\nexport default function useExchangePrice(mainnetProvider, pollTime) {\n  const [price, setPrice] = useState(0);\n\n  const pollPrice = () => {\n    async function getPrice() {\n      const ethDaiExchangeContract = new ethers.Contract(addresses[MAINNET_ID].exchanges[\"ETH-DAI\"], abis.exchange, mainnetProvider);\n      const exchangeRate = await ethDaiExchangeContract.getEthToTokenInputPrice(\"10000000000000000000\");\n      setPrice(parseFloat(exchangeRate.div(\"100000000000000000\")) / 100);\n    }\n\n    getPrice();\n  };\n\n  usePoller(pollPrice, pollTime ? pollTime : 9777);\n  return price;\n}","map":{"version":3,"sources":["/Users/ken/Documents/scaffold-eth/packages/react-app/src/hooks/ExchangePrice.js"],"names":["useState","usePoller","ethers","MAINNET_ID","addresses","abis","useExchangePrice","mainnetProvider","pollTime","price","setPrice","pollPrice","getPrice","ethDaiExchangeContract","Contract","exchanges","exchange","exchangeRate","getEthToTokenInputPrice","parseFloat","div"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,QAA0B,GAA1B;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,IAAhC,QAA4C,2BAA5C;AAEA,eAAe,SAASC,gBAAT,CAA0BC,eAA1B,EAA0CC,QAA1C,EAAoD;AAEjE,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,CAAD,CAAlC;;AAEA,QAAMW,SAAS,GAAG,MAAM;AACtB,mBAAeC,QAAf,GAA0B;AACxB,YAAMC,sBAAsB,GAAG,IAAIX,MAAM,CAACY,QAAX,CAC7BV,SAAS,CAACD,UAAD,CAAT,CAAsBY,SAAtB,CAAgC,SAAhC,CAD6B,EAE7BV,IAAI,CAACW,QAFwB,EAG7BT,eAH6B,CAA/B;AAKA,YAAMU,YAAY,GAAG,MAAMJ,sBAAsB,CAACK,uBAAvB,CAA+C,sBAA/C,CAA3B;AACAR,MAAAA,QAAQ,CAACS,UAAU,CAACF,YAAY,CAACG,GAAb,CAAiB,oBAAjB,CAAD,CAAV,GAAmD,GAApD,CAAR;AACD;;AACDR,IAAAA,QAAQ;AACT,GAXD;;AAYAX,EAAAA,SAAS,CAACU,SAAD,EAAWH,QAAQ,GAACA,QAAD,GAAU,IAA7B,CAAT;AAEA,SAAOC,KAAP;AACD","sourcesContent":["import { useState } from 'react';\nimport { usePoller } from \".\";\nimport { ethers } from \"ethers\";\nimport { MAINNET_ID, addresses, abis } from \"@uniswap-v1-app/contracts\";\n\nexport default function useExchangePrice(mainnetProvider,pollTime) {\n\n  const [price, setPrice] = useState(0);\n\n  const pollPrice = () => {\n    async function getPrice() {\n      const ethDaiExchangeContract = new ethers.Contract(\n        addresses[MAINNET_ID].exchanges[\"ETH-DAI\"],\n        abis.exchange,\n        mainnetProvider,\n      );\n      const exchangeRate = await ethDaiExchangeContract.getEthToTokenInputPrice(\"10000000000000000000\");\n      setPrice(parseFloat(exchangeRate.div(\"100000000000000000\"))/100)\n    }\n    getPrice();\n  }\n  usePoller(pollPrice,pollTime?pollTime:9777)\n\n  return price;\n}\n"]},"metadata":{},"sourceType":"module"}