{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ken/Documents/scaffold-eth/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/ken/Documents/scaffold-eth/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/ken/Documents/scaffold-eth/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{ethers}from\"ethers\";import{useState,useEffect}from'react';export default function useContractLoader(provider){var _useState=useState(),_useState2=_slicedToArray(_useState,2),contracts=_useState2[0],setContracts=_useState2[1];useEffect(function(){function loadContract(){return _loadContract.apply(this,arguments);}function _loadContract(){_loadContract=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var contractList,newContracts,signer,accounts,c;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(typeof provider!=\"undefined\")){_context.next=15;break;}_context.prev=1;contractList=require(\"../contracts/contracts.js\");newContracts=[];//we need to check to see if this provider has a signer or not\n_context.next=6;return provider.listAccounts();case 6:accounts=_context.sent;if(accounts&&accounts.length>0){signer=provider.getSigner();}else{signer=provider;}for(c in contractList){newContracts[contractList[c]]=new ethers.Contract(require(\"../contracts/\"+contractList[c]+\".address.js\"),require(\"../contracts/\"+contractList[c]+\".abi.js\"),signer);try{newContracts[contractList[c]].bytecode=require(\"../contracts/\"+contractList[c]+\".bytecode.js\");}catch(e){console.log(e);}}setContracts(newContracts);_context.next=15;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](1);console.log(\"ERROR LOADING CONTRACTS!!\",_context.t0);case 15:case\"end\":return _context.stop();}}},_callee,null,[[1,12]]);}));return _loadContract.apply(this,arguments);}loadContract();},[provider]);return contracts;}","map":{"version":3,"sources":["/Users/ken/Documents/scaffold-eth/packages/react-app/src/hooks/ContractLoader.js"],"names":["ethers","useState","useEffect","useContractLoader","provider","contracts","setContracts","loadContract","contractList","require","newContracts","listAccounts","accounts","length","signer","getSigner","c","Contract","bytecode","e","console","log"],"mappings":"qcAAA,OAASA,MAAT,KAAuB,QAAvB,CACA,OAASC,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CAEA,cAAe,SAASC,CAAAA,iBAAT,CAA2BC,QAA3B,CAAqC,eAChBH,QAAQ,EADQ,wCAC3CI,SAD2C,eAChCC,YADgC,eAElDJ,SAAS,CAAC,UAAM,SACCK,CAAAA,YADD,8IACd,wLACK,MAAOH,CAAAA,QAAP,EAAmB,WADxB,2CAIUI,YAJV,CAIyBC,OAAO,CAAC,2BAAD,CAJhC,CAKUC,YALV,CAKyB,EALzB,CAOM;AAPN,sBAS2BN,CAAAA,QAAQ,CAACO,YAAT,EAT3B,QASUC,QATV,eAUM,GAAGA,QAAQ,EAAIA,QAAQ,CAACC,MAAT,CAAgB,CAA/B,CAAiC,CAC/BC,MAAM,CAAGV,QAAQ,CAACW,SAAT,EAAT,CACD,CAFD,IAEK,CACHD,MAAM,CAAGV,QAAT,CACD,CAED,IAAQY,CAAR,GAAaR,CAAAA,YAAb,CAA0B,CACxBE,YAAY,CAACF,YAAY,CAACQ,CAAD,CAAb,CAAZ,CAAgC,GAAIhB,CAAAA,MAAM,CAACiB,QAAX,CAC9BR,OAAO,CAAC,gBAAgBD,YAAY,CAACQ,CAAD,CAA5B,CAAgC,aAAjC,CADuB,CAE9BP,OAAO,CAAC,gBAAgBD,YAAY,CAACQ,CAAD,CAA5B,CAAgC,SAAjC,CAFuB,CAG9BF,MAH8B,CAAhC,CAKA,GAAG,CACDJ,YAAY,CAACF,YAAY,CAACQ,CAAD,CAAb,CAAZ,CAA8BE,QAA9B,CAAyCT,OAAO,CAAC,gBAAgBD,YAAY,CAACQ,CAAD,CAA5B,CAAgC,cAAjC,CAAhD,CACD,OAAMG,CAAN,CAAQ,CACPC,OAAO,CAACC,GAAR,CAAYF,CAAZ,EACD,CACF,CACDb,YAAY,CAACI,YAAD,CAAZ,CA5BN,iFA8BMU,OAAO,CAACC,GAAR,CAAY,2BAAZ,cA9BN,qEADc,+CAmCdd,YAAY,GACb,CApCQ,CAoCP,CAACH,QAAD,CApCO,CAAT,CAqCA,MAAOC,CAAAA,SAAP,CACD","sourcesContent":["import { ethers } from \"ethers\";\nimport { useState, useEffect } from 'react';\n\nexport default function useContractLoader(provider) {\n  const [contracts, setContracts] = useState();\n  useEffect(() => {\n    async function loadContract() {\n      if(typeof provider != \"undefined\")\n      {\n        try{\n          let contractList = require(\"../contracts/contracts.js\")\n          let newContracts = []\n\n          //we need to check to see if this provider has a signer or not\n          let signer\n          let accounts = await provider.listAccounts()\n          if(accounts && accounts.length>0){\n            signer = provider.getSigner()\n          }else{\n            signer = provider\n          }\n\n          for(let c in contractList){\n            newContracts[contractList[c]] = new ethers.Contract(\n              require(\"../contracts/\"+contractList[c]+\".address.js\"),\n              require(\"../contracts/\"+contractList[c]+\".abi.js\"),\n              signer,\n            );\n            try{\n              newContracts[contractList[c]].bytecode = require(\"../contracts/\"+contractList[c]+\".bytecode.js\")\n            }catch(e){\n              console.log(e)\n            }\n          }\n          setContracts(newContracts)\n        }catch(e){\n          console.log(\"ERROR LOADING CONTRACTS!!\",e)\n        }\n      }\n    }\n    loadContract()\n  },[provider])\n  return contracts\n}\n"]},"metadata":{},"sourceType":"module"}