{"ast":null,"code":"import React from'react';import{ethers}from\"ethers\";import{useTimestamp}from\"./hooks\";import{Card}from'antd';export default function TimeReport(props){// pick a time here: https://www.unixtimestamp.com/index.php and paste it here:\nvar TIME_WHEN_VOTES_WILL_BE_COUNTED=10000;var timestamp=useTimestamp(props.mainnetProvider);var timeLeft=TIME_WHEN_VOTES_WILL_BE_COUNTED-timestamp;var date=new Date(timestamp*1000);return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Card,{title:/*#__PURE__*/React.createElement(\"div\",null,\"\\uD83D\\uDD70  Votes will be counted:\"),size:\"large\",style:{width:550,marginTop:25}},/*#__PURE__*/React.createElement(\"div\",null,\"at mainnet timestamp: \",TIME_WHEN_VOTES_WILL_BE_COUNTED),/*#__PURE__*/React.createElement(\"div\",null,\"current timestamp: \",timestamp),/*#__PURE__*/React.createElement(\"div\",null,\"(\",prettyTimeFromNow(timeLeft),\" from now)\")));}function prettyTimeFromNow(timeLeft){var sec_num=timeLeft;var hours=Math.floor(sec_num/3600);var minutes=Math.floor((sec_num-hours*3600)/60);var seconds=sec_num-hours*3600-minutes*60;if(hours<10){hours=\"0\"+hours;}if(minutes<10){minutes=\"0\"+minutes;}if(seconds<10){seconds=\"0\"+seconds;}return hours+':'+minutes+':'+seconds;}","map":{"version":3,"sources":["/Users/ken/Documents/scaffold-eth/packages/react-app/src/TimeReport.js"],"names":["React","ethers","useTimestamp","Card","TimeReport","props","TIME_WHEN_VOTES_WILL_BE_COUNTED","timestamp","mainnetProvider","timeLeft","date","Date","width","marginTop","prettyTimeFromNow","sec_num","hours","Math","floor","minutes","seconds"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,MAAT,KAAuB,QAAvB,CACA,OAASC,YAAT,KAA6B,SAA7B,CACA,OAASC,IAAT,KAAqB,MAArB,CAEA,cAAe,SAASC,CAAAA,UAAT,CAAoBC,KAApB,CAA2B,CAExC;AACA,GAAMC,CAAAA,+BAA+B,CAAG,KAAxC,CAEA,GAAMC,CAAAA,SAAS,CAAGL,YAAY,CAACG,KAAK,CAACG,eAAP,CAA9B,CACA,GAAMC,CAAAA,QAAQ,CAAGH,+BAA+B,CAAGC,SAAnD,CAEA,GAAIG,CAAAA,IAAI,CAAG,GAAIC,CAAAA,IAAJ,CAASJ,SAAS,CAAC,IAAnB,CAAX,CAEA,mBACE,4CACE,oBAAC,IAAD,EACE,KAAK,cACH,sEAFJ,CAME,IAAI,CAAC,OANP,CAOE,KAAK,CAAE,CAAEK,KAAK,CAAE,GAAT,CAAcC,SAAS,CAAE,EAAzB,CAPT,eASI,wDACyBP,+BADzB,CATJ,cAYI,qDACsBC,SADtB,CAZJ,cAeI,mCACIO,iBAAiB,CAACL,QAAD,CADrB,cAfJ,CADF,CADF,CAwBD,CAED,QAASK,CAAAA,iBAAT,CAA2BL,QAA3B,CAAqC,CACjC,GAAIM,CAAAA,OAAO,CAAGN,QAAd,CACA,GAAIO,CAAAA,KAAK,CAAKC,IAAI,CAACC,KAAL,CAAWH,OAAO,CAAG,IAArB,CAAd,CACA,GAAII,CAAAA,OAAO,CAAGF,IAAI,CAACC,KAAL,CAAW,CAACH,OAAO,CAAIC,KAAK,CAAG,IAApB,EAA6B,EAAxC,CAAd,CACA,GAAII,CAAAA,OAAO,CAAGL,OAAO,CAAIC,KAAK,CAAG,IAAnB,CAA4BG,OAAO,CAAG,EAApD,CAEA,GAAIH,KAAK,CAAK,EAAd,CAAkB,CAACA,KAAK,CAAK,IAAIA,KAAd,CAAqB,CACxC,GAAIG,OAAO,CAAG,EAAd,CAAkB,CAACA,OAAO,CAAG,IAAIA,OAAd,CAAuB,CAC1C,GAAIC,OAAO,CAAG,EAAd,CAAkB,CAACA,OAAO,CAAG,IAAIA,OAAd,CAAuB,CAC1C,MAAOJ,CAAAA,KAAK,CAAC,GAAN,CAAUG,OAAV,CAAkB,GAAlB,CAAsBC,OAA7B,CACH","sourcesContent":["import React from 'react'\nimport { ethers } from \"ethers\";\nimport { useTimestamp } from \"./hooks\"\nimport { Card } from 'antd';\n\nexport default function TimeReport(props) {\n\n  // pick a time here: https://www.unixtimestamp.com/index.php and paste it here:\n  const TIME_WHEN_VOTES_WILL_BE_COUNTED = 10000;\n\n  const timestamp = useTimestamp(props.mainnetProvider)\n  const timeLeft = TIME_WHEN_VOTES_WILL_BE_COUNTED - timestamp\n\n  let date = new Date(timestamp*1000)\n\n  return (\n    <div>\n      <Card\n        title={(\n          <div>\n            ðŸ•°  Votes will be counted:\n          </div>\n        )}\n        size=\"large\"\n        style={{ width: 550, marginTop: 25 }}\n        >\n          <div>\n            at mainnet timestamp: {TIME_WHEN_VOTES_WILL_BE_COUNTED}\n          </div>\n          <div>\n            current timestamp: {timestamp}\n          </div>\n          <div>\n            ({prettyTimeFromNow(timeLeft)} from now)\n          </div>\n      </Card>\n    </div>\n  );\n\n}\n\nfunction prettyTimeFromNow(timeLeft) {\n    var sec_num = timeLeft\n    var hours   = Math.floor(sec_num / 3600);\n    var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\n    var seconds = sec_num - (hours * 3600) - (minutes * 60);\n\n    if (hours   < 10) {hours   = \"0\"+hours;}\n    if (minutes < 10) {minutes = \"0\"+minutes;}\n    if (seconds < 10) {seconds = \"0\"+seconds;}\n    return hours+':'+minutes+':'+seconds;\n}\n"]},"metadata":{},"sourceType":"module"}